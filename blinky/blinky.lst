
blinky.elf:     file format elf32-littlearm
blinky.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000f7d

Program Header:
0x70000001 off    0x00012958 vaddr 0x1a002958 paddr 0x1a002958 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010080 vaddr 0x10000080 paddr 0x10000080 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002960 memsz 0x00002960 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002960 align 2**16
         filesz 0x00000080 memsz 0x00000080 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002958  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  10000000  1a002960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020080  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020080  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020080  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020080  2**2
                  CONTENTS
  6 .bss          00000100  10000080  10000080  00010080  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020080  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020080  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020080  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020080  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a002958  1a002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020080  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020080  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020080  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020080  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020080  2**2
                  CONTENTS
 17 .noinit       00000000  10000180  10000180  00020080  2**2
                  CONTENTS
 18 .debug_info   00017845  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000430a  00000000  00000000  000378c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    000055fb  00000000  00000000  0003bbcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000988  00000000  00000000  000411ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000840  00000000  00000000  00041b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000be6f  00000000  00000000  00042392  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000ae6c  00000000  00000000  0004e201  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00026513  00000000  00000000  0005906d  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  0007f580  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000039  00000000  00000000  0007f5ff  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001554  00000000  00000000  0007f638  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000080 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002958 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000180 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 blinky.c
1a000300 l     F .text	00000016 blinky_ledOff
1a000316 l     F .text	00000022 blinky_ledOn
1a000338 l     F .text	00000064 blinky_init
10000000 l     O .data	0000003c s_blinky
1a002534 l     O .text	00000010 rs_blinky
1a00249c l     O .text	00000023 __qo_n.5797
1a0024c0 l     O .text	00000008 __s_n.5799
1a0024c8 l     O .text	0000000b __to_n.5798
1a0024d8 l     O .text	00000003 e_tout
00000000 l    df *ABS*	00000000 bsp.c
1a00039c l     F .text	00000008 tickHook
00000000 l    df *ABS*	00000000 main.c
10000080 l     O .bss	00000010 qsto
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00055c l     F .text	000000a0 pll_calc_divs
1a0005fc l     F .text	00000100 pll_get_frac
1a0006fc l     F .text	0000004c Chip_Clock_FindBaseClock
1a000970 l     F .text	00000022 Chip_Clock_GetDivRate
10000090 l     O .bss	00000008 audio_usb_pll_freq
1a002568 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0025d4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000c7c l     F .text	0000002c Chip_UART_GetIndex
1a00261c l     O .text	00000008 UART_BClock
1a002624 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 board.c
1a000e24 l     F .text	00000044 Board_LED_Init
1a002634 l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002640 l     O .text	0000000c InitClkStates
1a00264c l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_datatypes.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001014 l     F .text	00000034 gpioObtainPinConfig
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0012b0 l     F .text	00000002 errorOcurred
1a0012b2 l     F .text	00000002 doNothing
10000040 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 rkhfwk_bittbl.c
1a0027e4 l     O .text	00000008 bitMaskTbl
1a0027ec l     O .text	00000100 leastBitSetTbl
00000000 l    df *ABS*	00000000 rkhfwk_sched.c
00000000 l    df *ABS*	00000000 rkhport.c
10000098 l     O .bss	00000004 critical_nesting
00000000 l    df *ABS*	00000000 rkhqueue.c
00000000 l    df *ABS*	00000000 rkhsm.c
1a00169c l     F .text	00000024 rkh_add_tr_action
1000009c l     O .bss	00000008 al.5753
100000a4 l     O .bss	00000001 ix_n.5750
100000a5 l     O .bss	00000001 ix_x.5751
100000a6 l     O .bss	00000001 nal.5755
100000a8 l     O .bss	00000004 pal.5754
100000ac l     O .bss	00000004 stn.5748
00000000 l    df *ABS*	00000000 rkhsma.c
00000000 l    df *ABS*	00000000 rkhsma_prio.c
100000b0 l     O .bss	00000002 readyGroup
00000000 l    df *ABS*	00000000 rkhsma_sync.c
00000000 l    df *ABS*	00000000 rkhtmr.c
1a001b5c l     F .text	0000003c rem_from_list
100000b4 l     O .bss	00000004 thead
00000000 l    df *ABS*	00000000 rkhtrc_filter.c
1a001cf8 l     F .text	0000001c setAllFilters
1a001d14 l     F .text	00000026 setOneFilter
1a001d3a l     F .text	00000018 isOffFilter
1a001d54 l     F .text	0000002c getFilterTable
100000b8 l     O .bss	00000011 trceftbl
100000c9 l     O .bss	00000001 trcgfilter
100000cc l     O .bss	00000002 trcsigftbl
100000d0 l     O .bss	00000001 trcsmaftbl
1a002928 l     O .text	00000008 fsig
1a002930 l     O .text	00000008 fsma
1a002948 l     O .text	00000010 trcgmtbl
00000000 l    df *ABS*	00000000 rkhtrc_record.c
100000d1 l     O .bss	00000001 chk
100000d2 l     O .bss	00000001 nseq
00000000 l    df *ABS*	00000000 rkhtrc_stream.c
100000d4 l     O .bss	00000004 trcend
100000d8 l     O .bss	00000004 trcin
100000dc l     O .bss	00000004 trcout
100000e0 l     O .bss	00000001 trcqty
100000e4 l     O .bss	00000080 trcstm
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a000300 l       .text	00000000 __CRP_WORD_END__
1a0002fc l       .text	00000000 __CRP_WORD_START__
1a000794 g     F .text	0000001c Chip_Clock_GetDividerSource
1a001334 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a0014c8 g     F .text	00000020 rkh_fwk_exit
1a001f24 g     F .text	00000030 rkh_trc_u8
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a000afe g     F .text	00000024 Chip_GPIO_SetDir
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a00128c g     F .text	00000024 SysTick_Handler
1a000cfc g     F .text	00000040 Chip_UART_SetBaud
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002960 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a001ed0 g     F .text	0000002c rkh_trc_symFil_isoff
1a001b44 g     F .text	0000000c rkh_sma_setReady
1a0018bc g     F .text	00000068 rkh_sma_register
1a00018a  w    F .text	00000002 CAN1_IRQHandler
1a00050c g     F .text	0000000c bsp_ledOff
1a002960 g       .ARM.exidx	00000000 _etext
1a001a8c g     F .text	0000003c rkh_smaPrio_setReady
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a001500 g     F .text	00000018 rkhport_exit_critical
1a000490 g     F .text	00000070 bsp_init
1a001b98 g     F .text	000000ac rkh_tmr_tick
1a001378 g     F .text	00000044 TIMER3_IRQHandler
1a000a12 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a0003f8 g     F .text	00000032 rkh_assert
1a0024dc g     O .text	0000000c ledOff
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a0003a8 g     F .text	00000002 rkh_trc_close
1a001fe8 g     F .text	0000002c rkh_trc_obj
1a001f70 g     F .text	00000012 rkh_trc_u16
1a00217c g     F .text	00000000 .hidden __aeabi_uldivmod
10000180 g       .noinit	00000000 _noinit
1a001efc g     F .text	0000001c rkh_trc_init
10000164 g     O .bss	00000004 SystemCoreClock
1a0003ee g     F .text	0000000a rkh_hook_idle
1a0003a6 g     F .text	00000002 rkh_hook_start
1a000ca8 g     F .text	00000054 Chip_UART_Init
1a001dd0 g     F .text	00000078 rkh_trc_filter_event_
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a0024d4 g     O .text	00000004 blinky
1a000180  w    F .text	00000002 UsageFault_Handler
1a000a5c g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
10000168 g     O .bss	00000008 tickCounter
1a000f04 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002014 g     F .text	0000002a rkh_trc_sig
1a0021ac g     F .text	000002dc .hidden __udivmoddi4
1a001b2c g     F .text	00000018 rkh_sma_block
1a00262c g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a0003aa g     F .text	00000004 rkh_trc_getts
1a001214 g     F .text	00000078 tickConfig
1a001600 g     F .text	0000009c rkh_queue_put_fifo
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a001048 g     F .text	00000174 gpioConfig
1a001b0c g     F .text	00000020 rkh_smaPrio_findHighest
1a002958 g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0003ae g     F .text	00000040 rkh_trc_flush
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a001f54 g     F .text	0000001c rkh_trc_end
1a001a04 g     F .text	00000078 rkh_sma_get
1a000ea4 g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00018a  w    F .text	00000002 RTC_IRQHandler
10000180 g       .bss	00000000 _ebss
1a0012b4 g     F .text	00000040 TIMER0_IRQHandler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a000748 g     F .text	0000004c Chip_Clock_EnableCrystal
1a001004 g     F .text	0000000c boardConfig
1a001fd0 g     F .text	00000018 rkh_trc_str
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a001518 g     F .text	0000004c rkh_queue_init
1a0012f4 g     F .text	00000040 TIMER1_IRQHandler
1a001450 g     F .text	00000002 UART2_IRQHandler
1a001478 g     F .text	00000050 rkh_fwk_enter
1a000904 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001010 g     F .text	00000004 sAPI_NullFuncPtr
1a001e88 g     F .text	00000048 rkh_trc_symFil
1a001420 g     F .text	00000030 uartWriteByte
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1a001f18 g     F .text	0000000c rkh_trc_clear_chk
1a0009ec g     F .text	00000026 Chip_Clock_GetBaseClock
10000080 g       .bss	00000000 _bss
10000178 g     O .bss	00000008 rkh_sptbl
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a0014e8 g     F .text	00000018 rkhport_enter_critical
1a000afc g     F .text	00000002 Chip_GPIO_Init
1a002630 g     O .text	00000004 OscRateIn
1a002148 g     F .text	00000034 rkh_trcStream_init
10000180 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a0020f8 g     F .text	00000050 rkh_trc_put
1a000178 g       .text	00000000 __bss_section_table_end
1a0020a4 g     F .text	00000054 rkh_trc_get_block
1a002488  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0016c0 g     F .text	0000006c rkh_sm_init
1a00018a  w    F .text	00000002 USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a001468 g     F .text	0000000c rkh_bittbl_getLeastBitSetPos
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a0007b0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a00248c g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000518 g     F .text	00000030 main
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a002514 g     O .text	00000020 ledOn_trtbl
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a000a20 g     F .text	0000003c Chip_Clock_EnableOpts
1a001924 g     F .text	00000074 rkh_sma_activate
1a0026ac g     O .text	00000136 gpioPinsConfig
1a0007cc g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000aa8 g     F .text	00000054 fpuInit
1a001ac8 g     F .text	00000044 rkh_smaPrio_setUnready
1a000884 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001d80 g     F .text	00000050 rkh_trc_filter_group_
1a001e48 g     F .text	00000040 rkh_trc_isoff_
1a000ff8 g     F .text	0000000c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0011bc g     F .text	00000056 gpioWrite
1a000500 g     F .text	0000000c bsp_ledOn
1a001f82 g     F .text	00000022 rkh_trc_u32
1a001c44 g     F .text	0000004c rkh_tmr_init_
1a000ecc g     F .text	00000038 Board_SetupMuxing
1a000d3c g     F .text	000000e8 Chip_UART_SetBaudFDR
10000170 g     O .bss	00000008 tickRateMS
1a00018a  w    F .text	00000002 ETH_IRQHandler
1000003c g     O .data	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000180 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0013bc g     F .text	00000064 uartConfig
1a0003a4 g     F .text	00000002 rkh_hook_timetick
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a000e7c g     F .text	00000028 Board_Debug_Init
10000080 g       .data	00000000 _edata
1a00042c g     F .text	00000064 rkh_trc_open
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a001998 g     F .text	0000006a rkh_sma_post_fifo
1a000b24 g     F .text	00000158 Chip_SetupCoreClock
1a00018a  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a000f7c g     F .text	0000007c ResetISR
1a000548 g     F .text	00000014 SystemCoreClockUpdate
1a002508 g     O .text	0000000c ledOn
1a00203e g     F .text	0000002a rkh_trc_ao
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002488  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001564 g     F .text	0000009c rkh_queue_get
1a001452 g     F .text	00000002 UART3_IRQHandler
1a0024e8 g     O .text	00000020 ledOff_trtbl
1a001b50 g     F .text	0000000c rkh_sma_setUnready
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a001454 g     F .text	00000014 rkh_bittbl_getBitMask
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a002068 g     F .text	0000003c rkh_trc_state
1a001fa4 g     F .text	0000002c rkh_trc_begin
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a000e68 g     F .text	00000014 Board_UART_Init
1a001c90 g     F .text	00000068 rkh_tmr_start
1a001474 g     F .text	00000002 rkh_fwk_init
1a001a7c g     F .text	00000010 rkh_smaPrio_isReady
1a000994 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a000f70 g     F .text	0000000c Board_SystemInit
1a00172c g     F .text	00000190 rkh_sm_dispatch



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 7d 0f 00 1a 79 01 00 1a 7b 01 00 1a     ....}...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 00 00 00 00     }...............
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	8d 12 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a b5 12 00 1a f5 12 00 1a 35 13 00 1a     ............5...
1a00007c:	79 13 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     y...............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a bd 01 00 1a 8b 01 00 1a 51 14 00 1a     ............Q...
1a0000ac:	53 14 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     S...............
1a0000bc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a002960 	.word	0x1a002960
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000080 	.word	0x00000080
1a000120:	1a002960 	.word	0x1a002960
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002960 	.word	0x1a002960
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002960 	.word	0x1a002960
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002960 	.word	0x1a002960
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000080 	.word	0x10000080
1a000154:	00000100 	.word	0x00000100
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr

1a0001bc <UART0_IRQHandler>:
/*==================[ISR external functions definition]======================*/

__attribute__ ((section(".after_vectors")))

/* 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24) */
void UART0_IRQHandler(void){
1a0001bc:	4770      	bx	lr
1a0001be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x1a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <blinky_ledOff>:
    ++me->cnt;
}

static void
blinky_ledOff(Blinky *const me, RKH_EVT_T *pe)
{
1a000300:	b508      	push	{r3, lr}
    (void)me;
    (void)pe;

    RKH_TMR_ONESHOT(&me->timer, RKH_UPCAST(RKH_SMA_T, me), LED_OFF_TIME);
1a000302:	2300      	movs	r3, #0
1a000304:	86c3      	strh	r3, [r0, #54]	; 0x36
1a000306:	22c8      	movs	r2, #200	; 0xc8
1a000308:	4601      	mov	r1, r0
1a00030a:	3028      	adds	r0, #40	; 0x28
1a00030c:	f001 fcc0 	bl	1a001c90 <rkh_tmr_start>
    bsp_ledOff();
1a000310:	f000 f8fc 	bl	1a00050c <bsp_ledOff>
1a000314:	bd08      	pop	{r3, pc}

1a000316 <blinky_ledOn>:
{
1a000316:	b510      	push	{r4, lr}
1a000318:	4604      	mov	r4, r0
    RKH_TMR_ONESHOT(&me->timer, RKH_UPCAST(RKH_SMA_T, me), LED_ON_TIME);
1a00031a:	2300      	movs	r3, #0
1a00031c:	86c3      	strh	r3, [r0, #54]	; 0x36
1a00031e:	22c8      	movs	r2, #200	; 0xc8
1a000320:	4601      	mov	r1, r0
1a000322:	3028      	adds	r0, #40	; 0x28
1a000324:	f001 fcb4 	bl	1a001c90 <rkh_tmr_start>
    bsp_ledOn();
1a000328:	f000 f8ea 	bl	1a000500 <bsp_ledOn>
    ++me->cnt;
1a00032c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
1a000330:	3301      	adds	r3, #1
1a000332:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
1a000336:	bd10      	pop	{r4, pc}

1a000338 <blinky_init>:
{
1a000338:	b538      	push	{r3, r4, r5, lr}
1a00033a:	4604      	mov	r4, r0
    RKH_TR_FWK_AO(me);
1a00033c:	f001 fe7f 	bl	1a00203e <rkh_trc_ao>
    RKH_TR_FWK_QUEUE(&RKH_UPCAST(RKH_SMA_T, me)->equeue);
1a000340:	4a10      	ldr	r2, [pc, #64]	; (1a000384 <blinky_init+0x4c>)
1a000342:	f104 0108 	add.w	r1, r4, #8
1a000346:	20b3      	movs	r0, #179	; 0xb3
1a000348:	f001 fe4e 	bl	1a001fe8 <rkh_trc_obj>
    RKH_TR_FWK_STATE(me, &ledOn);
1a00034c:	490e      	ldr	r1, [pc, #56]	; (1a000388 <blinky_init+0x50>)
1a00034e:	4620      	mov	r0, r4
1a000350:	f001 fe8a 	bl	1a002068 <rkh_trc_state>
    RKH_TR_FWK_STATE(me, &ledOff);
1a000354:	490d      	ldr	r1, [pc, #52]	; (1a00038c <blinky_init+0x54>)
1a000356:	4620      	mov	r0, r4
1a000358:	f001 fe86 	bl	1a002068 <rkh_trc_state>
    RKH_TR_FWK_TIMER(&me->timer);
1a00035c:	f104 0528 	add.w	r5, r4, #40	; 0x28
1a000360:	4a0b      	ldr	r2, [pc, #44]	; (1a000390 <blinky_init+0x58>)
1a000362:	4629      	mov	r1, r5
1a000364:	20b1      	movs	r0, #177	; 0xb1
1a000366:	f001 fe3f 	bl	1a001fe8 <rkh_trc_obj>
    RKH_TR_FWK_SIG(TIMEOUT);
1a00036a:	490a      	ldr	r1, [pc, #40]	; (1a000394 <blinky_init+0x5c>)
1a00036c:	2000      	movs	r0, #0
1a00036e:	f001 fe51 	bl	1a002014 <rkh_trc_sig>
    RKH_TMR_INIT(&me->timer, &e_tout, NULL);
1a000372:	4909      	ldr	r1, [pc, #36]	; (1a000398 <blinky_init+0x60>)
1a000374:	4628      	mov	r0, r5
1a000376:	f001 fc65 	bl	1a001c44 <rkh_tmr_init_>
    blinky_ledOn(me, NULL);
1a00037a:	2100      	movs	r1, #0
1a00037c:	4620      	mov	r0, r4
1a00037e:	f7ff ffca 	bl	1a000316 <blinky_ledOn>
1a000382:	bd38      	pop	{r3, r4, r5, pc}
1a000384:	1a00249c 	.word	0x1a00249c
1a000388:	1a002508 	.word	0x1a002508
1a00038c:	1a0024dc 	.word	0x1a0024dc
1a000390:	1a0024c8 	.word	0x1a0024c8
1a000394:	1a0024c0 	.word	0x1a0024c0
1a000398:	1a0024d8 	.word	0x1a0024d8

1a00039c <tickHook>:
static bool_t tickHook(void *p);

/* ---------------------------- Local functions ---------------------------- */
static bool_t
tickHook(void *p)
{
1a00039c:	b508      	push	{r3, lr}
    RKH_TIM_TICK();
1a00039e:	f001 fbfb 	bl	1a001b98 <rkh_tmr_tick>
}
1a0003a2:	bd08      	pop	{r3, pc}

1a0003a4 <rkh_hook_timetick>:

/* ---------------------------- Global functions --------------------------- */
void 
rkh_hook_timetick(void) 
{
1a0003a4:	4770      	bx	lr

1a0003a6 <rkh_hook_start>:
}

void 
rkh_hook_start(void) 
{
1a0003a6:	4770      	bx	lr

1a0003a8 <rkh_trc_close>:
	RKH_TRC_SEND_CFG(BSP_TS_RATE_HZ );
}

void 
rkh_trc_close(void)
{
1a0003a8:	4770      	bx	lr

1a0003aa <rkh_trc_getts>:
RKH_TS_T 
rkh_trc_getts(void)
{
//	return ( RKH_TS_T )get_ts();
    return 0;
}
1a0003aa:	2000      	movs	r0, #0
1a0003ac:	4770      	bx	lr

1a0003ae <rkh_trc_flush>:

void 
rkh_trc_flush(void)
{
1a0003ae:	b530      	push	{r4, r5, lr}
1a0003b0:	b083      	sub	sp, #12
1a0003b2:	e00c      	b.n	1a0003ce <rkh_trc_flush+0x20>

		if((blk != (rui8_t *)0))
		{
            while(nbytes--)
            {
                uartWriteByte(TRC_COM_PORT,*blk++);
1a0003b4:	1c65      	adds	r5, r4, #1
1a0003b6:	7821      	ldrb	r1, [r4, #0]
1a0003b8:	2000      	movs	r0, #0
1a0003ba:	f001 f831 	bl	1a001420 <uartWriteByte>
1a0003be:	462c      	mov	r4, r5
            while(nbytes--)
1a0003c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0003c4:	1e5a      	subs	r2, r3, #1
1a0003c6:	f88d 2007 	strb.w	r2, [sp, #7]
1a0003ca:	2b00      	cmp	r3, #0
1a0003cc:	d1f2      	bne.n	1a0003b4 <rkh_trc_flush+0x6>
		nbytes = 128;
1a0003ce:	ac02      	add	r4, sp, #8
1a0003d0:	2380      	movs	r3, #128	; 0x80
1a0003d2:	f804 3d01 	strb.w	r3, [r4, #-1]!
		RKH_ENTER_CRITICAL_();
1a0003d6:	f001 f887 	bl	1a0014e8 <rkhport_enter_critical>
		blk = rkh_trc_get_block(&nbytes);
1a0003da:	4620      	mov	r0, r4
1a0003dc:	f001 fe62 	bl	1a0020a4 <rkh_trc_get_block>
1a0003e0:	4604      	mov	r4, r0
		RKH_EXIT_CRITICAL_();
1a0003e2:	f001 f88d 	bl	1a001500 <rkhport_exit_critical>
		if((blk != (rui8_t *)0))
1a0003e6:	2c00      	cmp	r4, #0
1a0003e8:	d1ea      	bne.n	1a0003c0 <rkh_trc_flush+0x12>
            }
		}
		else
			break;
	}	
}
1a0003ea:	b003      	add	sp, #12
1a0003ec:	bd30      	pop	{r4, r5, pc}

1a0003ee <rkh_hook_idle>:
{
1a0003ee:	b508      	push	{r3, lr}
	RKH_ENA_INTERRUPT();
1a0003f0:	b662      	cpsie	i
	RKH_TRC_FLUSH();
1a0003f2:	f7ff ffdc 	bl	1a0003ae <rkh_trc_flush>
1a0003f6:	bd08      	pop	{r3, pc}

1a0003f8 <rkh_assert>:
{
1a0003f8:	b510      	push	{r4, lr}
1a0003fa:	4604      	mov	r4, r0
	RKH_DIS_INTERRUPT();
1a0003fc:	b672      	cpsid	i
	RKH_TR_FWK_ASSERT( (RKHROM char *)file, __LINE__ );
1a0003fe:	20ad      	movs	r0, #173	; 0xad
1a000400:	f001 fd22 	bl	1a001e48 <rkh_trc_isoff_>
1a000404:	b928      	cbnz	r0, 1a000412 <rkh_assert+0x1a>
1a000406:	f7ff ffd2 	bl	1a0003ae <rkh_trc_flush>
	rkh_fwk_exit();
1a00040a:	f001 f85d 	bl	1a0014c8 <rkh_fwk_exit>
	reset_now();
1a00040e:	beff      	bkpt	0x00ff
1a000410:	bd10      	pop	{r4, pc}
	RKH_TR_FWK_ASSERT( (RKHROM char *)file, __LINE__ );
1a000412:	20ad      	movs	r0, #173	; 0xad
1a000414:	f001 fdc6 	bl	1a001fa4 <rkh_trc_begin>
1a000418:	4620      	mov	r0, r4
1a00041a:	f001 fdd9 	bl	1a001fd0 <rkh_trc_str>
1a00041e:	206f      	movs	r0, #111	; 0x6f
1a000420:	f001 fda6 	bl	1a001f70 <rkh_trc_u16>
1a000424:	f001 fd96 	bl	1a001f54 <rkh_trc_end>
1a000428:	e7ed      	b.n	1a000406 <rkh_assert+0xe>
1a00042a:	Address 0x1a00042a is out of bounds.


1a00042c <rkh_trc_open>:
{
1a00042c:	b508      	push	{r3, lr}
	rkh_trc_init();
1a00042e:	f001 fd65 	bl	1a001efc <rkh_trc_init>
    uartConfig(TRC_COM_PORT, 115200);
1a000432:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000436:	2000      	movs	r0, #0
1a000438:	f000 ffc0 	bl	1a0013bc <uartConfig>
	RKH_TRC_SEND_CFG(BSP_TS_RATE_HZ );
1a00043c:	f001 f854 	bl	1a0014e8 <rkhport_enter_critical>
1a000440:	f001 fd6a 	bl	1a001f18 <rkh_trc_clear_chk>
1a000444:	20ac      	movs	r0, #172	; 0xac
1a000446:	f001 fd6d 	bl	1a001f24 <rkh_trc_u8>
1a00044a:	f242 4006 	movw	r0, #9222	; 0x2406
1a00044e:	f001 fd8f 	bl	1a001f70 <rkh_trc_u16>
1a000452:	480e      	ldr	r0, [pc, #56]	; (1a00048c <rkh_trc_open+0x60>)
1a000454:	f001 fd95 	bl	1a001f82 <rkh_trc_u32>
1a000458:	2014      	movs	r0, #20
1a00045a:	f001 fd63 	bl	1a001f24 <rkh_trc_u8>
1a00045e:	2042      	movs	r0, #66	; 0x42
1a000460:	f001 fd60 	bl	1a001f24 <rkh_trc_u8>
1a000464:	2011      	movs	r0, #17
1a000466:	f001 fd5d 	bl	1a001f24 <rkh_trc_u8>
1a00046a:	2002      	movs	r0, #2
1a00046c:	f001 fd5a 	bl	1a001f24 <rkh_trc_u8>
1a000470:	2010      	movs	r0, #16
1a000472:	f001 fd57 	bl	1a001f24 <rkh_trc_u8>
1a000476:	200a      	movs	r0, #10
1a000478:	f001 fd7a 	bl	1a001f70 <rkh_trc_u16>
1a00047c:	f001 fd6a 	bl	1a001f54 <rkh_trc_end>
1a000480:	f001 f83e 	bl	1a001500 <rkhport_exit_critical>
1a000484:	f7ff ff93 	bl	1a0003ae <rkh_trc_flush>
1a000488:	bd08      	pop	{r3, pc}
1a00048a:	bf00      	nop
1a00048c:	0003e78a 	.word	0x0003e78a

1a000490 <bsp_init>:
#endif

void 
bsp_init(int argc, char *argv[])
{
1a000490:	b508      	push	{r3, lr}
	(void)argc;
	(void)argv;
	
    boardConfig();
1a000492:	f000 fdb7 	bl	1a001004 <boardConfig>

    tickConfig(1000/RKH_CFG_FWK_TICK_RATE_HZ, tickHook);
1a000496:	4a18      	ldr	r2, [pc, #96]	; (1a0004f8 <bsp_init+0x68>)
1a000498:	200a      	movs	r0, #10
1a00049a:	2100      	movs	r1, #0
1a00049c:	f000 feba 	bl	1a001214 <tickConfig>
    
    gpioConfig(0, GPIO_ENABLE);
1a0004a0:	2105      	movs	r1, #5
1a0004a2:	2000      	movs	r0, #0
1a0004a4:	f000 fdd0 	bl	1a001048 <gpioConfig>

    gpioConfig(LED1, GPIO_OUTPUT);
1a0004a8:	2101      	movs	r1, #1
1a0004aa:	2028      	movs	r0, #40	; 0x28
1a0004ac:	f000 fdcc 	bl	1a001048 <gpioConfig>
    
	rkh_fwk_init();
1a0004b0:	f000 ffe0 	bl	1a001474 <rkh_fwk_init>

	RKH_FILTER_ON_GROUP(RKH_TRC_ALL_GROUPS);
1a0004b4:	2201      	movs	r2, #1
1a0004b6:	2108      	movs	r1, #8
1a0004b8:	2000      	movs	r0, #0
1a0004ba:	f001 fc61 	bl	1a001d80 <rkh_trc_filter_group_>
	RKH_FILTER_ON_EVENT(RKH_TRC_ALL_EVENTS);
1a0004be:	21e8      	movs	r1, #232	; 0xe8
1a0004c0:	2000      	movs	r0, #0
1a0004c2:	f001 fc85 	bl	1a001dd0 <rkh_trc_filter_event_>
	RKH_FILTER_OFF_EVENT(RKH_TE_TMR_TOUT);
1a0004c6:	2183      	movs	r1, #131	; 0x83
1a0004c8:	2001      	movs	r0, #1
1a0004ca:	f001 fc81 	bl	1a001dd0 <rkh_trc_filter_event_>
	RKH_FILTER_OFF_EVENT(RKH_TE_SM_STATE);
1a0004ce:	2163      	movs	r1, #99	; 0x63
1a0004d0:	2001      	movs	r0, #1
1a0004d2:	f001 fc7d 	bl	1a001dd0 <rkh_trc_filter_event_>
	RKH_FILTER_OFF_SMA(blinky );
1a0004d6:	4b09      	ldr	r3, [pc, #36]	; (1a0004fc <bsp_init+0x6c>)
1a0004d8:	681b      	ldr	r3, [r3, #0]
1a0004da:	681b      	ldr	r3, [r3, #0]
1a0004dc:	2201      	movs	r2, #1
1a0004de:	7819      	ldrb	r1, [r3, #0]
1a0004e0:	2002      	movs	r0, #2
1a0004e2:	f001 fcd1 	bl	1a001e88 <rkh_trc_symFil>
	RKH_FILTER_OFF_ALL_SIGNALS();
1a0004e6:	2281      	movs	r2, #129	; 0x81
1a0004e8:	2100      	movs	r1, #0
1a0004ea:	2001      	movs	r0, #1
1a0004ec:	f001 fccc 	bl	1a001e88 <rkh_trc_symFil>

	RKH_TRC_OPEN();
1a0004f0:	f7ff ff9c 	bl	1a00042c <rkh_trc_open>

	RKH_ENA_INTERRUPT();
1a0004f4:	b662      	cpsie	i
1a0004f6:	bd08      	pop	{r3, pc}
1a0004f8:	1a00039d 	.word	0x1a00039d
1a0004fc:	1a0024d4 	.word	0x1a0024d4

1a000500 <bsp_ledOn>:
}

void 
bsp_ledOn(void)
{
1a000500:	b508      	push	{r3, lr}
	gpioWrite(LED1, ON);
1a000502:	2101      	movs	r1, #1
1a000504:	2028      	movs	r0, #40	; 0x28
1a000506:	f000 fe59 	bl	1a0011bc <gpioWrite>
1a00050a:	bd08      	pop	{r3, pc}

1a00050c <bsp_ledOff>:
}


void 
bsp_ledOff(void)
{
1a00050c:	b508      	push	{r3, lr}
	gpioWrite(LED1, OFF);
1a00050e:	2100      	movs	r1, #0
1a000510:	2028      	movs	r0, #40	; 0x28
1a000512:	f000 fe53 	bl	1a0011bc <gpioWrite>
1a000516:	bd08      	pop	{r3, pc}

1a000518 <main>:
/* ----------------------- Local function prototypes ----------------------- */
/* ---------------------------- Local functions ---------------------------- */
/* ---------------------------- Global functions --------------------------- */
int
main(int argc, char *argv[])
{
1a000518:	b510      	push	{r4, lr}
1a00051a:	b082      	sub	sp, #8
    bsp_init(argc, argv);
1a00051c:	f7ff ffb8 	bl	1a000490 <bsp_init>

    RKH_SMA_ACTIVATE(blinky, qsto, QSTO_SIZE, 0, 0);
1a000520:	4b07      	ldr	r3, [pc, #28]	; (1a000540 <main+0x28>)
1a000522:	6818      	ldr	r0, [r3, #0]
1a000524:	2400      	movs	r4, #0
1a000526:	9400      	str	r4, [sp, #0]
1a000528:	4623      	mov	r3, r4
1a00052a:	2204      	movs	r2, #4
1a00052c:	4905      	ldr	r1, [pc, #20]	; (1a000544 <main+0x2c>)
1a00052e:	f001 f9f9 	bl	1a001924 <rkh_sma_activate>
    rkh_fwk_enter();
1a000532:	f000 ffa1 	bl	1a001478 <rkh_fwk_enter>

    RKH_TRC_CLOSE();
1a000536:	f7ff ff37 	bl	1a0003a8 <rkh_trc_close>
    return 0;
}
1a00053a:	4620      	mov	r0, r4
1a00053c:	b002      	add	sp, #8
1a00053e:	bd10      	pop	{r4, pc}
1a000540:	1a0024d4 	.word	0x1a0024d4
1a000544:	10000080 	.word	0x10000080

1a000548 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000548:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00054a:	2069      	movs	r0, #105	; 0x69
1a00054c:	f000 fa86 	bl	1a000a5c <Chip_Clock_GetRate>
1a000550:	4b01      	ldr	r3, [pc, #4]	; (1a000558 <SystemCoreClockUpdate+0x10>)
1a000552:	6018      	str	r0, [r3, #0]
1a000554:	bd08      	pop	{r3, pc}
1a000556:	bf00      	nop
1a000558:	10000164 	.word	0x10000164

1a00055c <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00055c:	b5f0      	push	{r4, r5, r6, r7, lr}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a00055e:	680b      	ldr	r3, [r1, #0]
1a000560:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000564:	d002      	beq.n	1a00056c <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a000566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00056a:	600b      	str	r3, [r1, #0]
1a00056c:	4607      	mov	r7, r0
1a00056e:	2501      	movs	r5, #1
1a000570:	e03b      	b.n	1a0005ea <pll_calc_divs+0x8e>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a000572:	694b      	ldr	r3, [r1, #20]
1a000574:	fb03 f302 	mul.w	r3, r3, r2
1a000578:	fbb3 f3f5 	udiv	r3, r3, r5
1a00057c:	e014      	b.n	1a0005a8 <pll_calc_divs+0x4c>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a00057e:	461c      	mov	r4, r3
1a000580:	e020      	b.n	1a0005c4 <pll_calc_divs+0x68>
       return -val;
1a000582:	f1ce 0e00 	rsb	lr, lr, #0
1a000586:	e020      	b.n	1a0005ca <pll_calc_divs+0x6e>
           for (m = 1; m <= 256; m++) {
1a000588:	3201      	adds	r2, #1
1a00058a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00058e:	dc26      	bgt.n	1a0005de <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 6)) {
1a000590:	680c      	ldr	r4, [r1, #0]
1a000592:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000596:	d0ec      	beq.n	1a000572 <pll_calc_divs+0x16>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000598:	1c73      	adds	r3, r6, #1
1a00059a:	fa02 fe03 	lsl.w	lr, r2, r3
1a00059e:	694b      	ldr	r3, [r1, #20]
1a0005a0:	fb03 f30e 	mul.w	r3, r3, lr
1a0005a4:	fbb3 f3f5 	udiv	r3, r3, r5
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0005a8:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a0005f4 <pll_calc_divs+0x98>
1a0005ac:	4573      	cmp	r3, lr
1a0005ae:	d9eb      	bls.n	1a000588 <pll_calc_divs+0x2c>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a0005b0:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a0005f8 <pll_calc_divs+0x9c>
1a0005b4:	4573      	cmp	r3, lr
1a0005b6:	d812      	bhi.n	1a0005de <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 7)) {
1a0005b8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0005bc:	d1df      	bne.n	1a00057e <pll_calc_divs+0x22>
               } else {
                   fout = fcco >> (p + 1);
1a0005be:	1c74      	adds	r4, r6, #1
1a0005c0:	fa23 f404 	lsr.w	r4, r3, r4
   if (val < 0)
1a0005c4:	ebb0 0e04 	subs.w	lr, r0, r4
1a0005c8:	d4db      	bmi.n	1a000582 <pll_calc_divs+0x26>
               }

               if (ABS(freq - fout) < prev) {
1a0005ca:	4577      	cmp	r7, lr
1a0005cc:	d9dc      	bls.n	1a000588 <pll_calc_divs+0x2c>
                   ppll->nsel = n;
1a0005ce:	608d      	str	r5, [r1, #8]
                   ppll->psel = p + 1;
1a0005d0:	1c77      	adds	r7, r6, #1
1a0005d2:	60cf      	str	r7, [r1, #12]
                   ppll->msel = m;
1a0005d4:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a0005d6:	618c      	str	r4, [r1, #24]
                   ppll->fcco = fcco;
1a0005d8:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a0005da:	4677      	mov	r7, lr
1a0005dc:	e7d4      	b.n	1a000588 <pll_calc_divs+0x2c>
       for (p = 0; p < 4; p ++) {
1a0005de:	3601      	adds	r6, #1
1a0005e0:	2e03      	cmp	r6, #3
1a0005e2:	dc01      	bgt.n	1a0005e8 <pll_calc_divs+0x8c>
1a0005e4:	2201      	movs	r2, #1
1a0005e6:	e7d0      	b.n	1a00058a <pll_calc_divs+0x2e>
   for (n = 1; n <= 4; n++) {
1a0005e8:	3501      	adds	r5, #1
1a0005ea:	2d04      	cmp	r5, #4
1a0005ec:	dc01      	bgt.n	1a0005f2 <pll_calc_divs+0x96>
1a0005ee:	2600      	movs	r6, #0
1a0005f0:	e7f6      	b.n	1a0005e0 <pll_calc_divs+0x84>
               }
           }
       }
   }
}
1a0005f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0005f4:	094c5eff 	.word	0x094c5eff
1a0005f8:	1312d000 	.word	0x1312d000

1a0005fc <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0005fe:	b099      	sub	sp, #100	; 0x64
1a000600:	4605      	mov	r5, r0
1a000602:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000604:	2260      	movs	r2, #96	; 0x60
1a000606:	2100      	movs	r1, #0
1a000608:	4668      	mov	r0, sp
1a00060a:	f001 ff3f 	bl	1a00248c <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a00060e:	2380      	movs	r3, #128	; 0x80
1a000610:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a000612:	6963      	ldr	r3, [r4, #20]
1a000614:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a000616:	7923      	ldrb	r3, [r4, #4]
1a000618:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a00061c:	4669      	mov	r1, sp
1a00061e:	4628      	mov	r0, r5
1a000620:	f7ff ff9c 	bl	1a00055c <pll_calc_divs>
   if (pll[0].fout == freq) {
1a000624:	9b06      	ldr	r3, [sp, #24]
1a000626:	429d      	cmp	r5, r3
1a000628:	d02f      	beq.n	1a00068a <pll_get_frac+0x8e>
   if (val < 0)
1a00062a:	1aeb      	subs	r3, r5, r3
1a00062c:	d436      	bmi.n	1a00069c <pll_get_frac+0xa0>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a00062e:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a000630:	2340      	movs	r3, #64	; 0x40
1a000632:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a000634:	6963      	ldr	r3, [r4, #20]
1a000636:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a000638:	7923      	ldrb	r3, [r4, #4]
1a00063a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a00063e:	a910      	add	r1, sp, #64	; 0x40
1a000640:	4628      	mov	r0, r5
1a000642:	f7ff ff8b 	bl	1a00055c <pll_calc_divs>
   if (pll[2].fout == freq) {
1a000646:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000648:	429d      	cmp	r5, r3
1a00064a:	d029      	beq.n	1a0006a0 <pll_get_frac+0xa4>
   if (val < 0)
1a00064c:	1aeb      	subs	r3, r5, r3
1a00064e:	d42f      	bmi.n	1a0006b0 <pll_get_frac+0xb4>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a000650:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a000652:	2340      	movs	r3, #64	; 0x40
1a000654:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a000656:	6963      	ldr	r3, [r4, #20]
1a000658:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a00065a:	7923      	ldrb	r3, [r4, #4]
1a00065c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a000660:	a908      	add	r1, sp, #32
1a000662:	4628      	mov	r0, r5
1a000664:	f7ff ff7a 	bl	1a00055c <pll_calc_divs>
   if (pll[1].fout == freq) {
1a000668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00066a:	429d      	cmp	r5, r3
1a00066c:	d022      	beq.n	1a0006b4 <pll_get_frac+0xb8>
   if (val < 0)
1a00066e:	1aed      	subs	r5, r5, r3
1a000670:	d428      	bmi.n	1a0006c4 <pll_get_frac+0xc8>
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a000672:	42ae      	cmp	r6, r5
1a000674:	dc30      	bgt.n	1a0006d8 <pll_get_frac+0xdc>
       if (diff[0] <= diff[2]) {
1a000676:	42be      	cmp	r6, r7
1a000678:	dc26      	bgt.n	1a0006c8 <pll_get_frac+0xcc>
           *ppll = pll[0];
1a00067a:	466d      	mov	r5, sp
1a00067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000680:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000688:	e006      	b.n	1a000698 <pll_get_frac+0x9c>
       *ppll = pll[0];
1a00068a:	466d      	mov	r5, sp
1a00068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000690:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a000698:	b019      	add	sp, #100	; 0x64
1a00069a:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a00069c:	425b      	negs	r3, r3
1a00069e:	e7c6      	b.n	1a00062e <pll_get_frac+0x32>
       *ppll = pll[2];
1a0006a0:	ad10      	add	r5, sp, #64	; 0x40
1a0006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0006ae:	e7f3      	b.n	1a000698 <pll_get_frac+0x9c>
       return -val;
1a0006b0:	425b      	negs	r3, r3
1a0006b2:	e7cd      	b.n	1a000650 <pll_get_frac+0x54>
       *ppll = pll[1];
1a0006b4:	ad08      	add	r5, sp, #32
1a0006b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0006c2:	e7e9      	b.n	1a000698 <pll_get_frac+0x9c>
       return -val;
1a0006c4:	426d      	negs	r5, r5
1a0006c6:	e7d4      	b.n	1a000672 <pll_get_frac+0x76>
           *ppll = pll[2];
1a0006c8:	ad10      	add	r5, sp, #64	; 0x40
1a0006ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0006d6:	e7df      	b.n	1a000698 <pll_get_frac+0x9c>
       if (diff[1] <= diff[2]) {
1a0006d8:	42af      	cmp	r7, r5
1a0006da:	db07      	blt.n	1a0006ec <pll_get_frac+0xf0>
           *ppll = pll[1];
1a0006dc:	ad08      	add	r5, sp, #32
1a0006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0006ea:	e7d5      	b.n	1a000698 <pll_get_frac+0x9c>
           *ppll = pll[2];
1a0006ec:	ad10      	add	r5, sp, #64	; 0x40
1a0006ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0006fa:	e7cd      	b.n	1a000698 <pll_get_frac+0x9c>

1a0006fc <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0006fc:	b430      	push	{r4, r5}
1a0006fe:	4605      	mov	r5, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a000700:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000702:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000704:	e000      	b.n	1a000708 <Chip_Clock_FindBaseClock+0xc>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a000706:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000708:	281c      	cmp	r0, #28
1a00070a:	d118      	bne.n	1a00073e <Chip_Clock_FindBaseClock+0x42>
1a00070c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000710:	0051      	lsls	r1, r2, #1
1a000712:	4a0c      	ldr	r2, [pc, #48]	; (1a000744 <Chip_Clock_FindBaseClock+0x48>)
1a000714:	440a      	add	r2, r1
1a000716:	7914      	ldrb	r4, [r2, #4]
1a000718:	42a0      	cmp	r0, r4
1a00071a:	d010      	beq.n	1a00073e <Chip_Clock_FindBaseClock+0x42>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00071c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000720:	004a      	lsls	r2, r1, #1
1a000722:	4908      	ldr	r1, [pc, #32]	; (1a000744 <Chip_Clock_FindBaseClock+0x48>)
1a000724:	5a8a      	ldrh	r2, [r1, r2]
1a000726:	42aa      	cmp	r2, r5
1a000728:	d8ed      	bhi.n	1a000706 <Chip_Clock_FindBaseClock+0xa>
1a00072a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00072e:	0051      	lsls	r1, r2, #1
1a000730:	4a04      	ldr	r2, [pc, #16]	; (1a000744 <Chip_Clock_FindBaseClock+0x48>)
1a000732:	440a      	add	r2, r1
1a000734:	8852      	ldrh	r2, [r2, #2]
1a000736:	4295      	cmp	r5, r2
1a000738:	d8e5      	bhi.n	1a000706 <Chip_Clock_FindBaseClock+0xa>
           baseclk = periph_to_base[i].clkbase;
1a00073a:	4620      	mov	r0, r4
1a00073c:	e7e4      	b.n	1a000708 <Chip_Clock_FindBaseClock+0xc>
       }
   }

   return baseclk;
}
1a00073e:	bc30      	pop	{r4, r5}
1a000740:	4770      	bx	lr
1a000742:	bf00      	nop
1a000744:	1a002568 	.word	0x1a002568

1a000748 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000748:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a00074a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00074e:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000750:	4a0d      	ldr	r2, [pc, #52]	; (1a000788 <Chip_Clock_EnableCrystal+0x40>)
1a000752:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a000754:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000758:	6992      	ldr	r2, [r2, #24]
1a00075a:	4291      	cmp	r1, r2
1a00075c:	d001      	beq.n	1a000762 <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00075e:	4a0a      	ldr	r2, [pc, #40]	; (1a000788 <Chip_Clock_EnableCrystal+0x40>)
1a000760:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a000762:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a000766:	4a09      	ldr	r2, [pc, #36]	; (1a00078c <Chip_Clock_EnableCrystal+0x44>)
1a000768:	6811      	ldr	r1, [r2, #0]
1a00076a:	4a09      	ldr	r2, [pc, #36]	; (1a000790 <Chip_Clock_EnableCrystal+0x48>)
1a00076c:	4291      	cmp	r1, r2
1a00076e:	d901      	bls.n	1a000774 <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a000770:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000774:	4a04      	ldr	r2, [pc, #16]	; (1a000788 <Chip_Clock_EnableCrystal+0x40>)
1a000776:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a000778:	9b01      	ldr	r3, [sp, #4]
1a00077a:	1e5a      	subs	r2, r3, #1
1a00077c:	9201      	str	r2, [sp, #4]
1a00077e:	2b00      	cmp	r3, #0
1a000780:	d1fa      	bne.n	1a000778 <Chip_Clock_EnableCrystal+0x30>
}
1a000782:	b002      	add	sp, #8
1a000784:	4770      	bx	lr
1a000786:	bf00      	nop
1a000788:	40050000 	.word	0x40050000
1a00078c:	1a002630 	.word	0x1a002630
1a000790:	01312cff 	.word	0x01312cff

1a000794 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000794:	3012      	adds	r0, #18
1a000796:	4b05      	ldr	r3, [pc, #20]	; (1a0007ac <Chip_Clock_GetDividerSource+0x18>)
1a000798:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a00079c:	f010 0f01 	tst.w	r0, #1
1a0007a0:	d001      	beq.n	1a0007a6 <Chip_Clock_GetDividerSource+0x12>
       return CLKINPUT_PD;
1a0007a2:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0007a4:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0007a6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0007aa:	4770      	bx	lr
1a0007ac:	40050000 	.word	0x40050000

1a0007b0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0007b0:	f100 0212 	add.w	r2, r0, #18
1a0007b4:	4b03      	ldr	r3, [pc, #12]	; (1a0007c4 <Chip_Clock_GetDividerDivisor+0x14>)
1a0007b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0007ba:	4b03      	ldr	r3, [pc, #12]	; (1a0007c8 <Chip_Clock_GetDividerDivisor+0x18>)
1a0007bc:	5c18      	ldrb	r0, [r3, r0]
}
1a0007be:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0007c2:	4770      	bx	lr
1a0007c4:	40050000 	.word	0x40050000
1a0007c8:	1a002560 	.word	0x1a002560

1a0007cc <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0007cc:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a0007ce:	2810      	cmp	r0, #16
1a0007d0:	d80a      	bhi.n	1a0007e8 <Chip_Clock_GetClockInputHz+0x1c>
1a0007d2:	e8df f000 	tbb	[pc, r0]
1a0007d6:	0b44      	.short	0x0b44
1a0007d8:	0921180d 	.word	0x0921180d
1a0007dc:	2d2a2724 	.word	0x2d2a2724
1a0007e0:	34300909 	.word	0x34300909
1a0007e4:	3c38      	.short	0x3c38
1a0007e6:	40          	.byte	0x40
1a0007e7:	00          	.byte	0x00
   uint32_t rate = 0;
1a0007e8:	2000      	movs	r0, #0
1a0007ea:	bd08      	pop	{r3, pc}
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a0007ec:	481e      	ldr	r0, [pc, #120]	; (1a000868 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a0007ee:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0007f0:	4b1e      	ldr	r3, [pc, #120]	; (1a00086c <Chip_Clock_GetClockInputHz+0xa0>)
1a0007f2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0007f6:	f003 0307 	and.w	r3, r3, #7
1a0007fa:	2b04      	cmp	r3, #4
1a0007fc:	d001      	beq.n	1a000802 <Chip_Clock_GetClockInputHz+0x36>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a0007fe:	481c      	ldr	r0, [pc, #112]	; (1a000870 <Chip_Clock_GetClockInputHz+0xa4>)
1a000800:	bd08      	pop	{r3, pc}
   uint32_t rate = 0;
1a000802:	2000      	movs	r0, #0
1a000804:	bd08      	pop	{r3, pc}
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000806:	4b19      	ldr	r3, [pc, #100]	; (1a00086c <Chip_Clock_GetClockInputHz+0xa0>)
1a000808:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00080c:	f003 0307 	and.w	r3, r3, #7
1a000810:	2b04      	cmp	r3, #4
1a000812:	d027      	beq.n	1a000864 <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a000814:	4816      	ldr	r0, [pc, #88]	; (1a000870 <Chip_Clock_GetClockInputHz+0xa4>)
1a000816:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a000818:	4b16      	ldr	r3, [pc, #88]	; (1a000874 <Chip_Clock_GetClockInputHz+0xa8>)
1a00081a:	6818      	ldr	r0, [r3, #0]
       break;
1a00081c:	bd08      	pop	{r3, pc}

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a00081e:	4b16      	ldr	r3, [pc, #88]	; (1a000878 <Chip_Clock_GetClockInputHz+0xac>)
1a000820:	6818      	ldr	r0, [r3, #0]
       break;
1a000822:	bd08      	pop	{r3, pc}

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000824:	4b15      	ldr	r3, [pc, #84]	; (1a00087c <Chip_Clock_GetClockInputHz+0xb0>)
1a000826:	6818      	ldr	r0, [r3, #0]
       break;
1a000828:	bd08      	pop	{r3, pc}

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00082a:	4b14      	ldr	r3, [pc, #80]	; (1a00087c <Chip_Clock_GetClockInputHz+0xb0>)
1a00082c:	6858      	ldr	r0, [r3, #4]
       break;
1a00082e:	bd08      	pop	{r3, pc}

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a000830:	f000 f868 	bl	1a000904 <Chip_Clock_GetMainPLLHz>
       break;
1a000834:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000836:	2100      	movs	r1, #0
1a000838:	f000 f89a 	bl	1a000970 <Chip_Clock_GetDivRate>
       break;
1a00083c:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00083e:	2101      	movs	r1, #1
1a000840:	f000 f896 	bl	1a000970 <Chip_Clock_GetDivRate>
       break;
1a000844:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000846:	2102      	movs	r1, #2
1a000848:	f000 f892 	bl	1a000970 <Chip_Clock_GetDivRate>
       break;
1a00084c:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00084e:	2103      	movs	r1, #3
1a000850:	f000 f88e 	bl	1a000970 <Chip_Clock_GetDivRate>
       break;
1a000854:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000856:	2104      	movs	r1, #4
1a000858:	f000 f88a 	bl	1a000970 <Chip_Clock_GetDivRate>
       break;
1a00085c:	bd08      	pop	{r3, pc}
       rate = CRYSTAL_32K_FREQ_IN;
1a00085e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000862:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
1a000864:	4806      	ldr	r0, [pc, #24]	; (1a000880 <Chip_Clock_GetClockInputHz+0xb4>)
   default:
       break;
   }

   return rate;
}
1a000866:	bd08      	pop	{r3, pc}
1a000868:	00b71b00 	.word	0x00b71b00
1a00086c:	40043000 	.word	0x40043000
1a000870:	017d7840 	.word	0x017d7840
1a000874:	1a00262c 	.word	0x1a00262c
1a000878:	1a002630 	.word	0x1a002630
1a00087c:	10000090 	.word	0x10000090
1a000880:	02faf080 	.word	0x02faf080

1a000884 <Chip_Clock_CalcMainPLLValue>:
{
1a000884:	b538      	push	{r3, r4, r5, lr}
1a000886:	4605      	mov	r5, r0
1a000888:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00088a:	7908      	ldrb	r0, [r1, #4]
1a00088c:	f7ff ff9e 	bl	1a0007cc <Chip_Clock_GetClockInputHz>
1a000890:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000892:	4b19      	ldr	r3, [pc, #100]	; (1a0008f8 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000894:	442b      	add	r3, r5
1a000896:	4a19      	ldr	r2, [pc, #100]	; (1a0008fc <Chip_Clock_CalcMainPLLValue+0x78>)
1a000898:	4293      	cmp	r3, r2
1a00089a:	d821      	bhi.n	1a0008e0 <Chip_Clock_CalcMainPLLValue+0x5c>
1a00089c:	b318      	cbz	r0, 1a0008e6 <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00089e:	2380      	movs	r3, #128	; 0x80
1a0008a0:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a0008a2:	2300      	movs	r3, #0
1a0008a4:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a0008a6:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a0008a8:	fbb5 f3f0 	udiv	r3, r5, r0
1a0008ac:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0008ae:	4a14      	ldr	r2, [pc, #80]	; (1a000900 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0008b0:	4295      	cmp	r5, r2
1a0008b2:	d903      	bls.n	1a0008bc <Chip_Clock_CalcMainPLLValue+0x38>
1a0008b4:	fb03 f000 	mul.w	r0, r3, r0
1a0008b8:	4285      	cmp	r5, r0
1a0008ba:	d007      	beq.n	1a0008cc <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a0008bc:	4621      	mov	r1, r4
1a0008be:	4628      	mov	r0, r5
1a0008c0:	f7ff fe9c 	bl	1a0005fc <pll_get_frac>
       if (!ppll->nsel) {
1a0008c4:	68a3      	ldr	r3, [r4, #8]
1a0008c6:	b18b      	cbz	r3, 1a0008ec <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a0008c8:	3b01      	subs	r3, #1
1a0008ca:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a0008cc:	6923      	ldr	r3, [r4, #16]
1a0008ce:	b183      	cbz	r3, 1a0008f2 <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a0008d0:	68e2      	ldr	r2, [r4, #12]
1a0008d2:	b10a      	cbz	r2, 1a0008d8 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a0008d4:	3a01      	subs	r2, #1
1a0008d6:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a0008d8:	3b01      	subs	r3, #1
1a0008da:	6123      	str	r3, [r4, #16]
   return 0;
1a0008dc:	2000      	movs	r0, #0
1a0008de:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a0008e0:	f04f 30ff 	mov.w	r0, #4294967295
1a0008e4:	bd38      	pop	{r3, r4, r5, pc}
1a0008e6:	f04f 30ff 	mov.w	r0, #4294967295
1a0008ea:	bd38      	pop	{r3, r4, r5, pc}
           return -1;
1a0008ec:	f04f 30ff 	mov.w	r0, #4294967295
1a0008f0:	bd38      	pop	{r3, r4, r5, pc}
       return - 1;
1a0008f2:	f04f 30ff 	mov.w	r0, #4294967295
}
1a0008f6:	bd38      	pop	{r3, r4, r5, pc}
1a0008f8:	ff6b3a10 	.word	0xff6b3a10
1a0008fc:	0b940510 	.word	0x0b940510
1a000900:	094c5eff 	.word	0x094c5eff

1a000904 <Chip_Clock_GetMainPLLHz>:
{
1a000904:	b530      	push	{r4, r5, lr}
1a000906:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000908:	4d17      	ldr	r5, [pc, #92]	; (1a000968 <Chip_Clock_GetMainPLLHz+0x64>)
1a00090a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00090c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000910:	f7ff ff5c 	bl	1a0007cc <Chip_Clock_GetClockInputHz>
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000914:	4b15      	ldr	r3, [pc, #84]	; (1a00096c <Chip_Clock_GetMainPLLHz+0x68>)
1a000916:	681b      	ldr	r3, [r3, #0]
1a000918:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00091a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00091c:	f013 0f01 	tst.w	r3, #1
1a000920:	d01f      	beq.n	1a000962 <Chip_Clock_GetMainPLLHz+0x5e>
   msel = (PLLReg >> 16) & 0xFF;
1a000922:	f3c4 4207 	ubfx	r2, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a000926:	f3c4 3301 	ubfx	r3, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a00092a:	f3c4 2101 	ubfx	r1, r4, #8, #2
   fbsel = (PLLReg >> 6) & 0x1;
1a00092e:	f3c4 1580 	ubfx	r5, r4, #6, #1
   m = msel + 1;
1a000932:	3201      	adds	r2, #1
   n = nsel + 1;
1a000934:	3301      	adds	r3, #1
   p = ptab[psel];
1a000936:	f10d 0e08 	add.w	lr, sp, #8
1a00093a:	4471      	add	r1, lr
1a00093c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   if (direct || fbsel) {
1a000940:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000944:	d108      	bne.n	1a000958 <Chip_Clock_GetMainPLLHz+0x54>
1a000946:	b93d      	cbnz	r5, 1a000958 <Chip_Clock_GetMainPLLHz+0x54>
   return (m / (2 * p)) * (freq / n);
1a000948:	0049      	lsls	r1, r1, #1
1a00094a:	fbb2 f2f1 	udiv	r2, r2, r1
1a00094e:	fbb0 f0f3 	udiv	r0, r0, r3
1a000952:	fb00 f002 	mul.w	r0, r0, r2
1a000956:	e005      	b.n	1a000964 <Chip_Clock_GetMainPLLHz+0x60>
       return m * (freq / n);
1a000958:	fbb0 f0f3 	udiv	r0, r0, r3
1a00095c:	fb00 f002 	mul.w	r0, r0, r2
1a000960:	e000      	b.n	1a000964 <Chip_Clock_GetMainPLLHz+0x60>
       return 0;
1a000962:	2000      	movs	r0, #0
}
1a000964:	b003      	add	sp, #12
1a000966:	bd30      	pop	{r4, r5, pc}
1a000968:	40050000 	.word	0x40050000
1a00096c:	1a00255c 	.word	0x1a00255c

1a000970 <Chip_Clock_GetDivRate>:
{
1a000970:	b538      	push	{r3, r4, r5, lr}
1a000972:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a000974:	4608      	mov	r0, r1
1a000976:	f7ff ff0d 	bl	1a000794 <Chip_Clock_GetDividerSource>
1a00097a:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a00097c:	4620      	mov	r0, r4
1a00097e:	f7ff ff17 	bl	1a0007b0 <Chip_Clock_GetDividerDivisor>
1a000982:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000984:	4628      	mov	r0, r5
1a000986:	f7ff ff21 	bl	1a0007cc <Chip_Clock_GetClockInputHz>
1a00098a:	3401      	adds	r4, #1
}
1a00098c:	fbb0 f0f4 	udiv	r0, r0, r4
1a000990:	bd38      	pop	{r3, r4, r5, pc}
1a000992:	Address 0x1a000992 is out of bounds.


1a000994 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000994:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000996:	f100 0416 	add.w	r4, r0, #22
1a00099a:	00a4      	lsls	r4, r4, #2
1a00099c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0009a0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0009a4:	6865      	ldr	r5, [r4, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a0009a6:	281b      	cmp	r0, #27
1a0009a8:	d813      	bhi.n	1a0009d2 <Chip_Clock_SetBaseClock+0x3e>
       if (Input != CLKINPUT_PD) {
1a0009aa:	2911      	cmp	r1, #17
1a0009ac:	d01a      	beq.n	1a0009e4 <Chip_Clock_SetBaseClock+0x50>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0009ae:	4c0e      	ldr	r4, [pc, #56]	; (1a0009e8 <Chip_Clock_SetBaseClock+0x54>)
1a0009b0:	402c      	ands	r4, r5

           if (autoblocken) {
1a0009b2:	b10a      	cbz	r2, 1a0009b8 <Chip_Clock_SetBaseClock+0x24>
               reg |= (1 << 11);
1a0009b4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
           }
           if (powerdn) {
1a0009b8:	b10b      	cbz	r3, 1a0009be <Chip_Clock_SetBaseClock+0x2a>
               reg |= (1 << 0);
1a0009ba:	f044 0401 	orr.w	r4, r4, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a0009be:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0009c2:	3016      	adds	r0, #22
1a0009c4:	0080      	lsls	r0, r0, #2
1a0009c6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0009ca:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0009ce:	6044      	str	r4, [r0, #4]
1a0009d0:	e008      	b.n	1a0009e4 <Chip_Clock_SetBaseClock+0x50>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a0009d2:	f045 0501 	orr.w	r5, r5, #1
1a0009d6:	3016      	adds	r0, #22
1a0009d8:	0080      	lsls	r0, r0, #2
1a0009da:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0009de:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0009e2:	6045      	str	r5, [r0, #4]
   }
}
1a0009e4:	bc30      	pop	{r4, r5}
1a0009e6:	4770      	bx	lr
1a0009e8:	e0fff7fe 	.word	0xe0fff7fe

1a0009ec <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a0009ec:	281b      	cmp	r0, #27
1a0009ee:	d901      	bls.n	1a0009f4 <Chip_Clock_GetBaseClock+0x8>
       return CLKINPUT_PD;
1a0009f0:	2011      	movs	r0, #17
1a0009f2:	4770      	bx	lr
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a0009f4:	3016      	adds	r0, #22
1a0009f6:	0080      	lsls	r0, r0, #2
1a0009f8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0009fc:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000a00:	6840      	ldr	r0, [r0, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a000a02:	f010 0f01 	tst.w	r0, #1
1a000a06:	d001      	beq.n	1a000a0c <Chip_Clock_GetBaseClock+0x20>
       return CLKINPUT_PD;
1a000a08:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000a0a:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000a0c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000a10:	4770      	bx	lr

1a000a12 <Chip_Clock_GetBaseClocktHz>:
{
1a000a12:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000a14:	f7ff ffea 	bl	1a0009ec <Chip_Clock_GetBaseClock>
1a000a18:	f7ff fed8 	bl	1a0007cc <Chip_Clock_GetClockInputHz>
}
1a000a1c:	bd08      	pop	{r3, pc}
1a000a1e:	Address 0x1a000a1e is out of bounds.


1a000a20 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a000a20:	b969      	cbnz	r1, 1a000a3e <Chip_Clock_EnableOpts+0x1e>
   uint32_t reg = 1;
1a000a22:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a000a24:	b10a      	cbz	r2, 1a000a2a <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a000a26:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a000a2a:	2b02      	cmp	r3, #2
1a000a2c:	d009      	beq.n	1a000a42 <Chip_Clock_EnableOpts+0x22>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a000a2e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000a32:	d209      	bcs.n	1a000a48 <Chip_Clock_EnableOpts+0x28>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000a34:	3020      	adds	r0, #32
1a000a36:	4b07      	ldr	r3, [pc, #28]	; (1a000a54 <Chip_Clock_EnableOpts+0x34>)
1a000a38:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000a3c:	4770      	bx	lr
       reg |= (1 << 1);
1a000a3e:	2103      	movs	r1, #3
1a000a40:	e7f0      	b.n	1a000a24 <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a000a42:	f041 0120 	orr.w	r1, r1, #32
1a000a46:	e7f2      	b.n	1a000a2e <Chip_Clock_EnableOpts+0xe>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000a48:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000a4c:	4b02      	ldr	r3, [pc, #8]	; (1a000a58 <Chip_Clock_EnableOpts+0x38>)
1a000a4e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000a52:	4770      	bx	lr
1a000a54:	40051000 	.word	0x40051000
1a000a58:	40052000 	.word	0x40052000

1a000a5c <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000a5c:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a000a5e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000a62:	d309      	bcc.n	1a000a78 <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000a64:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000a68:	4a0d      	ldr	r2, [pc, #52]	; (1a000aa0 <Chip_Clock_GetRate+0x44>)
1a000a6a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a000a6e:	f014 0f01 	tst.w	r4, #1
1a000a72:	d107      	bne.n	1a000a84 <Chip_Clock_GetRate+0x28>

       }
       rate = rate / div;
   }
   else {
       rate = 0;
1a000a74:	2000      	movs	r0, #0
   }

   return rate;
}
1a000a76:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000a78:	f100 0320 	add.w	r3, r0, #32
1a000a7c:	4a09      	ldr	r2, [pc, #36]	; (1a000aa4 <Chip_Clock_GetRate+0x48>)
1a000a7e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000a82:	e7f4      	b.n	1a000a6e <Chip_Clock_GetRate+0x12>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a000a84:	f7ff fe3a 	bl	1a0006fc <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000a88:	f7ff ffc3 	bl	1a000a12 <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a000a8c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000a90:	d103      	bne.n	1a000a9a <Chip_Clock_GetRate+0x3e>
           div = 1;
1a000a92:	2301      	movs	r3, #1
       rate = rate / div;
1a000a94:	fbb0 f0f3 	udiv	r0, r0, r3
1a000a98:	bd10      	pop	{r4, pc}
           div = 2;/* No other dividers supported */
1a000a9a:	2302      	movs	r3, #2
1a000a9c:	e7fa      	b.n	1a000a94 <Chip_Clock_GetRate+0x38>
1a000a9e:	bf00      	nop
1a000aa0:	40052000 	.word	0x40052000
1a000aa4:	40051000 	.word	0x40051000

1a000aa8 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000aa8:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a000aaa:	4b0f      	ldr	r3, [pc, #60]	; (1a000ae8 <fpuInit+0x40>)
1a000aac:	681b      	ldr	r3, [r3, #0]
1a000aae:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a000ab0:	4b0e      	ldr	r3, [pc, #56]	; (1a000aec <fpuInit+0x44>)
1a000ab2:	681b      	ldr	r3, [r3, #0]
1a000ab4:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000ab6:	9a02      	ldr	r2, [sp, #8]
1a000ab8:	4b0d      	ldr	r3, [pc, #52]	; (1a000af0 <fpuInit+0x48>)
1a000aba:	429a      	cmp	r2, r3
1a000abc:	d00c      	beq.n	1a000ad8 <fpuInit+0x30>
1a000abe:	2300      	movs	r3, #0

   if (vfpPresent) {
1a000ac0:	b143      	cbz	r3, 1a000ad4 <fpuInit+0x2c>
       Cpacr = *regCpacr;
1a000ac2:	4a0c      	ldr	r2, [pc, #48]	; (1a000af4 <fpuInit+0x4c>)
1a000ac4:	6813      	ldr	r3, [r2, #0]
1a000ac6:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a000ac8:	9b03      	ldr	r3, [sp, #12]
1a000aca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000ace:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000ad0:	9b03      	ldr	r3, [sp, #12]
1a000ad2:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a000ad4:	b004      	add	sp, #16
1a000ad6:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000ad8:	9a01      	ldr	r2, [sp, #4]
1a000ada:	4b07      	ldr	r3, [pc, #28]	; (1a000af8 <fpuInit+0x50>)
1a000adc:	429a      	cmp	r2, r3
1a000ade:	d001      	beq.n	1a000ae4 <fpuInit+0x3c>
1a000ae0:	2300      	movs	r3, #0
1a000ae2:	e7ed      	b.n	1a000ac0 <fpuInit+0x18>
1a000ae4:	2301      	movs	r3, #1
1a000ae6:	e7eb      	b.n	1a000ac0 <fpuInit+0x18>
1a000ae8:	e000ef40 	.word	0xe000ef40
1a000aec:	e000ef44 	.word	0xe000ef44
1a000af0:	10110021 	.word	0x10110021
1a000af4:	e000ed88 	.word	0xe000ed88
1a000af8:	11000011 	.word	0x11000011

1a000afc <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a000afc:	4770      	bx	lr

1a000afe <Chip_GPIO_SetDir>:
}

/* Set Direction for a GPIO port */
void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
   if (out) {
1a000afe:	b943      	cbnz	r3, 1a000b12 <Chip_GPIO_SetDir+0x14>
       pGPIO->DIR[portNum] |= bitValue;
   }
   else {
       pGPIO->DIR[portNum] &= ~bitValue;
1a000b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000b04:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000b08:	ea23 0202 	bic.w	r2, r3, r2
1a000b0c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000b10:	4770      	bx	lr
       pGPIO->DIR[portNum] |= bitValue;
1a000b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000b16:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000b1a:	431a      	orrs	r2, r3
1a000b1c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000b20:	4770      	bx	lr
1a000b22:	Address 0x1a000b22 is out of bounds.


1a000b24 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000b24:	b570      	push	{r4, r5, r6, lr}
1a000b26:	b092      	sub	sp, #72	; 0x48
1a000b28:	4605      	mov	r5, r0
1a000b2a:	460e      	mov	r6, r1
1a000b2c:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a000b2e:	f241 537c 	movw	r3, #5500	; 0x157c
1a000b32:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000b34:	2806      	cmp	r0, #6
1a000b36:	d044      	beq.n	1a000bc2 <Chip_SetupCoreClock+0x9e>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000b38:	2300      	movs	r3, #0
1a000b3a:	2201      	movs	r2, #1
1a000b3c:	4629      	mov	r1, r5
1a000b3e:	2004      	movs	r0, #4
1a000b40:	f7ff ff28 	bl	1a000994 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a000b44:	4a4a      	ldr	r2, [pc, #296]	; (1a000c70 <Chip_SetupCoreClock+0x14c>)
1a000b46:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000b48:	f043 0301 	orr.w	r3, r3, #1
1a000b4c:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a000b4e:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000b52:	a909      	add	r1, sp, #36	; 0x24
1a000b54:	4630      	mov	r0, r6
1a000b56:	f7ff fe95 	bl	1a000884 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a000b5a:	4b46      	ldr	r3, [pc, #280]	; (1a000c74 <Chip_SetupCoreClock+0x150>)
1a000b5c:	429e      	cmp	r6, r3
1a000b5e:	d938      	bls.n	1a000bd2 <Chip_SetupCoreClock+0xae>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000b62:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000b66:	d001      	beq.n	1a000b6c <Chip_SetupCoreClock+0x48>
1a000b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000b6a:	b36a      	cbz	r2, 1a000bc8 <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a000b6c:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a000b70:	a901      	add	r1, sp, #4
1a000b72:	4840      	ldr	r0, [pc, #256]	; (1a000c74 <Chip_SetupCoreClock+0x150>)
1a000b74:	f7ff fe86 	bl	1a000884 <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000b78:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000b7c:	9b01      	ldr	r3, [sp, #4]
1a000b7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000b82:	9a05      	ldr	r2, [sp, #20]
1a000b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000b88:	9a03      	ldr	r2, [sp, #12]
1a000b8a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000b8e:	9a04      	ldr	r2, [sp, #16]
1a000b90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b94:	4a36      	ldr	r2, [pc, #216]	; (1a000c70 <Chip_SetupCoreClock+0x14c>)
1a000b96:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000b98:	4b35      	ldr	r3, [pc, #212]	; (1a000c70 <Chip_SetupCoreClock+0x14c>)
1a000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a000b9c:	f013 0f01 	tst.w	r3, #1
1a000ba0:	d0fa      	beq.n	1a000b98 <Chip_SetupCoreClock+0x74>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000ba2:	2300      	movs	r3, #0
1a000ba4:	2201      	movs	r2, #1
1a000ba6:	2109      	movs	r1, #9
1a000ba8:	2004      	movs	r0, #4
1a000baa:	f7ff fef3 	bl	1a000994 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a000bae:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000bb0:	1e5a      	subs	r2, r3, #1
1a000bb2:	9211      	str	r2, [sp, #68]	; 0x44
1a000bb4:	2b00      	cmp	r3, #0
1a000bb6:	d1fa      	bne.n	1a000bae <Chip_SetupCoreClock+0x8a>
           delay = 5500;
1a000bb8:	f241 537c 	movw	r3, #5500	; 0x157c
1a000bbc:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
1a000bbe:	2500      	movs	r5, #0
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000bc0:	e008      	b.n	1a000bd4 <Chip_SetupCoreClock+0xb0>
       Chip_Clock_EnableCrystal();
1a000bc2:	f7ff fdc1 	bl	1a000748 <Chip_Clock_EnableCrystal>
1a000bc6:	e7b7      	b.n	1a000b38 <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a000bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000bcc:	9309      	str	r3, [sp, #36]	; 0x24
           direct = 1;
1a000bce:	2501      	movs	r5, #1
1a000bd0:	e000      	b.n	1a000bd4 <Chip_SetupCoreClock+0xb0>
   uint32_t direct = 0;
1a000bd2:	2500      	movs	r5, #0
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000bd4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000bda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000bde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000be6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000bec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000bf0:	4a1f      	ldr	r2, [pc, #124]	; (1a000c70 <Chip_SetupCoreClock+0x14c>)
1a000bf2:	6453      	str	r3, [r2, #68]	; 0x44
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000bf4:	4b1e      	ldr	r3, [pc, #120]	; (1a000c70 <Chip_SetupCoreClock+0x14c>)
1a000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000bf8:	f013 0f01 	tst.w	r3, #1
1a000bfc:	d0fa      	beq.n	1a000bf4 <Chip_SetupCoreClock+0xd0>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000bfe:	2300      	movs	r3, #0
1a000c00:	2201      	movs	r2, #1
1a000c02:	2109      	movs	r1, #9
1a000c04:	2004      	movs	r0, #4
1a000c06:	f7ff fec5 	bl	1a000994 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a000c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000c0c:	1e5a      	subs	r2, r3, #1
1a000c0e:	9211      	str	r2, [sp, #68]	; 0x44
1a000c10:	2b00      	cmp	r3, #0
1a000c12:	d1fa      	bne.n	1a000c0a <Chip_SetupCoreClock+0xe6>
   if (direct) {
1a000c14:	b1d5      	cbz	r5, 1a000c4c <Chip_SetupCoreClock+0x128>
       delay = 5500;
1a000c16:	f241 537c 	movw	r3, #5500	; 0x157c
1a000c1a:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a000c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000c22:	9309      	str	r3, [sp, #36]	; 0x24
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000c24:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000c28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000c32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000c34:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000c38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000c3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000c3e:	4a0c      	ldr	r2, [pc, #48]	; (1a000c70 <Chip_SetupCoreClock+0x14c>)
1a000c40:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a000c42:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000c44:	1e5a      	subs	r2, r3, #1
1a000c46:	9211      	str	r2, [sp, #68]	; 0x44
1a000c48:	2b00      	cmp	r3, #0
1a000c4a:	d1fa      	bne.n	1a000c42 <Chip_SetupCoreClock+0x11e>
   }

   if (setbase) {
1a000c4c:	b174      	cbz	r4, 1a000c6c <Chip_SetupCoreClock+0x148>
1a000c4e:	2400      	movs	r4, #0
1a000c50:	e00a      	b.n	1a000c68 <Chip_SetupCoreClock+0x144>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000c52:	4809      	ldr	r0, [pc, #36]	; (1a000c78 <Chip_SetupCoreClock+0x154>)
1a000c54:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000c58:	78cb      	ldrb	r3, [r1, #3]
1a000c5a:	788a      	ldrb	r2, [r1, #2]
1a000c5c:	7849      	ldrb	r1, [r1, #1]
1a000c5e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000c62:	f7ff fe97 	bl	1a000994 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000c66:	3401      	adds	r4, #1
1a000c68:	2c11      	cmp	r4, #17
1a000c6a:	d9f2      	bls.n	1a000c52 <Chip_SetupCoreClock+0x12e>
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a000c6c:	b012      	add	sp, #72	; 0x48
1a000c6e:	bd70      	pop	{r4, r5, r6, pc}
1a000c70:	40050000 	.word	0x40050000
1a000c74:	068e7780 	.word	0x068e7780
1a000c78:	1a0025d4 	.word	0x1a0025d4

1a000c7c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a000c7c:	4b09      	ldr	r3, [pc, #36]	; (1a000ca4 <Chip_UART_GetIndex+0x28>)
1a000c7e:	4298      	cmp	r0, r3
1a000c80:	d009      	beq.n	1a000c96 <Chip_UART_GetIndex+0x1a>
1a000c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000c86:	4298      	cmp	r0, r3
1a000c88:	d007      	beq.n	1a000c9a <Chip_UART_GetIndex+0x1e>
1a000c8a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000c8e:	4298      	cmp	r0, r3
1a000c90:	d005      	beq.n	1a000c9e <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a000c92:	2000      	movs	r0, #0
1a000c94:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a000c96:	2002      	movs	r0, #2
1a000c98:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a000c9a:	2003      	movs	r0, #3
1a000c9c:	4770      	bx	lr
           return 1;
1a000c9e:	2001      	movs	r0, #1
       default:
           return 0; /* Should never come here */
   }
}
1a000ca0:	4770      	bx	lr
1a000ca2:	bf00      	nop
1a000ca4:	400c1000 	.word	0x400c1000

1a000ca8 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000ca8:	b530      	push	{r4, r5, lr}
1a000caa:	b083      	sub	sp, #12
1a000cac:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000cae:	f7ff ffe5 	bl	1a000c7c <Chip_UART_GetIndex>
1a000cb2:	2301      	movs	r3, #1
1a000cb4:	461a      	mov	r2, r3
1a000cb6:	4619      	mov	r1, r3
1a000cb8:	4d0e      	ldr	r5, [pc, #56]	; (1a000cf4 <Chip_UART_Init+0x4c>)
1a000cba:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000cbe:	f7ff feaf 	bl	1a000a20 <Chip_Clock_EnableOpts>
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
   pUART->FCR = fcr;
1a000cc2:	2307      	movs	r3, #7
1a000cc4:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000cc6:	2300      	movs	r3, #0
1a000cc8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a000cca:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a000ccc:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a000cce:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a000cd0:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a000cd2:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a000cd4:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000cd6:	4b08      	ldr	r3, [pc, #32]	; (1a000cf8 <Chip_UART_Init+0x50>)
1a000cd8:	429c      	cmp	r4, r3
1a000cda:	d005      	beq.n	1a000ce8 <Chip_UART_Init+0x40>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a000cdc:	2303      	movs	r3, #3
1a000cde:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a000ce0:	2310      	movs	r3, #16
1a000ce2:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a000ce4:	b003      	add	sp, #12
1a000ce6:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a000ce8:	2300      	movs	r3, #0
1a000cea:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a000cec:	69a3      	ldr	r3, [r4, #24]
1a000cee:	9301      	str	r3, [sp, #4]
1a000cf0:	e7f4      	b.n	1a000cdc <Chip_UART_Init+0x34>
1a000cf2:	bf00      	nop
1a000cf4:	1a002624 	.word	0x1a002624
1a000cf8:	40082000 	.word	0x40082000

1a000cfc <Chip_UART_SetBaud>:
   return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000cfc:	b538      	push	{r3, r4, r5, lr}
1a000cfe:	4605      	mov	r5, r0
1a000d00:	460c      	mov	r4, r1
   uint32_t div, divh, divl, clkin;

   /* Determine UART clock in rate without FDR */
   clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000d02:	f7ff ffbb 	bl	1a000c7c <Chip_UART_GetIndex>
1a000d06:	4b0c      	ldr	r3, [pc, #48]	; (1a000d38 <Chip_UART_SetBaud+0x3c>)
1a000d08:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000d0c:	f7ff fea6 	bl	1a000a5c <Chip_Clock_GetRate>
   div = clkin / (baudrate * 16);
1a000d10:	0123      	lsls	r3, r4, #4
1a000d12:	fbb0 f3f3 	udiv	r3, r0, r3
1a000d16:	b2d9      	uxtb	r1, r3
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a000d18:	68ea      	ldr	r2, [r5, #12]
1a000d1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000d1e:	60ea      	str	r2, [r5, #12]
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a000d20:	6029      	str	r1, [r5, #0]
1a000d22:	f3c3 2207 	ubfx	r2, r3, #8, #8
   pUART->DLM = (uint32_t) dlm;
1a000d26:	606a      	str	r2, [r5, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000d28:	68ea      	ldr	r2, [r5, #12]
1a000d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000d2e:	60ea      	str	r2, [r5, #12]
   Chip_UART_DisableDivisorAccess(pUART);

   /* Fractional FDR alreadt setup for 1 in UART init */

   return clkin / div;
}
1a000d30:	fbb0 f0f3 	udiv	r0, r0, r3
1a000d34:	bd38      	pop	{r3, r4, r5, pc}
1a000d36:	bf00      	nop
1a000d38:	1a00261c 	.word	0x1a00261c

1a000d3c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000d40:	b083      	sub	sp, #12
1a000d42:	4683      	mov	fp, r0
1a000d44:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000d46:	f7ff ff99 	bl	1a000c7c <Chip_UART_GetIndex>
1a000d4a:	4b35      	ldr	r3, [pc, #212]	; (1a000e20 <Chip_UART_SetBaudFDR+0xe4>)
1a000d4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000d50:	f7ff fe84 	bl	1a000a5c <Chip_Clock_GetRate>
1a000d54:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a000d56:	f04f 37ff 	mov.w	r7, #4294967295

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a000d5a:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a000d5c:	2300      	movs	r3, #0
1a000d5e:	9301      	str	r3, [sp, #4]
1a000d60:	46a2      	mov	sl, r4
1a000d62:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a000d64:	e02a      	b.n	1a000dbc <Chip_UART_SetBaudFDR+0x80>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a000d66:	4243      	negs	r3, r0
               div ++;
1a000d68:	1c4a      	adds	r2, r1, #1
1a000d6a:	e017      	b.n	1a000d9c <Chip_UART_SetBaudFDR+0x60>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a000d6c:	b30b      	cbz	r3, 1a000db2 <Chip_UART_SetBaudFDR+0x76>
           odiff = diff;
1a000d6e:	461f      	mov	r7, r3
           sd = d;
1a000d70:	9501      	str	r5, [sp, #4]
           sm = m;
1a000d72:	46a2      	mov	sl, r4
           sdiv = div;
1a000d74:	4691      	mov	r9, r2
       for (d = 0; d < m; d++) {
1a000d76:	3501      	adds	r5, #1
1a000d78:	42ac      	cmp	r4, r5
1a000d7a:	d91e      	bls.n	1a000dba <Chip_UART_SetBaudFDR+0x7e>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000d7c:	0933      	lsrs	r3, r6, #4
1a000d7e:	0730      	lsls	r0, r6, #28
1a000d80:	fba4 0100 	umull	r0, r1, r4, r0
1a000d84:	fb04 1103 	mla	r1, r4, r3, r1
1a000d88:	1962      	adds	r2, r4, r5
1a000d8a:	fb08 f202 	mul.w	r2, r8, r2
1a000d8e:	2300      	movs	r3, #0
1a000d90:	f001 f9f4 	bl	1a00217c <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a000d94:	4603      	mov	r3, r0
           div = (uint32_t) (dval >> 32);
1a000d96:	460a      	mov	r2, r1
           if ((int)diff < 0) {
1a000d98:	2800      	cmp	r0, #0
1a000d9a:	dbe4      	blt.n	1a000d66 <Chip_UART_SetBaudFDR+0x2a>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000d9c:	429f      	cmp	r7, r3
1a000d9e:	d3ea      	bcc.n	1a000d76 <Chip_UART_SetBaudFDR+0x3a>
1a000da0:	2a00      	cmp	r2, #0
1a000da2:	d0e8      	beq.n	1a000d76 <Chip_UART_SetBaudFDR+0x3a>
1a000da4:	0c11      	lsrs	r1, r2, #16
1a000da6:	d1e6      	bne.n	1a000d76 <Chip_UART_SetBaudFDR+0x3a>
1a000da8:	2a02      	cmp	r2, #2
1a000daa:	d8df      	bhi.n	1a000d6c <Chip_UART_SetBaudFDR+0x30>
1a000dac:	2d00      	cmp	r5, #0
1a000dae:	d1e2      	bne.n	1a000d76 <Chip_UART_SetBaudFDR+0x3a>
1a000db0:	e7dc      	b.n	1a000d6c <Chip_UART_SetBaudFDR+0x30>
           odiff = diff;
1a000db2:	461f      	mov	r7, r3
           sd = d;
1a000db4:	9501      	str	r5, [sp, #4]
           sm = m;
1a000db6:	46a2      	mov	sl, r4
           sdiv = div;
1a000db8:	4691      	mov	r9, r2
   for (m = 1; odiff && m < 16; m++) {
1a000dba:	3401      	adds	r4, #1
1a000dbc:	b11f      	cbz	r7, 1a000dc6 <Chip_UART_SetBaudFDR+0x8a>
1a000dbe:	2c0f      	cmp	r4, #15
1a000dc0:	d801      	bhi.n	1a000dc6 <Chip_UART_SetBaudFDR+0x8a>
1a000dc2:	2500      	movs	r5, #0
1a000dc4:	e7d8      	b.n	1a000d78 <Chip_UART_SetBaudFDR+0x3c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000dc6:	f1b9 0f00 	cmp.w	r9, #0
1a000dca:	d024      	beq.n	1a000e16 <Chip_UART_SetBaudFDR+0xda>
   pUART->LCR |= UART_LCR_DLAB_EN;
1a000dcc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000dd4:	f8cb 300c 	str.w	r3, [fp, #12]
1a000dd8:	fa5f f389 	uxtb.w	r3, r9
   pUART->DLL = (uint32_t) dll;
1a000ddc:	f8cb 3000 	str.w	r3, [fp]
1a000de0:	f3c9 2307 	ubfx	r3, r9, #8, #8
   pUART->DLM = (uint32_t) dlm;
1a000de4:	f8cb 3004 	str.w	r3, [fp, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000de8:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000df0:	f8cb 300c 	str.w	r3, [fp, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000df4:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000df8:	b2db      	uxtb	r3, r3
1a000dfa:	9901      	ldr	r1, [sp, #4]
1a000dfc:	f001 020f 	and.w	r2, r1, #15
1a000e00:	4313      	orrs	r3, r2
1a000e02:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000e06:	0933      	lsrs	r3, r6, #4
1a000e08:	fb03 f30a 	mul.w	r3, r3, sl
1a000e0c:	448a      	add	sl, r1
1a000e0e:	fb0a f909 	mul.w	r9, sl, r9
1a000e12:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000e16:	4648      	mov	r0, r9
1a000e18:	b003      	add	sp, #12
1a000e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000e1e:	bf00      	nop
1a000e20:	1a00261c 	.word	0x1a00261c

1a000e24 <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000e24:	2200      	movs	r2, #0
1a000e26:	2a05      	cmp	r2, #5
1a000e28:	d819      	bhi.n	1a000e5e <Board_LED_Init+0x3a>
{
1a000e2a:	b470      	push	{r4, r5, r6}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a000e2c:	490c      	ldr	r1, [pc, #48]	; (1a000e60 <Board_LED_Init+0x3c>)
1a000e2e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000e32:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000e36:	784c      	ldrb	r4, [r1, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a000e38:	4b0a      	ldr	r3, [pc, #40]	; (1a000e64 <Board_LED_Init+0x40>)
1a000e3a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000e3e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000e42:	2001      	movs	r0, #1
1a000e44:	40a0      	lsls	r0, r4
1a000e46:	4301      	orrs	r1, r0
1a000e48:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
   pGPIO->B[port][pin] = setting;
1a000e4c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000e50:	2100      	movs	r1, #0
1a000e52:	5519      	strb	r1, [r3, r4]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000e54:	3201      	adds	r2, #1
1a000e56:	2a05      	cmp	r2, #5
1a000e58:	d9e8      	bls.n	1a000e2c <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a000e5a:	bc70      	pop	{r4, r5, r6}
1a000e5c:	4770      	bx	lr
1a000e5e:	4770      	bx	lr
1a000e60:	1a002634 	.word	0x1a002634
1a000e64:	400f4000 	.word	0x400f4000

1a000e68 <Board_UART_Init>:
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000e68:	4b03      	ldr	r3, [pc, #12]	; (1a000e78 <Board_UART_Init+0x10>)
1a000e6a:	2212      	movs	r2, #18
1a000e6c:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a000e70:	22d1      	movs	r2, #209	; 0xd1
1a000e72:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a000e76:	4770      	bx	lr
1a000e78:	40086000 	.word	0x40086000

1a000e7c <Board_Debug_Init>:
{
1a000e7c:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a000e7e:	4c08      	ldr	r4, [pc, #32]	; (1a000ea0 <Board_Debug_Init+0x24>)
1a000e80:	4620      	mov	r0, r4
1a000e82:	f7ff fff1 	bl	1a000e68 <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a000e86:	4620      	mov	r0, r4
1a000e88:	f7ff ff0e 	bl	1a000ca8 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a000e8c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000e90:	4620      	mov	r0, r4
1a000e92:	f7ff ff53 	bl	1a000d3c <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a000e96:	2303      	movs	r3, #3
1a000e98:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000e9a:	2301      	movs	r3, #1
1a000e9c:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000e9e:	bd10      	pop	{r4, pc}
1a000ea0:	400c1000 	.word	0x400c1000

1a000ea4 <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a000ea4:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a000ea6:	f7ff ffe9 	bl	1a000e7c <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a000eaa:	4806      	ldr	r0, [pc, #24]	; (1a000ec4 <Board_Init+0x20>)
1a000eac:	f7ff fe26 	bl	1a000afc <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a000eb0:	f7ff ffb8 	bl	1a000e24 <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a000eb4:	4a04      	ldr	r2, [pc, #16]	; (1a000ec8 <Board_Init+0x24>)
1a000eb6:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a000eba:	f043 0304 	orr.w	r3, r3, #4
1a000ebe:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a000ec2:	bd08      	pop	{r3, pc}
1a000ec4:	400f4000 	.word	0x400f4000
1a000ec8:	40043000 	.word	0x40043000

1a000ecc <Board_SetupMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000ecc:	2300      	movs	r3, #0
1a000ece:	2b17      	cmp	r3, #23
1a000ed0:	d812      	bhi.n	1a000ef8 <Board_SetupMuxing+0x2c>
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a000ed2:	b410      	push	{r4}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000ed4:	4a09      	ldr	r2, [pc, #36]	; (1a000efc <Board_SetupMuxing+0x30>)
1a000ed6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000eda:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000ede:	784a      	ldrb	r2, [r1, #1]
1a000ee0:	8848      	ldrh	r0, [r1, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000ee2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000ee6:	4906      	ldr	r1, [pc, #24]	; (1a000f00 <Board_SetupMuxing+0x34>)
1a000ee8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000eec:	3301      	adds	r3, #1
1a000eee:	2b17      	cmp	r3, #23
1a000ef0:	d9f0      	bls.n	1a000ed4 <Board_SetupMuxing+0x8>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000ef6:	4770      	bx	lr
1a000ef8:	4770      	bx	lr
1a000efa:	bf00      	nop
1a000efc:	1a00264c 	.word	0x1a00264c
1a000f00:	40086000 	.word	0x40086000

1a000f04 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a000f04:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000f06:	4a17      	ldr	r2, [pc, #92]	; (1a000f64 <Board_SetupClocking+0x60>)
1a000f08:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000f0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000f10:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000f14:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000f18:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000f1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000f20:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000f24:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000f28:	2201      	movs	r2, #1
1a000f2a:	490f      	ldr	r1, [pc, #60]	; (1a000f68 <Board_SetupClocking+0x64>)
1a000f2c:	2006      	movs	r0, #6
1a000f2e:	f7ff fdf9 	bl	1a000b24 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000f32:	2400      	movs	r4, #0
1a000f34:	e00a      	b.n	1a000f4c <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000f36:	480d      	ldr	r0, [pc, #52]	; (1a000f6c <Board_SetupClocking+0x68>)
1a000f38:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000f3c:	78cb      	ldrb	r3, [r1, #3]
1a000f3e:	788a      	ldrb	r2, [r1, #2]
1a000f40:	7849      	ldrb	r1, [r1, #1]
1a000f42:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000f46:	f7ff fd25 	bl	1a000994 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000f4a:	3401      	adds	r4, #1
1a000f4c:	2c02      	cmp	r4, #2
1a000f4e:	d9f2      	bls.n	1a000f36 <Board_SetupClocking+0x32>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000f50:	4b04      	ldr	r3, [pc, #16]	; (1a000f64 <Board_SetupClocking+0x60>)
1a000f52:	685a      	ldr	r2, [r3, #4]
1a000f54:	f022 020c 	bic.w	r2, r2, #12
1a000f58:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000f5a:	685a      	ldr	r2, [r3, #4]
1a000f5c:	f042 0203 	orr.w	r2, r2, #3
1a000f60:	605a      	str	r2, [r3, #4]
1a000f62:	bd10      	pop	{r4, pc}
1a000f64:	40043000 	.word	0x40043000
1a000f68:	0c28cb00 	.word	0x0c28cb00
1a000f6c:	1a002640 	.word	0x1a002640

1a000f70 <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000f70:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a000f72:	f7ff ffab 	bl	1a000ecc <Board_SetupMuxing>
   Board_SetupClocking();
1a000f76:	f7ff ffc5 	bl	1a000f04 <Board_SetupClocking>
1a000f7a:	bd08      	pop	{r3, pc}

1a000f7c <ResetISR>:
void ResetISR(void) {
1a000f7c:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a000f7e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000f80:	4a16      	ldr	r2, [pc, #88]	; (1a000fdc <ResetISR+0x60>)
1a000f82:	4b17      	ldr	r3, [pc, #92]	; (1a000fe0 <ResetISR+0x64>)
1a000f84:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000f86:	4a17      	ldr	r2, [pc, #92]	; (1a000fe4 <ResetISR+0x68>)
1a000f88:	3304      	adds	r3, #4
1a000f8a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000f8c:	2300      	movs	r3, #0
1a000f8e:	e005      	b.n	1a000f9c <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000f90:	f04f 31ff 	mov.w	r1, #4294967295
1a000f94:	4a14      	ldr	r2, [pc, #80]	; (1a000fe8 <ResetISR+0x6c>)
1a000f96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000f9a:	3301      	adds	r3, #1
1a000f9c:	2b07      	cmp	r3, #7
1a000f9e:	d9f7      	bls.n	1a000f90 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a000fa0:	b662      	cpsie	i
    SystemInit();
1a000fa2:	f000 f829 	bl	1a000ff8 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a000fa6:	4b11      	ldr	r3, [pc, #68]	; (1a000fec <ResetISR+0x70>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000fa8:	e007      	b.n	1a000fba <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a000faa:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000fae:	689a      	ldr	r2, [r3, #8]
1a000fb0:	6859      	ldr	r1, [r3, #4]
1a000fb2:	6818      	ldr	r0, [r3, #0]
1a000fb4:	f7ff f8ea 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a000fb8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000fba:	4a0d      	ldr	r2, [pc, #52]	; (1a000ff0 <ResetISR+0x74>)
1a000fbc:	4293      	cmp	r3, r2
1a000fbe:	d3f4      	bcc.n	1a000faa <ResetISR+0x2e>
1a000fc0:	e006      	b.n	1a000fd0 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a000fc2:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000fc4:	6859      	ldr	r1, [r3, #4]
1a000fc6:	f854 0b08 	ldr.w	r0, [r4], #8
1a000fca:	f7ff f8ee 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a000fce:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000fd0:	4a08      	ldr	r2, [pc, #32]	; (1a000ff4 <ResetISR+0x78>)
1a000fd2:	4293      	cmp	r3, r2
1a000fd4:	d3f5      	bcc.n	1a000fc2 <ResetISR+0x46>
    main();
1a000fd6:	f7ff fa9f 	bl	1a000518 <main>
1a000fda:	e7fe      	b.n	1a000fda <ResetISR+0x5e>
1a000fdc:	10df1000 	.word	0x10df1000
1a000fe0:	40053100 	.word	0x40053100
1a000fe4:	01dff7ff 	.word	0x01dff7ff
1a000fe8:	e000e280 	.word	0xe000e280
1a000fec:	1a000114 	.word	0x1a000114
1a000ff0:	1a000150 	.word	0x1a000150
1a000ff4:	1a000178 	.word	0x1a000178

1a000ff8 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000ff8:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000ffa:	f7ff fd55 	bl	1a000aa8 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a000ffe:	f7ff ffb7 	bl	1a000f70 <Board_SystemInit>
1a001002:	bd08      	pop	{r3, pc}

1a001004 <boardConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardConfig(void) {
1a001004:	b508      	push	{r3, lr}

   /* Read clock settings and update SystemCoreClock variable */
   SystemCoreClockUpdate();
1a001006:	f7ff fa9f 	bl	1a000548 <SystemCoreClockUpdate>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a00100a:	f7ff ff4b 	bl	1a000ea4 <Board_Init>
1a00100e:	bd08      	pop	{r3, pc}

1a001010 <sAPI_NullFuncPtr>:
 * param:  void * - Not used
 * return: bool_t - Return always true
 */
bool_t sAPI_NullFuncPtr(void *ptr){
   return 1;
}
1a001010:	2001      	movs	r0, #1
1a001012:	4770      	bx	lr

1a001014 <gpioObtainPinConfig>:
/*==================[internal functions definition]==========================*/

static void gpioObtainPinConfig( gpioMap_t pin,
                                int8_t *pinNamePort, int8_t *pinNamePin,
																int8_t *func, int8_t *gpioPort,
																int8_t *gpioPin ){
1a001014:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsConfig[pin].pinName.port;
1a001016:	4d0b      	ldr	r5, [pc, #44]	; (1a001044 <gpioObtainPinConfig+0x30>)
1a001018:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00101c:	182c      	adds	r4, r5, r0
1a00101e:	5628      	ldrsb	r0, [r5, r0]
1a001020:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsConfig[pin].pinName.pin;
1a001022:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001026:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsConfig[pin].func;
1a001028:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00102c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsConfig[pin].gpio.port;
1a00102e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001032:	9b02      	ldr	r3, [sp, #8]
1a001034:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsConfig[pin].gpio.pin;
1a001036:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00103a:	9b03      	ldr	r3, [sp, #12]
1a00103c:	701a      	strb	r2, [r3, #0]
}
1a00103e:	bc30      	pop	{r4, r5}
1a001040:	4770      	bx	lr
1a001042:	bf00      	nop
1a001044:	1a0026ac 	.word	0x1a0026ac

1a001048 <gpioConfig>:

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){
1a001048:	b530      	push	{r4, r5, lr}
1a00104a:	b085      	sub	sp, #20
1a00104c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00104e:	2300      	movs	r3, #0
1a001050:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001054:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001058:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00105c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001060:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001064:	f10d 030b 	add.w	r3, sp, #11
1a001068:	9301      	str	r3, [sp, #4]
1a00106a:	ab03      	add	r3, sp, #12
1a00106c:	9300      	str	r3, [sp, #0]
1a00106e:	f10d 030d 	add.w	r3, sp, #13
1a001072:	f10d 020e 	add.w	r2, sp, #14
1a001076:	f10d 010f 	add.w	r1, sp, #15
1a00107a:	f7ff ffcb 	bl	1a001014 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   switch(config){
1a00107e:	2c05      	cmp	r4, #5
1a001080:	f200 8096 	bhi.w	1a0011b0 <gpioConfig+0x168>
1a001084:	e8df f004 	tbb	[pc, r4]
1a001088:	3d237109 	.word	0x3d237109
1a00108c:	0357      	.short	0x0357

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
1a00108e:	4849      	ldr	r0, [pc, #292]	; (1a0011b4 <gpioConfig+0x16c>)
1a001090:	f7ff fd34 	bl	1a000afc <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001094:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001096:	b005      	add	sp, #20
1a001098:	bd30      	pop	{r4, r5, pc}
         Chip_SCU_PinMux(
1a00109a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00109e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0010a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a0010a6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0010aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0010ae:	4942      	ldr	r1, [pc, #264]	; (1a0011b8 <gpioConfig+0x170>)
1a0010b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0010b4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0010b8:	2401      	movs	r4, #1
1a0010ba:	2300      	movs	r3, #0
1a0010bc:	fa04 f202 	lsl.w	r2, r4, r2
1a0010c0:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a0010c4:	483b      	ldr	r0, [pc, #236]	; (1a0011b4 <gpioConfig+0x16c>)
1a0010c6:	f7ff fd1a 	bl	1a000afe <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a0010ca:	4620      	mov	r0, r4
      break;
1a0010cc:	e7e3      	b.n	1a001096 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a0010ce:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0010d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0010d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0010da:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0010de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0010e2:	4935      	ldr	r1, [pc, #212]	; (1a0011b8 <gpioConfig+0x170>)
1a0010e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0010e8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0010ec:	2401      	movs	r4, #1
1a0010ee:	2300      	movs	r3, #0
1a0010f0:	fa04 f202 	lsl.w	r2, r4, r2
1a0010f4:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a0010f8:	482e      	ldr	r0, [pc, #184]	; (1a0011b4 <gpioConfig+0x16c>)
1a0010fa:	f7ff fd00 	bl	1a000afe <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a0010fe:	4620      	mov	r0, r4
      break;
1a001100:	e7c9      	b.n	1a001096 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a001102:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001106:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00110a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00110e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001112:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001116:	4928      	ldr	r1, [pc, #160]	; (1a0011b8 <gpioConfig+0x170>)
1a001118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00111c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001120:	2401      	movs	r4, #1
1a001122:	2300      	movs	r3, #0
1a001124:	fa04 f202 	lsl.w	r2, r4, r2
1a001128:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a00112c:	4821      	ldr	r0, [pc, #132]	; (1a0011b4 <gpioConfig+0x16c>)
1a00112e:	f7ff fce6 	bl	1a000afe <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a001132:	4620      	mov	r0, r4
      break;
1a001134:	e7af      	b.n	1a001096 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a001136:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00113a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00113e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001142:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001146:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00114a:	491b      	ldr	r1, [pc, #108]	; (1a0011b8 <gpioConfig+0x170>)
1a00114c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001150:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001154:	2401      	movs	r4, #1
1a001156:	2300      	movs	r3, #0
1a001158:	fa04 f202 	lsl.w	r2, r4, r2
1a00115c:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001160:	4814      	ldr	r0, [pc, #80]	; (1a0011b4 <gpioConfig+0x16c>)
1a001162:	f7ff fccc 	bl	1a000afe <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a001166:	4620      	mov	r0, r4
      break;
1a001168:	e795      	b.n	1a001096 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a00116a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00116e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001172:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001176:	f042 0290 	orr.w	r2, r2, #144	; 0x90
1a00117a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00117e:	490e      	ldr	r1, [pc, #56]	; (1a0011b8 <gpioConfig+0x170>)
1a001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001184:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001188:	2401      	movs	r4, #1
1a00118a:	4d0a      	ldr	r5, [pc, #40]	; (1a0011b4 <gpioConfig+0x16c>)
1a00118c:	4623      	mov	r3, r4
1a00118e:	fa04 f202 	lsl.w	r2, r4, r2
1a001192:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001196:	4628      	mov	r0, r5
1a001198:	f7ff fcb1 	bl	1a000afe <Chip_GPIO_SetDir>
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00119c:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a0011a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a0011a4:	eb05 1542 	add.w	r5, r5, r2, lsl #5
1a0011a8:	2200      	movs	r2, #0
1a0011aa:	54ea      	strb	r2, [r5, r3]
   bool_t ret_val     = 1;
1a0011ac:	4620      	mov	r0, r4
1a0011ae:	e772      	b.n	1a001096 <gpioConfig+0x4e>
         ret_val = 0;
1a0011b0:	2000      	movs	r0, #0
1a0011b2:	e770      	b.n	1a001096 <gpioConfig+0x4e>
1a0011b4:	400f4000 	.word	0x400f4000
1a0011b8:	40086000 	.word	0x40086000

1a0011bc <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value ){
1a0011bc:	b510      	push	{r4, lr}
1a0011be:	b084      	sub	sp, #16
1a0011c0:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0011c2:	2300      	movs	r3, #0
1a0011c4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0011c8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0011cc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0011d0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0011d4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a0011d8:	f10d 030b 	add.w	r3, sp, #11
1a0011dc:	9301      	str	r3, [sp, #4]
1a0011de:	ab03      	add	r3, sp, #12
1a0011e0:	9300      	str	r3, [sp, #0]
1a0011e2:	f10d 030d 	add.w	r3, sp, #13
1a0011e6:	f10d 020e 	add.w	r2, sp, #14
1a0011ea:	f10d 010f 	add.w	r1, sp, #15
1a0011ee:	f7ff ff11 	bl	1a001014 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0011f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0011f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0011fa:	3400      	adds	r4, #0
1a0011fc:	bf18      	it	ne
1a0011fe:	2401      	movne	r4, #1
1a001200:	015b      	lsls	r3, r3, #5
1a001202:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001206:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00120a:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a00120c:	2001      	movs	r0, #1
1a00120e:	b004      	add	sp, #16
1a001210:	bd10      	pop	{r4, pc}
1a001212:	Address 0x1a001212 is out of bounds.


1a001214 <tickConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig(tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook ) {
1a001214:	b508      	push	{r3, lr}

   bool_t ret_val = 1;
   tick_t tickRateHz = 0;

   if( tickHook ){
1a001216:	b112      	cbz	r2, 1a00121e <tickConfig+0xa>
1a001218:	4613      	mov	r3, r2
      tickHookFunction = tickHook;
1a00121a:	4a17      	ldr	r2, [pc, #92]	; (1a001278 <tickConfig+0x64>)
1a00121c:	6013      	str	r3, [r2, #0]
   }

   if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ){
1a00121e:	f110 32ff 	adds.w	r2, r0, #4294967295
1a001222:	f141 33ff 	adc.w	r3, r1, #4294967295
1a001226:	2b00      	cmp	r3, #0
1a001228:	bf08      	it	eq
1a00122a:	2a32      	cmpeq	r2, #50	; 0x32
1a00122c:	d220      	bcs.n	1a001270 <tickConfig+0x5c>
1a00122e:	4602      	mov	r2, r0
1a001230:	460b      	mov	r3, r1

		tickRateMS = tickRateMSvalue;
1a001232:	4912      	ldr	r1, [pc, #72]	; (1a00127c <tickConfig+0x68>)
1a001234:	e9c1 2300 	strd	r2, r3, [r1]
      tickRateHz = 1000 => 1000 ticks per second =>  1 ms tick
      tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
      tickRateHz =  100 =>  100 ticks per second => 10 ms tick
      tickRateHz =   20 =>   20 ticks per second => 50 ms tick
      */
      tickRateHz = 1000 / tickRateMSvalue;
1a001238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00123c:	2100      	movs	r1, #0
1a00123e:	f000 ff9d 	bl	1a00217c <__aeabi_uldivmod>

      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
1a001242:	4602      	mov	r2, r0
1a001244:	460b      	mov	r3, r1
1a001246:	490e      	ldr	r1, [pc, #56]	; (1a001280 <tickConfig+0x6c>)
1a001248:	6808      	ldr	r0, [r1, #0]
1a00124a:	2100      	movs	r1, #0
1a00124c:	f000 ff96 	bl	1a00217c <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a001250:	3801      	subs	r0, #1
1a001252:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001256:	d20d      	bcs.n	1a001274 <tickConfig+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a001258:	4b0a      	ldr	r3, [pc, #40]	; (1a001284 <tickConfig+0x70>)
1a00125a:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a00125c:	21e0      	movs	r1, #224	; 0xe0
1a00125e:	4a0a      	ldr	r2, [pc, #40]	; (1a001288 <tickConfig+0x74>)
1a001260:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a001264:	2200      	movs	r2, #0
1a001266:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001268:	2207      	movs	r2, #7
1a00126a:	601a      	str	r2, [r3, #0]
   bool_t ret_val = 1;
1a00126c:	2001      	movs	r0, #1
1a00126e:	bd08      	pop	{r3, pc}
   }
   else{
      /* Error, tickRateMS variable not in range (1 <= tickRateMS <= 50) */
      ret_val = 0;
1a001270:	2000      	movs	r0, #0
1a001272:	bd08      	pop	{r3, pc}
   bool_t ret_val = 1;
1a001274:	2001      	movs	r0, #1
   }

   return ret_val;
}
1a001276:	bd08      	pop	{r3, pc}
1a001278:	1000003c 	.word	0x1000003c
1a00127c:	10000170 	.word	0x10000170
1a001280:	10000164 	.word	0x10000164
1a001284:	e000e010 	.word	0xe000e010
1a001288:	e000ed00 	.word	0xe000ed00

1a00128c <SysTick_Handler>:
/*==================[ISR external functions definition]======================*/

//__attribute__ ((section(".after_vectors")))

/* SysTick Timer ISR Handler */
void SysTick_Handler(void) {
1a00128c:	b508      	push	{r3, lr}
   tickCounter++;
1a00128e:	4906      	ldr	r1, [pc, #24]	; (1a0012a8 <SysTick_Handler+0x1c>)
1a001290:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001294:	3201      	adds	r2, #1
1a001296:	f143 0300 	adc.w	r3, r3, #0
1a00129a:	e9c1 2300 	strd	r2, r3, [r1]

	/* Execute Tick Hook function */
	(* tickHookFunction )( 0 );
1a00129e:	4b03      	ldr	r3, [pc, #12]	; (1a0012ac <SysTick_Handler+0x20>)
1a0012a0:	681b      	ldr	r3, [r3, #0]
1a0012a2:	2000      	movs	r0, #0
1a0012a4:	4798      	blx	r3
1a0012a6:	bd08      	pop	{r3, pc}
1a0012a8:	10000168 	.word	0x10000168
1a0012ac:	1000003c 	.word	0x1000003c

1a0012b0 <errorOcurred>:
/*==================[internal functions definition]==========================*/

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred(void){
1a0012b0:	e7fe      	b.n	1a0012b0 <errorOcurred>

1a0012b2 <doNothing>:
   while(1);
}

static void doNothing(void){
1a0012b2:	4770      	bx	lr

1a0012b4 <TIMER0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void){
1a0012b4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0012b6:	2400      	movs	r4, #0
1a0012b8:	e001      	b.n	1a0012be <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a0012ba:	3401      	adds	r4, #1
1a0012bc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0012be:	2c03      	cmp	r4, #3
1a0012c0:	d812      	bhi.n	1a0012e8 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ){
1a0012c2:	b265      	sxtb	r5, r4
 * @note   Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0012c4:	4b09      	ldr	r3, [pc, #36]	; (1a0012ec <TIMER0_IRQHandler+0x38>)
1a0012c6:	681a      	ldr	r2, [r3, #0]
1a0012c8:	f004 010f 	and.w	r1, r4, #15
1a0012cc:	2301      	movs	r3, #1
1a0012ce:	408b      	lsls	r3, r1
1a0012d0:	421a      	tst	r2, r3
1a0012d2:	d0f2      	beq.n	1a0012ba <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a0012d4:	4b06      	ldr	r3, [pc, #24]	; (1a0012f0 <TIMER0_IRQHandler+0x3c>)
1a0012d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0012da:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a0012dc:	2301      	movs	r3, #1
1a0012de:	fa03 f505 	lsl.w	r5, r3, r5
1a0012e2:	4b02      	ldr	r3, [pc, #8]	; (1a0012ec <TIMER0_IRQHandler+0x38>)
1a0012e4:	601d      	str	r5, [r3, #0]
1a0012e6:	e7e8      	b.n	1a0012ba <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0012e8:	bd38      	pop	{r3, r4, r5, pc}
1a0012ea:	bf00      	nop
1a0012ec:	40084000 	.word	0x40084000
1a0012f0:	10000040 	.word	0x10000040

1a0012f4 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void ){
1a0012f4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0012f6:	2400      	movs	r4, #0
1a0012f8:	e001      	b.n	1a0012fe <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a0012fa:	3401      	adds	r4, #1
1a0012fc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0012fe:	2c03      	cmp	r4, #3
1a001300:	d813      	bhi.n	1a00132a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ){
1a001302:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001304:	4b09      	ldr	r3, [pc, #36]	; (1a00132c <TIMER1_IRQHandler+0x38>)
1a001306:	681a      	ldr	r2, [r3, #0]
1a001308:	f004 010f 	and.w	r1, r4, #15
1a00130c:	2301      	movs	r3, #1
1a00130e:	408b      	lsls	r3, r1
1a001310:	421a      	tst	r2, r3
1a001312:	d0f2      	beq.n	1a0012fa <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a001314:	1d23      	adds	r3, r4, #4
1a001316:	4a06      	ldr	r2, [pc, #24]	; (1a001330 <TIMER1_IRQHandler+0x3c>)
1a001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00131c:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a00131e:	2301      	movs	r3, #1
1a001320:	fa03 f505 	lsl.w	r5, r3, r5
1a001324:	4b01      	ldr	r3, [pc, #4]	; (1a00132c <TIMER1_IRQHandler+0x38>)
1a001326:	601d      	str	r5, [r3, #0]
1a001328:	e7e7      	b.n	1a0012fa <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00132a:	bd38      	pop	{r3, r4, r5, pc}
1a00132c:	40085000 	.word	0x40085000
1a001330:	10000040 	.word	0x10000040

1a001334 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void ){
1a001334:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001336:	2400      	movs	r4, #0
1a001338:	e001      	b.n	1a00133e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a00133a:	3401      	adds	r4, #1
1a00133c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00133e:	2c03      	cmp	r4, #3
1a001340:	d814      	bhi.n	1a00136c <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ){
1a001342:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001344:	4b0a      	ldr	r3, [pc, #40]	; (1a001370 <TIMER2_IRQHandler+0x3c>)
1a001346:	681a      	ldr	r2, [r3, #0]
1a001348:	f004 010f 	and.w	r1, r4, #15
1a00134c:	2301      	movs	r3, #1
1a00134e:	408b      	lsls	r3, r1
1a001350:	421a      	tst	r2, r3
1a001352:	d0f2      	beq.n	1a00133a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a001354:	f104 0308 	add.w	r3, r4, #8
1a001358:	4a06      	ldr	r2, [pc, #24]	; (1a001374 <TIMER2_IRQHandler+0x40>)
1a00135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00135e:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a001360:	2301      	movs	r3, #1
1a001362:	fa03 f505 	lsl.w	r5, r3, r5
1a001366:	4b02      	ldr	r3, [pc, #8]	; (1a001370 <TIMER2_IRQHandler+0x3c>)
1a001368:	601d      	str	r5, [r3, #0]
1a00136a:	e7e6      	b.n	1a00133a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a00136c:	bd38      	pop	{r3, r4, r5, pc}
1a00136e:	bf00      	nop
1a001370:	400c3000 	.word	0x400c3000
1a001374:	10000040 	.word	0x10000040

1a001378 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void ){
1a001378:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00137a:	2400      	movs	r4, #0
1a00137c:	e001      	b.n	1a001382 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a00137e:	3401      	adds	r4, #1
1a001380:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001382:	2c03      	cmp	r4, #3
1a001384:	d814      	bhi.n	1a0013b0 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)){
1a001386:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001388:	4b0a      	ldr	r3, [pc, #40]	; (1a0013b4 <TIMER3_IRQHandler+0x3c>)
1a00138a:	681a      	ldr	r2, [r3, #0]
1a00138c:	f004 010f 	and.w	r1, r4, #15
1a001390:	2301      	movs	r3, #1
1a001392:	408b      	lsls	r3, r1
1a001394:	421a      	tst	r2, r3
1a001396:	d0f2      	beq.n	1a00137e <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a001398:	f104 030c 	add.w	r3, r4, #12
1a00139c:	4a06      	ldr	r2, [pc, #24]	; (1a0013b8 <TIMER3_IRQHandler+0x40>)
1a00139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0013a2:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a0013a4:	2301      	movs	r3, #1
1a0013a6:	fa03 f505 	lsl.w	r5, r3, r5
1a0013aa:	4b02      	ldr	r3, [pc, #8]	; (1a0013b4 <TIMER3_IRQHandler+0x3c>)
1a0013ac:	601d      	str	r5, [r3, #0]
1a0013ae:	e7e6      	b.n	1a00137e <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0013b0:	bd38      	pop	{r3, r4, r5, pc}
1a0013b2:	bf00      	nop
1a0013b4:	400c4000 	.word	0x400c4000
1a0013b8:	10000040 	.word	0x10000040

1a0013bc <uartConfig>:
void uartConfig( uartMap_t uart, uint32_t baudRate ){
1a0013bc:	b538      	push	{r3, r4, r5, lr}
1a0013be:	460c      	mov	r4, r1
   switch(uart){
1a0013c0:	b110      	cbz	r0, 1a0013c8 <uartConfig+0xc>
1a0013c2:	2801      	cmp	r0, #1
1a0013c4:	d013      	beq.n	1a0013ee <uartConfig+0x32>
1a0013c6:	bd38      	pop	{r3, r4, r5, pc}
      Chip_UART_Init(UART_USB_LPC);
1a0013c8:	4d12      	ldr	r5, [pc, #72]	; (1a001414 <uartConfig+0x58>)
1a0013ca:	4628      	mov	r0, r5
1a0013cc:	f7ff fc6c 	bl	1a000ca8 <Chip_UART_Init>
      Chip_UART_SetBaud(UART_USB_LPC, baudRate);  /* Set Baud rate */
1a0013d0:	4621      	mov	r1, r4
1a0013d2:	4628      	mov	r0, r5
1a0013d4:	f7ff fc92 	bl	1a000cfc <Chip_UART_SetBaud>
   pUART->FCR = fcr;
1a0013d8:	2301      	movs	r3, #1
1a0013da:	60ab      	str	r3, [r5, #8]
    pUART->TER2 = UART_TER2_TXEN;
1a0013dc:	65eb      	str	r3, [r5, #92]	; 0x5c
1a0013de:	4b0e      	ldr	r3, [pc, #56]	; (1a001418 <uartConfig+0x5c>)
1a0013e0:	221e      	movs	r2, #30
1a0013e2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
1a0013e6:	22d6      	movs	r2, #214	; 0xd6
1a0013e8:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
1a0013ec:	bd38      	pop	{r3, r4, r5, pc}
      Chip_UART_Init(UART_232_LPC);
1a0013ee:	4d0b      	ldr	r5, [pc, #44]	; (1a00141c <uartConfig+0x60>)
1a0013f0:	4628      	mov	r0, r5
1a0013f2:	f7ff fc59 	bl	1a000ca8 <Chip_UART_Init>
      Chip_UART_SetBaud(UART_232_LPC, baudRate);  /* Set Baud rate */
1a0013f6:	4621      	mov	r1, r4
1a0013f8:	4628      	mov	r0, r5
1a0013fa:	f7ff fc7f 	bl	1a000cfc <Chip_UART_SetBaud>
   pUART->FCR = fcr;
1a0013fe:	2301      	movs	r3, #1
1a001400:	60ab      	str	r3, [r5, #8]
    pUART->TER2 = UART_TER2_TXEN;
1a001402:	65eb      	str	r3, [r5, #92]	; 0x5c
1a001404:	4b04      	ldr	r3, [pc, #16]	; (1a001418 <uartConfig+0x5c>)
1a001406:	221a      	movs	r2, #26
1a001408:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
1a00140c:	22d2      	movs	r2, #210	; 0xd2
1a00140e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
1a001412:	bd38      	pop	{r3, r4, r5, pc}
1a001414:	400c1000 	.word	0x400c1000
1a001418:	40086000 	.word	0x40086000
1a00141c:	400c2000 	.word	0x400c2000

1a001420 <uartWriteByte>:
   switch(uart){
1a001420:	b110      	cbz	r0, 1a001428 <uartWriteByte+0x8>
1a001422:	2801      	cmp	r0, #1
1a001424:	d008      	beq.n	1a001438 <uartWriteByte+0x18>
1a001426:	4770      	bx	lr
 * @note   Mask bits of the returned status value with UART_LSR_*
 *         definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
   return pUART->LSR;
1a001428:	4b07      	ldr	r3, [pc, #28]	; (1a001448 <uartWriteByte+0x28>)
1a00142a:	695b      	ldr	r3, [r3, #20]
      while ((Chip_UART_ReadLineStatus(UART_USB_LPC) & UART_LSR_THRE) == 0) {}   // Wait for space in FIFO
1a00142c:	f013 0f20 	tst.w	r3, #32
1a001430:	d0fa      	beq.n	1a001428 <uartWriteByte+0x8>
   pUART->THR = (uint32_t) data;
1a001432:	4b05      	ldr	r3, [pc, #20]	; (1a001448 <uartWriteByte+0x28>)
1a001434:	6019      	str	r1, [r3, #0]
1a001436:	4770      	bx	lr
   return pUART->LSR;
1a001438:	4b04      	ldr	r3, [pc, #16]	; (1a00144c <uartWriteByte+0x2c>)
1a00143a:	695b      	ldr	r3, [r3, #20]
      while ((Chip_UART_ReadLineStatus(UART_232_LPC) & UART_LSR_THRE) == 0) {}   // Wait for space in FIFO
1a00143c:	f013 0f20 	tst.w	r3, #32
1a001440:	d0fa      	beq.n	1a001438 <uartWriteByte+0x18>
   pUART->THR = (uint32_t) data;
1a001442:	4b02      	ldr	r3, [pc, #8]	; (1a00144c <uartWriteByte+0x2c>)
1a001444:	6019      	str	r1, [r3, #0]
1a001446:	4770      	bx	lr
1a001448:	400c1000 	.word	0x400c1000
1a00144c:	400c2000 	.word	0x400c2000

1a001450 <UART2_IRQHandler>:
}

/* 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26) */
void UART2_IRQHandler(void){
1a001450:	4770      	bx	lr

1a001452 <UART3_IRQHandler>:
}

/* 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27) */
void UART3_IRQHandler(void){
1a001452:	4770      	bx	lr

1a001454 <rkh_bittbl_getBitMask>:
/* ---------------------------- Local functions ---------------------------- */
/* ---------------------------- Global functions --------------------------- */
rui8_t 
rkh_bittbl_getBitMask(rui8_t bitPos)
{
    return (bitPos < 8) ? bitMaskTbl[bitPos] : RKH_INVALID_BITPOS;
1a001454:	2807      	cmp	r0, #7
1a001456:	d901      	bls.n	1a00145c <rkh_bittbl_getBitMask+0x8>
1a001458:	20ff      	movs	r0, #255	; 0xff
}
1a00145a:	4770      	bx	lr
    return (bitPos < 8) ? bitMaskTbl[bitPos] : RKH_INVALID_BITPOS;
1a00145c:	4b01      	ldr	r3, [pc, #4]	; (1a001464 <rkh_bittbl_getBitMask+0x10>)
1a00145e:	5c18      	ldrb	r0, [r3, r0]
1a001460:	4770      	bx	lr
1a001462:	bf00      	nop
1a001464:	1a0027e4 	.word	0x1a0027e4

1a001468 <rkh_bittbl_getLeastBitSetPos>:

rui8_t 
rkh_bittbl_getLeastBitSetPos(rui8_t value)
{
    return leastBitSetTbl[value];
}
1a001468:	4b01      	ldr	r3, [pc, #4]	; (1a001470 <rkh_bittbl_getLeastBitSetPos+0x8>)
1a00146a:	5c18      	ldrb	r0, [r3, r0]
1a00146c:	4770      	bx	lr
1a00146e:	bf00      	nop
1a001470:	1a0027ec 	.word	0x1a0027ec

1a001474 <rkh_fwk_init>:
/* ---------------------------- Local variables ---------------------------- */
/* ----------------------- Local function prototypes ----------------------- */
/* ---------------------------- Local functions ---------------------------- */
void 
rkh_fwk_init(void)
{
1a001474:	4770      	bx	lr
1a001476:	Address 0x1a001476 is out of bounds.


1a001478 <rkh_fwk_enter>:
 *	task-level response. With the nonpreemptive RKS, the task-level response
 *	is equal to the longest RTC step of all active objects in the system.
 */
void 
rkh_fwk_enter(void)
{
1a001478:	b510      	push	{r4, lr}
    rui8_t prio;
    RKH_SMA_T *sma;
    RKH_EVT_T *e;
    RKH_SR_ALLOC();

    RKH_HOOK_START();
1a00147a:	f7fe ff94 	bl	1a0003a6 <rkh_hook_start>
    RKH_TR_FWK_EN();
1a00147e:	20a0      	movs	r0, #160	; 0xa0
1a001480:	f000 fce2 	bl	1a001e48 <rkh_trc_isoff_>
1a001484:	b158      	cbz	r0, 1a00149e <rkh_fwk_enter+0x26>
1a001486:	f000 f82f 	bl	1a0014e8 <rkhport_enter_critical>
1a00148a:	20a0      	movs	r0, #160	; 0xa0
1a00148c:	f000 fd8a 	bl	1a001fa4 <rkh_trc_begin>
1a001490:	f000 fd60 	bl	1a001f54 <rkh_trc_end>
1a001494:	f000 f834 	bl	1a001500 <rkhport_exit_critical>
1a001498:	e001      	b.n	1a00149e <rkh_fwk_enter+0x26>
             * the determination of the idle condition (no events in the queues)
             * can change at any time by an interrupt posting events to a queue.
             * The rkh_hook_idle() MUST enable interrups internally, perhaps at
             * the same time as putting the CPU into a power-saving mode.
             */
            rkh_hook_idle();
1a00149a:	f7fe ffa8 	bl	1a0003ee <rkh_hook_idle>
        RKH_DIS_INTERRUPT();
1a00149e:	b672      	cpsid	i
        if (rkh_smaPrio_isReady())
1a0014a0:	f000 faec 	bl	1a001a7c <rkh_smaPrio_isReady>
1a0014a4:	2800      	cmp	r0, #0
1a0014a6:	d0f8      	beq.n	1a00149a <rkh_fwk_enter+0x22>
            prio = rkh_smaPrio_findHighest();
1a0014a8:	f000 fb30 	bl	1a001b0c <rkh_smaPrio_findHighest>
            sma = rkh_sptbl[prio];
1a0014ac:	4b05      	ldr	r3, [pc, #20]	; (1a0014c4 <rkh_fwk_enter+0x4c>)
1a0014ae:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
            RKH_ENA_INTERRUPT();
1a0014b2:	b662      	cpsie	i
            e = rkh_sma_get(sma);
1a0014b4:	4620      	mov	r0, r4
1a0014b6:	f000 faa5 	bl	1a001a04 <rkh_sma_get>
            (void)rkh_sm_dispatch((RKH_SM_T *)sma, e);
1a0014ba:	4601      	mov	r1, r0
1a0014bc:	4620      	mov	r0, r4
1a0014be:	f000 f935 	bl	1a00172c <rkh_sm_dispatch>
1a0014c2:	e7ec      	b.n	1a00149e <rkh_fwk_enter+0x26>
1a0014c4:	10000178 	.word	0x10000178

1a0014c8 <rkh_fwk_exit>:
    }
}

void 
rkh_fwk_exit(void)
{
1a0014c8:	b508      	push	{r3, lr}
    RKH_TR_FWK_EX();
1a0014ca:	20a1      	movs	r0, #161	; 0xa1
1a0014cc:	f000 fcbc 	bl	1a001e48 <rkh_trc_isoff_>
1a0014d0:	b900      	cbnz	r0, 1a0014d4 <rkh_fwk_exit+0xc>
1a0014d2:	bd08      	pop	{r3, pc}
1a0014d4:	f000 f808 	bl	1a0014e8 <rkhport_enter_critical>
1a0014d8:	20a1      	movs	r0, #161	; 0xa1
1a0014da:	f000 fd63 	bl	1a001fa4 <rkh_trc_begin>
1a0014de:	f000 fd39 	bl	1a001f54 <rkh_trc_end>
1a0014e2:	f000 f80d 	bl	1a001500 <rkhport_exit_critical>
}
1a0014e6:	e7f4      	b.n	1a0014d2 <rkh_fwk_exit+0xa>

1a0014e8 <rkhport_enter_critical>:
}

void
rkhport_enter_critical(void)
{
    __asm volatile
1a0014e8:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0014ec:	f380 8811 	msr	BASEPRI, r0
        "	mov r0, %0 \n"
        "	msr basepri, r0	\n"
        ::"i" (((HIGHEST_IRQ_PRI << (8 - __NVIC_PRIO_BITS)) & 0xFF)) : "r0"
    );

    critical_nesting++;
1a0014f0:	4a02      	ldr	r2, [pc, #8]	; (1a0014fc <rkhport_enter_critical+0x14>)
1a0014f2:	6813      	ldr	r3, [r2, #0]
1a0014f4:	3301      	adds	r3, #1
1a0014f6:	6013      	str	r3, [r2, #0]
1a0014f8:	4770      	bx	lr
1a0014fa:	bf00      	nop
1a0014fc:	10000098 	.word	0x10000098

1a001500 <rkhport_exit_critical>:
}

void
rkhport_exit_critical(void)
{
    critical_nesting--;
1a001500:	4a04      	ldr	r2, [pc, #16]	; (1a001514 <rkhport_exit_critical+0x14>)
1a001502:	6813      	ldr	r3, [r2, #0]
1a001504:	3b01      	subs	r3, #1
1a001506:	6013      	str	r3, [r2, #0]

    if (critical_nesting != 0)
1a001508:	b91b      	cbnz	r3, 1a001512 <rkhport_exit_critical+0x12>
    {
        return;
    }

    __asm volatile
1a00150a:	f04f 0000 	mov.w	r0, #0
1a00150e:	f380 8811 	msr	BASEPRI, r0
1a001512:	4770      	bx	lr
1a001514:	10000098 	.word	0x10000098

1a001518 <rkh_queue_init>:
/* ---------------------------- Local functions ---------------------------- */
/* ---------------------------- Global functions --------------------------- */
void
rkh_queue_init(RKH_QUEUE_T *q, const void * *sstart, RKH_QUENE_T ssize,
            void *sma)
{
1a001518:	b570      	push	{r4, r5, r6, lr}
1a00151a:	4604      	mov	r4, r0
1a00151c:	4615      	mov	r5, r2
1a00151e:	461e      	mov	r6, r3
    RKH_SR_ALLOC();

    q->pstart = sstart;
1a001520:	60c1      	str	r1, [r0, #12]
    q->pin = q->pout = (void * *)sstart;
1a001522:	6041      	str	r1, [r0, #4]
1a001524:	6081      	str	r1, [r0, #8]
    q->nelems = ssize;
1a001526:	7002      	strb	r2, [r0, #0]
    q->qty = 0;
1a001528:	2300      	movs	r3, #0
1a00152a:	7043      	strb	r3, [r0, #1]
    q->pend = (void * *)&sstart[ssize];
1a00152c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
1a001530:	6101      	str	r1, [r0, #16]
    q->sma = (const struct RKH_SMA_T *)sma;
1a001532:	6146      	str	r6, [r0, #20]
#endif
#if RKH_CFG_QUE_GET_INFO_EN == RKH_ENABLED
    q->rqi.nputs = q->rqi.ngets = q->rqi.nreads = q->rqi.nempty = 
                                                  q->rqi.nfull = 0;
#endif
    RKH_TR_QUE_INIT(q, (const struct RKH_SMA_T *)sma, ssize);
1a001534:	2020      	movs	r0, #32
1a001536:	f000 fc87 	bl	1a001e48 <rkh_trc_isoff_>
1a00153a:	b900      	cbnz	r0, 1a00153e <rkh_queue_init+0x26>
1a00153c:	bd70      	pop	{r4, r5, r6, pc}
1a00153e:	f7ff ffd3 	bl	1a0014e8 <rkhport_enter_critical>
1a001542:	2020      	movs	r0, #32
1a001544:	f000 fd2e 	bl	1a001fa4 <rkh_trc_begin>
1a001548:	4620      	mov	r0, r4
1a00154a:	f000 fd1a 	bl	1a001f82 <rkh_trc_u32>
1a00154e:	4630      	mov	r0, r6
1a001550:	f000 fd17 	bl	1a001f82 <rkh_trc_u32>
1a001554:	4628      	mov	r0, r5
1a001556:	f000 fce5 	bl	1a001f24 <rkh_trc_u8>
1a00155a:	f000 fcfb 	bl	1a001f54 <rkh_trc_end>
1a00155e:	f7ff ffcf 	bl	1a001500 <rkhport_exit_critical>
}
1a001562:	e7eb      	b.n	1a00153c <rkh_queue_init+0x24>

1a001564 <rkh_queue_get>:
}
#endif

void *
rkh_queue_get(RKH_QUEUE_T *q)
{
1a001564:	b538      	push	{r3, r4, r5, lr}
    void *e = CV(0);
    RKH_SR_ALLOC();

    RKH_ASSERT(q != CQ(0));
1a001566:	4604      	mov	r4, r0
1a001568:	b1d8      	cbz	r0, 1a0015a2 <rkh_queue_get+0x3e>
    RKH_ENTER_CRITICAL_();
1a00156a:	f7ff ffbd 	bl	1a0014e8 <rkhport_enter_critical>

    if (q->sma != CSMA(0))
1a00156e:	6960      	ldr	r0, [r4, #20]
1a001570:	b1e0      	cbz	r0, 1a0015ac <rkh_queue_get+0x48>
    {
        rkh_sma_block((RKH_SMA_T *)(q->sma));
1a001572:	f000 fadb 	bl	1a001b2c <rkh_sma_block>
        RKH_IUPDT_EMPTY(q);
        RKH_EXIT_CRITICAL_();
        return e;
    }

    e = *q->pout++;
1a001576:	6863      	ldr	r3, [r4, #4]
1a001578:	1d1a      	adds	r2, r3, #4
1a00157a:	6062      	str	r2, [r4, #4]
1a00157c:	681d      	ldr	r5, [r3, #0]
    --q->qty;
1a00157e:	7863      	ldrb	r3, [r4, #1]
1a001580:	3b01      	subs	r3, #1
1a001582:	b2db      	uxtb	r3, r3
1a001584:	7063      	strb	r3, [r4, #1]

    if (q->pout == q->pend)
1a001586:	6921      	ldr	r1, [r4, #16]
1a001588:	428a      	cmp	r2, r1
1a00158a:	d016      	beq.n	1a0015ba <rkh_queue_get+0x56>
        q->pout = (void * *)q->pstart;
    }

    RKH_IUPDT_GET(q);

    if ((q->sma != CSMA(0)) && (q->qty == 0))
1a00158c:	6960      	ldr	r0, [r4, #20]
1a00158e:	b100      	cbz	r0, 1a001592 <rkh_queue_get+0x2e>
1a001590:	b1b3      	cbz	r3, 1a0015c0 <rkh_queue_get+0x5c>
        RKH_TR_QUE_GET_LAST(q);
        RKH_EXIT_CRITICAL_();
    }
    else
    {
        RKH_TR_QUE_GET(q, q->qty);
1a001592:	2021      	movs	r0, #33	; 0x21
1a001594:	f000 fc58 	bl	1a001e48 <rkh_trc_isoff_>
1a001598:	bb20      	cbnz	r0, 1a0015e4 <rkh_queue_get+0x80>
        RKH_EXIT_CRITICAL_();
1a00159a:	f7ff ffb1 	bl	1a001500 <rkhport_exit_critical>
    }
    return e;
}
1a00159e:	4628      	mov	r0, r5
1a0015a0:	bd38      	pop	{r3, r4, r5, pc}
    RKH_ASSERT(q != CQ(0));
1a0015a2:	21a4      	movs	r1, #164	; 0xa4
1a0015a4:	4815      	ldr	r0, [pc, #84]	; (1a0015fc <rkh_queue_get+0x98>)
1a0015a6:	f7fe ff27 	bl	1a0003f8 <rkh_assert>
1a0015aa:	e7de      	b.n	1a00156a <rkh_queue_get+0x6>
    else if (q->qty == 0)
1a0015ac:	7863      	ldrb	r3, [r4, #1]
1a0015ae:	2b00      	cmp	r3, #0
1a0015b0:	d1e1      	bne.n	1a001576 <rkh_queue_get+0x12>
        RKH_EXIT_CRITICAL_();
1a0015b2:	f7ff ffa5 	bl	1a001500 <rkhport_exit_critical>
        return e;
1a0015b6:	2500      	movs	r5, #0
1a0015b8:	e7f1      	b.n	1a00159e <rkh_queue_get+0x3a>
        q->pout = (void * *)q->pstart;
1a0015ba:	68e2      	ldr	r2, [r4, #12]
1a0015bc:	6062      	str	r2, [r4, #4]
1a0015be:	e7e5      	b.n	1a00158c <rkh_queue_get+0x28>
        rkh_sma_setUnready((RKH_SMA_T *)(q->sma));
1a0015c0:	f000 fac6 	bl	1a001b50 <rkh_sma_setUnready>
        RKH_TR_QUE_GET_LAST(q);
1a0015c4:	2026      	movs	r0, #38	; 0x26
1a0015c6:	f000 fc3f 	bl	1a001e48 <rkh_trc_isoff_>
1a0015ca:	b910      	cbnz	r0, 1a0015d2 <rkh_queue_get+0x6e>
        RKH_EXIT_CRITICAL_();
1a0015cc:	f7ff ff98 	bl	1a001500 <rkhport_exit_critical>
1a0015d0:	e7e5      	b.n	1a00159e <rkh_queue_get+0x3a>
        RKH_TR_QUE_GET_LAST(q);
1a0015d2:	2026      	movs	r0, #38	; 0x26
1a0015d4:	f000 fce6 	bl	1a001fa4 <rkh_trc_begin>
1a0015d8:	4620      	mov	r0, r4
1a0015da:	f000 fcd2 	bl	1a001f82 <rkh_trc_u32>
1a0015de:	f000 fcb9 	bl	1a001f54 <rkh_trc_end>
1a0015e2:	e7f3      	b.n	1a0015cc <rkh_queue_get+0x68>
        RKH_TR_QUE_GET(q, q->qty);
1a0015e4:	2021      	movs	r0, #33	; 0x21
1a0015e6:	f000 fcdd 	bl	1a001fa4 <rkh_trc_begin>
1a0015ea:	4620      	mov	r0, r4
1a0015ec:	f000 fcc9 	bl	1a001f82 <rkh_trc_u32>
1a0015f0:	7860      	ldrb	r0, [r4, #1]
1a0015f2:	f000 fc97 	bl	1a001f24 <rkh_trc_u8>
1a0015f6:	f000 fcad 	bl	1a001f54 <rkh_trc_end>
1a0015fa:	e7ce      	b.n	1a00159a <rkh_queue_get+0x36>
1a0015fc:	1a0028ec 	.word	0x1a0028ec

1a001600 <rkh_queue_put_fifo>:

void
rkh_queue_put_fifo(RKH_QUEUE_T *q, const void *pe)
{
1a001600:	b538      	push	{r3, r4, r5, lr}
1a001602:	460d      	mov	r5, r1
    RKH_SR_ALLOC();

    RKH_ASSERT(q != CQ(0) && pe != (const void *)0);
1a001604:	4604      	mov	r4, r0
1a001606:	b1e0      	cbz	r0, 1a001642 <rkh_queue_put_fifo+0x42>
1a001608:	b1d9      	cbz	r1, 1a001642 <rkh_queue_put_fifo+0x42>
    /*RKH_ENTER_CRITICAL_();*/
    RKH_ASSERT(q->qty < q->nelems);
1a00160a:	7862      	ldrb	r2, [r4, #1]
1a00160c:	7823      	ldrb	r3, [r4, #0]
1a00160e:	429a      	cmp	r2, r3
1a001610:	d21c      	bcs.n	1a00164c <rkh_queue_put_fifo+0x4c>

    if (q->qty >= q->nelems)
1a001612:	7862      	ldrb	r2, [r4, #1]
1a001614:	7823      	ldrb	r3, [r4, #0]
1a001616:	429a      	cmp	r2, r3
1a001618:	d21d      	bcs.n	1a001656 <rkh_queue_put_fifo+0x56>
        RKH_TR_QUE_FULL(q);
        /*RKH_EXIT_CRITICAL_();*/
        return;
    }

    *q->pin++ = (char *)pe;
1a00161a:	68a3      	ldr	r3, [r4, #8]
1a00161c:	1d1a      	adds	r2, r3, #4
1a00161e:	60a2      	str	r2, [r4, #8]
1a001620:	601d      	str	r5, [r3, #0]
    ++q->qty;
1a001622:	7863      	ldrb	r3, [r4, #1]
1a001624:	3301      	adds	r3, #1
1a001626:	7063      	strb	r3, [r4, #1]

    if (q->pin == q->pend)
1a001628:	68a2      	ldr	r2, [r4, #8]
1a00162a:	6923      	ldr	r3, [r4, #16]
1a00162c:	429a      	cmp	r2, r3
1a00162e:	d020      	beq.n	1a001672 <rkh_queue_put_fifo+0x72>
    {
        q->pin = (void * *)q->pstart;
    }

    if (q->sma != CSMA(0))
1a001630:	6960      	ldr	r0, [r4, #20]
1a001632:	b108      	cbz	r0, 1a001638 <rkh_queue_put_fifo+0x38>
    {
        rkh_sma_setReady((RKH_SMA_T *)(q->sma));
1a001634:	f000 fa86 	bl	1a001b44 <rkh_sma_setReady>
        q->nmin = (RKH_QUENE_T)(q->nelems - q->qty);
    }
#endif
    RKH_IUPDT_PUT(q);
    /*RKH_EXIT_CRITICAL_();*/
    RKH_TR_QUE_FIFO(q, q->qty, q->nmin);
1a001638:	2022      	movs	r0, #34	; 0x22
1a00163a:	f000 fc05 	bl	1a001e48 <rkh_trc_isoff_>
1a00163e:	b9d8      	cbnz	r0, 1a001678 <rkh_queue_put_fifo+0x78>
1a001640:	bd38      	pop	{r3, r4, r5, pc}
    RKH_ASSERT(q != CQ(0) && pe != (const void *)0);
1a001642:	21cf      	movs	r1, #207	; 0xcf
1a001644:	4814      	ldr	r0, [pc, #80]	; (1a001698 <rkh_queue_put_fifo+0x98>)
1a001646:	f7fe fed7 	bl	1a0003f8 <rkh_assert>
1a00164a:	e7de      	b.n	1a00160a <rkh_queue_put_fifo+0xa>
    RKH_ASSERT(q->qty < q->nelems);
1a00164c:	21d1      	movs	r1, #209	; 0xd1
1a00164e:	4812      	ldr	r0, [pc, #72]	; (1a001698 <rkh_queue_put_fifo+0x98>)
1a001650:	f7fe fed2 	bl	1a0003f8 <rkh_assert>
1a001654:	e7dd      	b.n	1a001612 <rkh_queue_put_fifo+0x12>
        RKH_TR_QUE_FULL(q);
1a001656:	2024      	movs	r0, #36	; 0x24
1a001658:	f000 fbf6 	bl	1a001e48 <rkh_trc_isoff_>
1a00165c:	2800      	cmp	r0, #0
1a00165e:	d0ef      	beq.n	1a001640 <rkh_queue_put_fifo+0x40>
1a001660:	2024      	movs	r0, #36	; 0x24
1a001662:	f000 fc9f 	bl	1a001fa4 <rkh_trc_begin>
1a001666:	4620      	mov	r0, r4
1a001668:	f000 fc8b 	bl	1a001f82 <rkh_trc_u32>
1a00166c:	f000 fc72 	bl	1a001f54 <rkh_trc_end>
1a001670:	bd38      	pop	{r3, r4, r5, pc}
        q->pin = (void * *)q->pstart;
1a001672:	68e3      	ldr	r3, [r4, #12]
1a001674:	60a3      	str	r3, [r4, #8]
1a001676:	e7db      	b.n	1a001630 <rkh_queue_put_fifo+0x30>
    RKH_TR_QUE_FIFO(q, q->qty, q->nmin);
1a001678:	f7ff ff36 	bl	1a0014e8 <rkhport_enter_critical>
1a00167c:	2022      	movs	r0, #34	; 0x22
1a00167e:	f000 fc91 	bl	1a001fa4 <rkh_trc_begin>
1a001682:	4620      	mov	r0, r4
1a001684:	f000 fc7d 	bl	1a001f82 <rkh_trc_u32>
1a001688:	7860      	ldrb	r0, [r4, #1]
1a00168a:	f000 fc4b 	bl	1a001f24 <rkh_trc_u8>
1a00168e:	f000 fc61 	bl	1a001f54 <rkh_trc_end>
1a001692:	f7ff ff35 	bl	1a001500 <rkhport_exit_critical>
1a001696:	e7d3      	b.n	1a001640 <rkh_queue_put_fifo+0x40>
1a001698:	1a0028ec 	.word	0x1a0028ec

1a00169c <rkh_add_tr_action>:
}

static rbool_t
rkh_add_tr_action(RKH_TRN_ACT_T * *list, RKH_TRN_ACT_T act, rui8_t *num)
{
    if (*num >= RKH_CFG_SMA_MAX_TRC_SEGS)
1a00169c:	7813      	ldrb	r3, [r2, #0]
1a00169e:	2b01      	cmp	r3, #1
1a0016a0:	d901      	bls.n	1a0016a6 <rkh_add_tr_action+0xa>
    {
        return 1;
1a0016a2:	2001      	movs	r0, #1
1a0016a4:	4770      	bx	lr
    }

    if (act != CTA(0))
1a0016a6:	b149      	cbz	r1, 1a0016bc <rkh_add_tr_action+0x20>
    {
        **list = act;                       /* store a new transition action */
1a0016a8:	6803      	ldr	r3, [r0, #0]
1a0016aa:	6019      	str	r1, [r3, #0]
        ++(*list);                     /* increment the pointer to next slot */
1a0016ac:	6803      	ldr	r3, [r0, #0]
1a0016ae:	3304      	adds	r3, #4
1a0016b0:	6003      	str	r3, [r0, #0]
        ++(*num);            /* increment the counter of actions in the list */
1a0016b2:	7813      	ldrb	r3, [r2, #0]
1a0016b4:	3301      	adds	r3, #1
1a0016b6:	7013      	strb	r3, [r2, #0]
    }
    return 0;
1a0016b8:	2000      	movs	r0, #0
1a0016ba:	4770      	bx	lr
1a0016bc:	2000      	movs	r0, #0
}
1a0016be:	4770      	bx	lr

1a0016c0 <rkh_sm_init>:
#endif

/* ---------------------------- Global functions --------------------------- */
void
rkh_sm_init(RKH_SM_T *me)
{
1a0016c0:	b510      	push	{r4, lr}
#if RKH_CFG_SMA_HCAL_EN == RKH_ENABLED
    RKHROM RKH_ST_T *s;
#endif
    RKH_SR_ALLOC();

    RKH_ASSERT(me &&
1a0016c2:	4604      	mov	r4, r0
1a0016c4:	b160      	cbz	r0, 1a0016e0 <rkh_sm_init+0x20>
1a0016c6:	6803      	ldr	r3, [r0, #0]
1a0016c8:	689b      	ldr	r3, [r3, #8]
1a0016ca:	b14b      	cbz	r3, 1a0016e0 <rkh_sm_init+0x20>
               RKH_SMA_ACCESS_CONST(me, istate) != (RKHROM RKH_ST_T *)0);
    RKH_EXEC_INIT(me, RKH_SMA_ACCESS_CONST(me, iaction));
1a0016cc:	6823      	ldr	r3, [r4, #0]
1a0016ce:	68db      	ldr	r3, [r3, #12]
1a0016d0:	b12b      	cbz	r3, 1a0016de <rkh_sm_init+0x1e>
1a0016d2:	4620      	mov	r0, r4
1a0016d4:	4798      	blx	r3
1a0016d6:	2070      	movs	r0, #112	; 0x70
1a0016d8:	f000 fbb6 	bl	1a001e48 <rkh_trc_isoff_>
1a0016dc:	b930      	cbnz	r0, 1a0016ec <rkh_sm_init+0x2c>
1a0016de:	bd10      	pop	{r4, pc}
    RKH_ASSERT(me &&
1a0016e0:	f240 1173 	movw	r1, #371	; 0x173
1a0016e4:	4810      	ldr	r0, [pc, #64]	; (1a001728 <rkh_sm_init+0x68>)
1a0016e6:	f7fe fe87 	bl	1a0003f8 <rkh_assert>
1a0016ea:	e7ef      	b.n	1a0016cc <rkh_sm_init+0xc>
    RKH_EXEC_INIT(me, RKH_SMA_ACCESS_CONST(me, iaction));
1a0016ec:	6823      	ldr	r3, [r4, #0]
1a0016ee:	7819      	ldrb	r1, [r3, #0]
1a0016f0:	2002      	movs	r0, #2
1a0016f2:	f000 fbed 	bl	1a001ed0 <rkh_trc_symFil_isoff>
1a0016f6:	2800      	cmp	r0, #0
1a0016f8:	d0f1      	beq.n	1a0016de <rkh_sm_init+0x1e>
1a0016fa:	f7ff fef5 	bl	1a0014e8 <rkhport_enter_critical>
1a0016fe:	2070      	movs	r0, #112	; 0x70
1a001700:	f000 fc50 	bl	1a001fa4 <rkh_trc_begin>
1a001704:	2003      	movs	r0, #3
1a001706:	f000 fc0d 	bl	1a001f24 <rkh_trc_u8>
1a00170a:	4620      	mov	r0, r4
1a00170c:	f000 fc39 	bl	1a001f82 <rkh_trc_u32>
1a001710:	2000      	movs	r0, #0
1a001712:	f000 fc36 	bl	1a001f82 <rkh_trc_u32>
1a001716:	4620      	mov	r0, r4
1a001718:	f000 fc33 	bl	1a001f82 <rkh_trc_u32>
1a00171c:	f000 fc1a 	bl	1a001f54 <rkh_trc_end>
1a001720:	f7ff feee 	bl	1a001500 <rkhport_exit_critical>
        }
    }
    ((RKH_SM_T *)me)->state = s;
    rkh_update_deep_hist(((RKH_SM_T *)me)->state);
#endif
}
1a001724:	e7db      	b.n	1a0016de <rkh_sm_init+0x1e>
1a001726:	bf00      	nop
1a001728:	1a0028f8 	.word	0x1a0028f8

1a00172c <rkh_sm_dispatch>:
}
#endif

ruint
rkh_sm_dispatch(RKH_SM_T *me, RKH_EVT_T *pe)
{
1a00172c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001730:	460f      	mov	r7, r1
    RKH_RAM RKH_TRN_ACT_T *pal;
    /* # of executed transition actions */
    RKH_RAM rui8_t nal;
    RKH_SR_ALLOC();

    RKH_ASSERT(me && pe);
1a001732:	4606      	mov	r6, r0
1a001734:	b148      	cbz	r0, 1a00174a <rkh_sm_dispatch+0x1e>
1a001736:	b141      	cbz	r1, 1a00174a <rkh_sm_dispatch+0x1e>
    RKH_HOOK_DISPATCH(me, pe);

    do
    {
    /* ---- Stage 1 -------------------------------------------------------- */
    cs = ((RKH_SM_T *)me)->state;                      /* get current state */
1a001738:	f8d6 8004 	ldr.w	r8, [r6, #4]
            break;
        }
        /* UPDATE_IN_PARENT(stn); */
    }
#else
    stn = cs;
1a00173c:	4b58      	ldr	r3, [pc, #352]	; (1a0018a0 <rkh_sm_dispatch+0x174>)
1a00173e:	f8c3 8000 	str.w	r8, [r3]
    in = RKH_PROCESS_INPUT(stn, me, pe);
1a001742:	783d      	ldrb	r5, [r7, #0]
    FIND_TRN(me, pe, tr, CBSC(stn)->trtbl, in);
1a001744:	f8d8 4008 	ldr.w	r4, [r8, #8]
1a001748:	e006      	b.n	1a001758 <rkh_sm_dispatch+0x2c>
    RKH_ASSERT(me && pe);
1a00174a:	f240 11b7 	movw	r1, #439	; 0x1b7
1a00174e:	4855      	ldr	r0, [pc, #340]	; (1a0018a4 <rkh_sm_dispatch+0x178>)
1a001750:	f7fe fe52 	bl	1a0003f8 <rkh_assert>
1a001754:	e7f0      	b.n	1a001738 <rkh_sm_dispatch+0xc>
    FIND_TRN(me, pe, tr, CBSC(stn)->trtbl, in);
1a001756:	3410      	adds	r4, #16
1a001758:	7823      	ldrb	r3, [r4, #0]
1a00175a:	2bff      	cmp	r3, #255	; 0xff
1a00175c:	d008      	beq.n	1a001770 <rkh_sm_dispatch+0x44>
1a00175e:	429d      	cmp	r5, r3
1a001760:	d1f9      	bne.n	1a001756 <rkh_sm_dispatch+0x2a>
1a001762:	6863      	ldr	r3, [r4, #4]
1a001764:	b123      	cbz	r3, 1a001770 <rkh_sm_dispatch+0x44>
1a001766:	4639      	mov	r1, r7
1a001768:	4630      	mov	r0, r6
1a00176a:	4798      	blx	r3
1a00176c:	2801      	cmp	r0, #1
1a00176e:	d1f2      	bne.n	1a001756 <rkh_sm_dispatch+0x2a>
#endif

    RKH_TR_SM_DCH(me,                           /* this state machine object */
                  pe,                                               /* event */
                  cs);                                      /* current state */
    if (IS_NOT_FOUND_TRN(tr))                           /* transition taken? */
1a001770:	7823      	ldrb	r3, [r4, #0]
1a001772:	2bff      	cmp	r3, #255	; 0xff
1a001774:	f000 808e 	beq.w	1a001894 <rkh_sm_dispatch+0x168>
        RKH_TR_SM_EVT_NFOUND(me,                /* this state machine object */
                             pe);                                   /* event */
        return RKH_EVT_NFOUND;
    }

    ets = tr->target;       /* temporarily save the target of the transition */
1a001778:	68e5      	ldr	r5, [r4, #12]
    ts = CST(ets);

    nal = 0;                            /* initialize transition action list */
1a00177a:	4a4b      	ldr	r2, [pc, #300]	; (1a0018a8 <rkh_sm_dispatch+0x17c>)
1a00177c:	2300      	movs	r3, #0
1a00177e:	7013      	strb	r3, [r2, #0]
    pal = al;
1a001780:	484a      	ldr	r0, [pc, #296]	; (1a0018ac <rkh_sm_dispatch+0x180>)
1a001782:	4b4b      	ldr	r3, [pc, #300]	; (1a0018b0 <rkh_sm_dispatch+0x184>)
1a001784:	6003      	str	r3, [r0, #0]
    RKH_TR_SM_TRN(me,                           /* this state machine object */
                  stn,                            /* transition source state */
                  ts);                            /* transition target state */

    /* Add action of the transition segment in the list */
    if (rkh_add_tr_action(&pal, tr->action, &nal))
1a001786:	68a1      	ldr	r1, [r4, #8]
1a001788:	f7ff ff88 	bl	1a00169c <rkh_add_tr_action>
1a00178c:	b978      	cbnz	r0, 1a0017ae <rkh_sm_dispatch+0x82>

    if (IS_NOT_INTERNAL_TRANSITION())
    {
        ts = CST(ets);                 /* finally, set the main target state */
    }
    if (IS_NOT_INTERNAL_TRANSITION())
1a00178e:	b155      	cbz	r5, 1a0017a6 <rkh_sm_dispatch+0x7a>
        /* first of all, find the LCA then */
        /* perform the exit actions of the exited states according */
        /* to the order states are exited, from low state to high state, */
        /* update histories of exited states, */
        /* and, generate the set of entered states */
        RKH_EXEC_EXIT_ACTION(cs, ts, me, nn);
1a001790:	ebb8 0805 	subs.w	r8, r8, r5
1a001794:	bf18      	it	ne
1a001796:	f04f 0801 	movne.w	r8, #1
1a00179a:	4b46      	ldr	r3, [pc, #280]	; (1a0018b4 <rkh_sm_dispatch+0x188>)
1a00179c:	f883 8000 	strb.w	r8, [r3]
1a0017a0:	4b45      	ldr	r3, [pc, #276]	; (1a0018b8 <rkh_sm_dispatch+0x18c>)
1a0017a2:	f883 8000 	strb.w	r8, [r3]
    /* the transition, from the action closest to source */
    /* state to the action closest to target state. */
    RKH_TR_SM_NTRNACT(me,                      /* this state machine object */
                      nal,                             /* # executed actions */
                      RKH_GET_STEP());              /* # transition segments */
    RKH_EXEC_TRANSITION(me, pe);
1a0017a6:	4a42      	ldr	r2, [pc, #264]	; (1a0018b0 <rkh_sm_dispatch+0x184>)
1a0017a8:	4b40      	ldr	r3, [pc, #256]	; (1a0018ac <rkh_sm_dispatch+0x180>)
1a0017aa:	601a      	str	r2, [r3, #0]
1a0017ac:	e00f      	b.n	1a0017ce <rkh_sm_dispatch+0xa2>
        RKH_ERROR();
1a0017ae:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
1a0017b2:	483c      	ldr	r0, [pc, #240]	; (1a0018a4 <rkh_sm_dispatch+0x178>)
1a0017b4:	f7fe fe20 	bl	1a0003f8 <rkh_assert>
        return RKH_EX_TSEG;
1a0017b8:	2006      	movs	r0, #6
1a0017ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RKH_EXEC_TRANSITION(me, pe);
1a0017be:	4a3b      	ldr	r2, [pc, #236]	; (1a0018ac <rkh_sm_dispatch+0x180>)
1a0017c0:	6813      	ldr	r3, [r2, #0]
1a0017c2:	3304      	adds	r3, #4
1a0017c4:	6013      	str	r3, [r2, #0]
1a0017c6:	4a38      	ldr	r2, [pc, #224]	; (1a0018a8 <rkh_sm_dispatch+0x17c>)
1a0017c8:	7813      	ldrb	r3, [r2, #0]
1a0017ca:	3b01      	subs	r3, #1
1a0017cc:	7013      	strb	r3, [r2, #0]
1a0017ce:	4b36      	ldr	r3, [pc, #216]	; (1a0018a8 <rkh_sm_dispatch+0x17c>)
1a0017d0:	781b      	ldrb	r3, [r3, #0]
1a0017d2:	b34b      	cbz	r3, 1a001828 <rkh_sm_dispatch+0xfc>
1a0017d4:	4b35      	ldr	r3, [pc, #212]	; (1a0018ac <rkh_sm_dispatch+0x180>)
1a0017d6:	681b      	ldr	r3, [r3, #0]
1a0017d8:	681b      	ldr	r3, [r3, #0]
1a0017da:	4639      	mov	r1, r7
1a0017dc:	4630      	mov	r0, r6
1a0017de:	4798      	blx	r3
1a0017e0:	2070      	movs	r0, #112	; 0x70
1a0017e2:	f000 fb31 	bl	1a001e48 <rkh_trc_isoff_>
1a0017e6:	2800      	cmp	r0, #0
1a0017e8:	d0e9      	beq.n	1a0017be <rkh_sm_dispatch+0x92>
1a0017ea:	6833      	ldr	r3, [r6, #0]
1a0017ec:	7819      	ldrb	r1, [r3, #0]
1a0017ee:	2002      	movs	r0, #2
1a0017f0:	f000 fb6e 	bl	1a001ed0 <rkh_trc_symFil_isoff>
1a0017f4:	2800      	cmp	r0, #0
1a0017f6:	d0e2      	beq.n	1a0017be <rkh_sm_dispatch+0x92>
1a0017f8:	f7ff fe76 	bl	1a0014e8 <rkhport_enter_critical>
1a0017fc:	2070      	movs	r0, #112	; 0x70
1a0017fe:	f000 fbd1 	bl	1a001fa4 <rkh_trc_begin>
1a001802:	2000      	movs	r0, #0
1a001804:	f000 fb8e 	bl	1a001f24 <rkh_trc_u8>
1a001808:	4630      	mov	r0, r6
1a00180a:	f000 fbba 	bl	1a001f82 <rkh_trc_u32>
1a00180e:	6870      	ldr	r0, [r6, #4]
1a001810:	f000 fbb7 	bl	1a001f82 <rkh_trc_u32>
1a001814:	4b25      	ldr	r3, [pc, #148]	; (1a0018ac <rkh_sm_dispatch+0x180>)
1a001816:	681b      	ldr	r3, [r3, #0]
1a001818:	6818      	ldr	r0, [r3, #0]
1a00181a:	f000 fbb2 	bl	1a001f82 <rkh_trc_u32>
1a00181e:	f000 fb99 	bl	1a001f54 <rkh_trc_end>
1a001822:	f7ff fe6d 	bl	1a001500 <rkhport_exit_critical>
1a001826:	e7ca      	b.n	1a0017be <rkh_sm_dispatch+0x92>
1a001828:	4a21      	ldr	r2, [pc, #132]	; (1a0018b0 <rkh_sm_dispatch+0x184>)
1a00182a:	4b20      	ldr	r3, [pc, #128]	; (1a0018ac <rkh_sm_dispatch+0x180>)
1a00182c:	601a      	str	r2, [r3, #0]

    if (IS_NOT_INTERNAL_TRANSITION())
1a00182e:	2d00      	cmp	r5, #0
1a001830:	d033      	beq.n	1a00189a <rkh_sm_dispatch+0x16e>
        /* from high state to low state. */
        /* For lowest level states that were entered, which are not */
        /* basic states, perform default transitions (recursively) */
        /* until the statechart reaches basic states. */
        /* Also, update 'stn' with the target state */
        RKH_EXEC_ENTRY_ACTION(nn, me, stn, snl, ix_n);
1a001832:	4b21      	ldr	r3, [pc, #132]	; (1a0018b8 <rkh_sm_dispatch+0x18c>)
1a001834:	781a      	ldrb	r2, [r3, #0]
1a001836:	4b1f      	ldr	r3, [pc, #124]	; (1a0018b4 <rkh_sm_dispatch+0x188>)
1a001838:	781b      	ldrb	r3, [r3, #0]
1a00183a:	429a      	cmp	r2, r3
1a00183c:	d00b      	beq.n	1a001856 <rkh_sm_dispatch+0x12a>
1a00183e:	4b18      	ldr	r3, [pc, #96]	; (1a0018a0 <rkh_sm_dispatch+0x174>)
1a001840:	601d      	str	r5, [r3, #0]
 
        /* ---- Stage 7 ---------------------------------------------------- */
        /* update deep history */
        rkh_update_deep_hist(CST(stn));
        /* ---- Stage 8 ---------------------------------------------------- */
        ((RKH_SM_T *)me)->state = CST(stn);     /* update the current state */
1a001842:	4b17      	ldr	r3, [pc, #92]	; (1a0018a0 <rkh_sm_dispatch+0x174>)
1a001844:	681b      	ldr	r3, [r3, #0]
1a001846:	6073      	str	r3, [r6, #4]
        RKH_TR_SM_STATE(me,                    /* this state machine object */
1a001848:	2063      	movs	r0, #99	; 0x63
1a00184a:	f000 fafd 	bl	1a001e48 <rkh_trc_isoff_>
1a00184e:	b928      	cbnz	r0, 1a00185c <rkh_sm_dispatch+0x130>

    RKH_TR_SM_EVT_PROC(me);
    } while (isCompletionEvent);

    INFO_EXEC_TRS(me);
    return RKH_EVT_PROC;
1a001850:	2000      	movs	r0, #0
1a001852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        RKH_EXEC_ENTRY_ACTION(nn, me, stn, snl, ix_n);
1a001856:	2b00      	cmp	r3, #0
1a001858:	d0f3      	beq.n	1a001842 <rkh_sm_dispatch+0x116>
1a00185a:	e7f0      	b.n	1a00183e <rkh_sm_dispatch+0x112>
        RKH_TR_SM_STATE(me,                    /* this state machine object */
1a00185c:	6833      	ldr	r3, [r6, #0]
1a00185e:	7819      	ldrb	r1, [r3, #0]
1a001860:	2002      	movs	r0, #2
1a001862:	f000 fb35 	bl	1a001ed0 <rkh_trc_symFil_isoff>
1a001866:	b910      	cbnz	r0, 1a00186e <rkh_sm_dispatch+0x142>
    return RKH_EVT_PROC;
1a001868:	2000      	movs	r0, #0
}
1a00186a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        RKH_TR_SM_STATE(me,                    /* this state machine object */
1a00186e:	f7ff fe3b 	bl	1a0014e8 <rkhport_enter_critical>
1a001872:	2063      	movs	r0, #99	; 0x63
1a001874:	f000 fb96 	bl	1a001fa4 <rkh_trc_begin>
1a001878:	4630      	mov	r0, r6
1a00187a:	f000 fb82 	bl	1a001f82 <rkh_trc_u32>
1a00187e:	4b08      	ldr	r3, [pc, #32]	; (1a0018a0 <rkh_sm_dispatch+0x174>)
1a001880:	6818      	ldr	r0, [r3, #0]
1a001882:	f000 fb7e 	bl	1a001f82 <rkh_trc_u32>
1a001886:	f000 fb65 	bl	1a001f54 <rkh_trc_end>
1a00188a:	f7ff fe39 	bl	1a001500 <rkhport_exit_critical>
    return RKH_EVT_PROC;
1a00188e:	2000      	movs	r0, #0
1a001890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return RKH_EVT_NFOUND;
1a001894:	2001      	movs	r0, #1
1a001896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return RKH_EVT_PROC;
1a00189a:	2000      	movs	r0, #0
1a00189c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0018a0:	100000ac 	.word	0x100000ac
1a0018a4:	1a0028f8 	.word	0x1a0028f8
1a0018a8:	100000a6 	.word	0x100000a6
1a0018ac:	100000a8 	.word	0x100000a8
1a0018b0:	1000009c 	.word	0x1000009c
1a0018b4:	100000a5 	.word	0x100000a5
1a0018b8:	100000a4 	.word	0x100000a4

1a0018bc <rkh_sma_register>:
/* ----------------------- Local function prototypes ----------------------- */
/* ---------------------------- Local functions ---------------------------- */
/* ---------------------------- Global functions --------------------------- */
void
rkh_sma_register(RKH_SMA_T *sma)
{
1a0018bc:	b538      	push	{r3, r4, r5, lr}
1a0018be:	4605      	mov	r5, r0
    rui8_t prio = RKH_GET_PRIO(sma);
1a0018c0:	6803      	ldr	r3, [r0, #0]
1a0018c2:	781c      	ldrb	r4, [r3, #0]
    RKH_SR_ALLOC();

    RKH_REQUIRE((prio <= (rui8_t)RKH_LOWEST_PRIO) &&
1a0018c4:	2c01      	cmp	r4, #1
1a0018c6:	d90f      	bls.n	1a0018e8 <rkh_sma_register+0x2c>
1a0018c8:	2162      	movs	r1, #98	; 0x62
1a0018ca:	4814      	ldr	r0, [pc, #80]	; (1a00191c <rkh_sma_register+0x60>)
1a0018cc:	f7fe fd94 	bl	1a0003f8 <rkh_assert>
                (rkh_sptbl[prio] == (RKH_SMA_T *)0));

    RKH_ENTER_CRITICAL_();
1a0018d0:	f7ff fe0a 	bl	1a0014e8 <rkhport_enter_critical>
    rkh_sptbl[prio] = sma;
1a0018d4:	4b12      	ldr	r3, [pc, #72]	; (1a001920 <rkh_sma_register+0x64>)
1a0018d6:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    RKH_TR_SMA_REG(sma, prio);
1a0018da:	2045      	movs	r0, #69	; 0x45
1a0018dc:	f000 fab4 	bl	1a001e48 <rkh_trc_isoff_>
1a0018e0:	b940      	cbnz	r0, 1a0018f4 <rkh_sma_register+0x38>
    RKH_EXIT_CRITICAL_();
1a0018e2:	f7ff fe0d 	bl	1a001500 <rkhport_exit_critical>
1a0018e6:	bd38      	pop	{r3, r4, r5, pc}
    RKH_REQUIRE((prio <= (rui8_t)RKH_LOWEST_PRIO) &&
1a0018e8:	4b0d      	ldr	r3, [pc, #52]	; (1a001920 <rkh_sma_register+0x64>)
1a0018ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0018ee:	2b00      	cmp	r3, #0
1a0018f0:	d1ea      	bne.n	1a0018c8 <rkh_sma_register+0xc>
1a0018f2:	e7ed      	b.n	1a0018d0 <rkh_sma_register+0x14>
    RKH_TR_SMA_REG(sma, prio);
1a0018f4:	682b      	ldr	r3, [r5, #0]
1a0018f6:	7819      	ldrb	r1, [r3, #0]
1a0018f8:	2002      	movs	r0, #2
1a0018fa:	f000 fae9 	bl	1a001ed0 <rkh_trc_symFil_isoff>
1a0018fe:	2800      	cmp	r0, #0
1a001900:	d0ef      	beq.n	1a0018e2 <rkh_sma_register+0x26>
1a001902:	2045      	movs	r0, #69	; 0x45
1a001904:	f000 fb4e 	bl	1a001fa4 <rkh_trc_begin>
1a001908:	4628      	mov	r0, r5
1a00190a:	f000 fb3a 	bl	1a001f82 <rkh_trc_u32>
1a00190e:	4620      	mov	r0, r4
1a001910:	f000 fb08 	bl	1a001f24 <rkh_trc_u8>
1a001914:	f000 fb1e 	bl	1a001f54 <rkh_trc_end>
1a001918:	e7e3      	b.n	1a0018e2 <rkh_sma_register+0x26>
1a00191a:	bf00      	nop
1a00191c:	1a002900 	.word	0x1a002900
1a001920:	10000178 	.word	0x10000178

1a001924 <rkh_sma_activate>:
}

void
rkh_sma_activate(RKH_SMA_T *sma, const RKH_EVT_T * *qs, RKH_QUENE_T qsize,
                 void *stks, rui32_t stksize)
{
1a001924:	b570      	push	{r4, r5, r6, lr}
1a001926:	4604      	mov	r4, r0
1a001928:	4615      	mov	r5, r2
    (void)stks;
    (void)stksize;
    RKH_SR_ALLOC();

    RKH_REQUIRE((qs != (const RKH_EVT_T * *)0) && (qsize != (RKH_QUENE_T)0));
1a00192a:	460e      	mov	r6, r1
1a00192c:	b101      	cbz	r1, 1a001930 <rkh_sma_activate+0xc>
1a00192e:	b91a      	cbnz	r2, 1a001938 <rkh_sma_activate+0x14>
1a001930:	2199      	movs	r1, #153	; 0x99
1a001932:	4818      	ldr	r0, [pc, #96]	; (1a001994 <rkh_sma_activate+0x70>)
1a001934:	f7fe fd60 	bl	1a0003f8 <rkh_assert>

    rkh_queue_init(&sma->equeue, (const void * *)qs, qsize, sma);
1a001938:	4623      	mov	r3, r4
1a00193a:	462a      	mov	r2, r5
1a00193c:	4631      	mov	r1, r6
1a00193e:	f104 0008 	add.w	r0, r4, #8
1a001942:	f7ff fde9 	bl	1a001518 <rkh_queue_init>
    rkh_sma_register(sma);
1a001946:	4620      	mov	r0, r4
1a001948:	f7ff ffb8 	bl	1a0018bc <rkh_sma_register>
    rkh_sm_init((RKH_SM_T *)sma);
1a00194c:	4620      	mov	r0, r4
1a00194e:	f7ff feb7 	bl	1a0016c0 <rkh_sm_init>
    RKH_TR_SMA_ACT(sma, RKH_GET_PRIO(sma), qsize);
1a001952:	2040      	movs	r0, #64	; 0x40
1a001954:	f000 fa78 	bl	1a001e48 <rkh_trc_isoff_>
1a001958:	b900      	cbnz	r0, 1a00195c <rkh_sma_activate+0x38>
1a00195a:	bd70      	pop	{r4, r5, r6, pc}
1a00195c:	6823      	ldr	r3, [r4, #0]
1a00195e:	7819      	ldrb	r1, [r3, #0]
1a001960:	2002      	movs	r0, #2
1a001962:	f000 fab5 	bl	1a001ed0 <rkh_trc_symFil_isoff>
1a001966:	2800      	cmp	r0, #0
1a001968:	d0f7      	beq.n	1a00195a <rkh_sma_activate+0x36>
1a00196a:	f7ff fdbd 	bl	1a0014e8 <rkhport_enter_critical>
1a00196e:	2040      	movs	r0, #64	; 0x40
1a001970:	f000 fb18 	bl	1a001fa4 <rkh_trc_begin>
1a001974:	4620      	mov	r0, r4
1a001976:	f000 fb04 	bl	1a001f82 <rkh_trc_u32>
1a00197a:	6823      	ldr	r3, [r4, #0]
1a00197c:	7818      	ldrb	r0, [r3, #0]
1a00197e:	f000 fad1 	bl	1a001f24 <rkh_trc_u8>
1a001982:	4628      	mov	r0, r5
1a001984:	f000 face 	bl	1a001f24 <rkh_trc_u8>
1a001988:	f000 fae4 	bl	1a001f54 <rkh_trc_end>
1a00198c:	f7ff fdb8 	bl	1a001500 <rkhport_exit_critical>
}
1a001990:	e7e3      	b.n	1a00195a <rkh_sma_activate+0x36>
1a001992:	bf00      	nop
1a001994:	1a002900 	.word	0x1a002900

1a001998 <rkh_sma_post_fifo>:
rkh_sma_post_fifo(RKH_SMA_T *sma, const RKH_EVT_T *e,
                  const void *const sender)
#else
rkh_sma_post_fifo(RKH_SMA_T * sma, const RKH_EVT_T * e)
#endif
{
1a001998:	b538      	push	{r3, r4, r5, lr}
1a00199a:	4605      	mov	r5, r0
1a00199c:	460c      	mov	r4, r1
    RKH_SR_ALLOC();

    RKH_HOOK_SIGNAL(e);
    RKH_ENTER_CRITICAL_();
1a00199e:	f7ff fda3 	bl	1a0014e8 <rkhport_enter_critical>

    RKH_INC_REF(e);
    rkh_queue_put_fifo(&sma->equeue, e);
1a0019a2:	4621      	mov	r1, r4
1a0019a4:	f105 0008 	add.w	r0, r5, #8
1a0019a8:	f7ff fe2a 	bl	1a001600 <rkh_queue_put_fifo>
    RKH_TR_SMA_FIFO(sma, e, sender, e->pool, e->nref, sma->equeue.qty, 
1a0019ac:	2043      	movs	r0, #67	; 0x43
1a0019ae:	f000 fa4b 	bl	1a001e48 <rkh_trc_isoff_>
1a0019b2:	b910      	cbnz	r0, 1a0019ba <rkh_sma_post_fifo+0x22>
                    RKH_SMA_GET_NMIN(sma));

    RKH_EXIT_CRITICAL_();
1a0019b4:	f7ff fda4 	bl	1a001500 <rkhport_exit_critical>
1a0019b8:	bd38      	pop	{r3, r4, r5, pc}
    RKH_TR_SMA_FIFO(sma, e, sender, e->pool, e->nref, sma->equeue.qty, 
1a0019ba:	682b      	ldr	r3, [r5, #0]
1a0019bc:	7819      	ldrb	r1, [r3, #0]
1a0019be:	2002      	movs	r0, #2
1a0019c0:	f000 fa86 	bl	1a001ed0 <rkh_trc_symFil_isoff>
1a0019c4:	2800      	cmp	r0, #0
1a0019c6:	d0f5      	beq.n	1a0019b4 <rkh_sma_post_fifo+0x1c>
1a0019c8:	7821      	ldrb	r1, [r4, #0]
1a0019ca:	29fe      	cmp	r1, #254	; 0xfe
1a0019cc:	d004      	beq.n	1a0019d8 <rkh_sma_post_fifo+0x40>
1a0019ce:	2001      	movs	r0, #1
1a0019d0:	f000 fa7e 	bl	1a001ed0 <rkh_trc_symFil_isoff>
1a0019d4:	2800      	cmp	r0, #0
1a0019d6:	d0ed      	beq.n	1a0019b4 <rkh_sma_post_fifo+0x1c>
1a0019d8:	2043      	movs	r0, #67	; 0x43
1a0019da:	f000 fae3 	bl	1a001fa4 <rkh_trc_begin>
1a0019de:	4628      	mov	r0, r5
1a0019e0:	f000 facf 	bl	1a001f82 <rkh_trc_u32>
1a0019e4:	7820      	ldrb	r0, [r4, #0]
1a0019e6:	f000 fa9d 	bl	1a001f24 <rkh_trc_u8>
1a0019ea:	78a0      	ldrb	r0, [r4, #2]
1a0019ec:	f000 fa9a 	bl	1a001f24 <rkh_trc_u8>
1a0019f0:	7860      	ldrb	r0, [r4, #1]
1a0019f2:	f000 fa97 	bl	1a001f24 <rkh_trc_u8>
1a0019f6:	7a68      	ldrb	r0, [r5, #9]
1a0019f8:	f000 fa94 	bl	1a001f24 <rkh_trc_u8>
1a0019fc:	f000 faaa 	bl	1a001f54 <rkh_trc_end>
1a001a00:	e7d8      	b.n	1a0019b4 <rkh_sma_post_fifo+0x1c>
1a001a02:	Address 0x1a001a02 is out of bounds.


1a001a04 <rkh_sma_get>:
#endif

#if RKH_CFGPORT_NATIVE_EQUEUE_EN == RKH_ENABLED
RKH_EVT_T *
rkh_sma_get(RKH_SMA_T *sma)
{
1a001a04:	b538      	push	{r3, r4, r5, lr}
1a001a06:	4605      	mov	r5, r0
    RKH_EVT_T *e;
    RKH_SR_ALLOC();

    e = rkh_queue_get(&sma->equeue);
1a001a08:	3008      	adds	r0, #8
1a001a0a:	f7ff fdab 	bl	1a001564 <rkh_queue_get>

    RKH_ASSERT(e != (RKH_EVT_T *)0);
1a001a0e:	4604      	mov	r4, r0
1a001a10:	b128      	cbz	r0, 1a001a1e <rkh_sma_get+0x1a>
    /* Because the variables are obtained outside critical section could be */
    /* a race condition */
    RKH_TR_SMA_GET(sma, e, e->pool, e->nref, 
1a001a12:	2042      	movs	r0, #66	; 0x42
1a001a14:	f000 fa18 	bl	1a001e48 <rkh_trc_isoff_>
1a001a18:	b930      	cbnz	r0, 1a001a28 <rkh_sma_get+0x24>
                   sma->equeue.qty, RKH_SMA_GET_NMIN(sma));
    return e;
}
1a001a1a:	4620      	mov	r0, r4
1a001a1c:	bd38      	pop	{r3, r4, r5, pc}
    RKH_ASSERT(e != (RKH_EVT_T *)0);
1a001a1e:	21da      	movs	r1, #218	; 0xda
1a001a20:	4815      	ldr	r0, [pc, #84]	; (1a001a78 <rkh_sma_get+0x74>)
1a001a22:	f7fe fce9 	bl	1a0003f8 <rkh_assert>
1a001a26:	e7f4      	b.n	1a001a12 <rkh_sma_get+0xe>
    RKH_TR_SMA_GET(sma, e, e->pool, e->nref, 
1a001a28:	682b      	ldr	r3, [r5, #0]
1a001a2a:	7819      	ldrb	r1, [r3, #0]
1a001a2c:	2002      	movs	r0, #2
1a001a2e:	f000 fa4f 	bl	1a001ed0 <rkh_trc_symFil_isoff>
1a001a32:	2800      	cmp	r0, #0
1a001a34:	d0f1      	beq.n	1a001a1a <rkh_sma_get+0x16>
1a001a36:	7821      	ldrb	r1, [r4, #0]
1a001a38:	29fe      	cmp	r1, #254	; 0xfe
1a001a3a:	d004      	beq.n	1a001a46 <rkh_sma_get+0x42>
1a001a3c:	2001      	movs	r0, #1
1a001a3e:	f000 fa47 	bl	1a001ed0 <rkh_trc_symFil_isoff>
1a001a42:	2800      	cmp	r0, #0
1a001a44:	d0e9      	beq.n	1a001a1a <rkh_sma_get+0x16>
1a001a46:	f7ff fd4f 	bl	1a0014e8 <rkhport_enter_critical>
1a001a4a:	2042      	movs	r0, #66	; 0x42
1a001a4c:	f000 faaa 	bl	1a001fa4 <rkh_trc_begin>
1a001a50:	4628      	mov	r0, r5
1a001a52:	f000 fa96 	bl	1a001f82 <rkh_trc_u32>
1a001a56:	7820      	ldrb	r0, [r4, #0]
1a001a58:	f000 fa64 	bl	1a001f24 <rkh_trc_u8>
1a001a5c:	78a0      	ldrb	r0, [r4, #2]
1a001a5e:	f000 fa61 	bl	1a001f24 <rkh_trc_u8>
1a001a62:	7860      	ldrb	r0, [r4, #1]
1a001a64:	f000 fa5e 	bl	1a001f24 <rkh_trc_u8>
1a001a68:	7a68      	ldrb	r0, [r5, #9]
1a001a6a:	f000 fa5b 	bl	1a001f24 <rkh_trc_u8>
1a001a6e:	f000 fa71 	bl	1a001f54 <rkh_trc_end>
1a001a72:	f7ff fd45 	bl	1a001500 <rkhport_exit_critical>
    return e;
1a001a76:	e7d0      	b.n	1a001a1a <rkh_sma_get+0x16>
1a001a78:	1a002900 	.word	0x1a002900

1a001a7c <rkh_smaPrio_isReady>:
}

rbool_t 
rkh_smaPrio_isReady(void)
{
    return readyGroup.grp != 0;
1a001a7c:	4b02      	ldr	r3, [pc, #8]	; (1a001a88 <rkh_smaPrio_isReady+0xc>)
1a001a7e:	7818      	ldrb	r0, [r3, #0]
}
1a001a80:	3000      	adds	r0, #0
1a001a82:	bf18      	it	ne
1a001a84:	2001      	movne	r0, #1
1a001a86:	4770      	bx	lr
1a001a88:	100000b0 	.word	0x100000b0

1a001a8c <rkh_smaPrio_setReady>:

void 
rkh_smaPrio_setReady(rui8_t prio)
{
1a001a8c:	b570      	push	{r4, r5, r6, lr}
1a001a8e:	4605      	mov	r5, r0
    RKH_REQUIRE(prio < RKH_CFG_FWK_MAX_SMA);
1a001a90:	2801      	cmp	r0, #1
1a001a92:	d903      	bls.n	1a001a9c <rkh_smaPrio_setReady+0x10>
1a001a94:	21ac      	movs	r1, #172	; 0xac
1a001a96:	480a      	ldr	r0, [pc, #40]	; (1a001ac0 <rkh_smaPrio_setReady+0x34>)
1a001a98:	f7fe fcae 	bl	1a0003f8 <rkh_assert>
    readyGroup.grp |= rkh_bittbl_getBitMask(prio >> 3);
1a001a9c:	08ee      	lsrs	r6, r5, #3
1a001a9e:	4630      	mov	r0, r6
1a001aa0:	f7ff fcd8 	bl	1a001454 <rkh_bittbl_getBitMask>
1a001aa4:	4c07      	ldr	r4, [pc, #28]	; (1a001ac4 <rkh_smaPrio_setReady+0x38>)
1a001aa6:	7823      	ldrb	r3, [r4, #0]
1a001aa8:	4318      	orrs	r0, r3
1a001aaa:	7020      	strb	r0, [r4, #0]
    readyGroup.tbl[prio >> 3] |= rkh_bittbl_getBitMask(prio & 0x07);
1a001aac:	f005 0007 	and.w	r0, r5, #7
1a001ab0:	f7ff fcd0 	bl	1a001454 <rkh_bittbl_getBitMask>
1a001ab4:	4434      	add	r4, r6
1a001ab6:	7863      	ldrb	r3, [r4, #1]
1a001ab8:	4318      	orrs	r0, r3
1a001aba:	7060      	strb	r0, [r4, #1]
1a001abc:	bd70      	pop	{r4, r5, r6, pc}
1a001abe:	bf00      	nop
1a001ac0:	1a002908 	.word	0x1a002908
1a001ac4:	100000b0 	.word	0x100000b0

1a001ac8 <rkh_smaPrio_setUnready>:
}

void 
rkh_smaPrio_setUnready(rui8_t prio)
{
1a001ac8:	b510      	push	{r4, lr}
1a001aca:	4604      	mov	r4, r0
    RKH_REQUIRE(prio < RKH_CFG_FWK_MAX_SMA);
1a001acc:	2801      	cmp	r0, #1
1a001ace:	d903      	bls.n	1a001ad8 <rkh_smaPrio_setUnready+0x10>
1a001ad0:	21b4      	movs	r1, #180	; 0xb4
1a001ad2:	480c      	ldr	r0, [pc, #48]	; (1a001b04 <rkh_smaPrio_setUnready+0x3c>)
1a001ad4:	f7fe fc90 	bl	1a0003f8 <rkh_assert>
    if ((readyGroup.tbl[prio >> 3] &= ~rkh_bittbl_getBitMask(prio & 0x07)) == 0)
1a001ad8:	f004 0007 	and.w	r0, r4, #7
1a001adc:	f7ff fcba 	bl	1a001454 <rkh_bittbl_getBitMask>
1a001ae0:	08e4      	lsrs	r4, r4, #3
1a001ae2:	4a09      	ldr	r2, [pc, #36]	; (1a001b08 <rkh_smaPrio_setUnready+0x40>)
1a001ae4:	4422      	add	r2, r4
1a001ae6:	7853      	ldrb	r3, [r2, #1]
1a001ae8:	ea23 0000 	bic.w	r0, r3, r0
1a001aec:	7050      	strb	r0, [r2, #1]
1a001aee:	b100      	cbz	r0, 1a001af2 <rkh_smaPrio_setUnready+0x2a>
1a001af0:	bd10      	pop	{r4, pc}
    {
        readyGroup.grp &= ~rkh_bittbl_getBitMask(prio >> 3);
1a001af2:	4620      	mov	r0, r4
1a001af4:	f7ff fcae 	bl	1a001454 <rkh_bittbl_getBitMask>
1a001af8:	4a03      	ldr	r2, [pc, #12]	; (1a001b08 <rkh_smaPrio_setUnready+0x40>)
1a001afa:	7813      	ldrb	r3, [r2, #0]
1a001afc:	ea23 0000 	bic.w	r0, r3, r0
1a001b00:	7010      	strb	r0, [r2, #0]
    }
}
1a001b02:	e7f5      	b.n	1a001af0 <rkh_smaPrio_setUnready+0x28>
1a001b04:	1a002908 	.word	0x1a002908
1a001b08:	100000b0 	.word	0x100000b0

1a001b0c <rkh_smaPrio_findHighest>:

rui8_t 
rkh_smaPrio_findHighest(void)
{
1a001b0c:	b538      	push	{r3, r4, r5, lr}
    rui8_t prio;

    prio = rkh_bittbl_getLeastBitSetPos(readyGroup.grp);
1a001b0e:	4d06      	ldr	r5, [pc, #24]	; (1a001b28 <rkh_smaPrio_findHighest+0x1c>)
1a001b10:	7828      	ldrb	r0, [r5, #0]
1a001b12:	f7ff fca9 	bl	1a001468 <rkh_bittbl_getLeastBitSetPos>
    prio = (rui8_t)((prio << 3) +
1a001b16:	00c4      	lsls	r4, r0, #3
1a001b18:	b2e4      	uxtb	r4, r4
                    (rui8_t)rkh_bittbl_getLeastBitSetPos(readyGroup.tbl[prio]));
1a001b1a:	4405      	add	r5, r0
1a001b1c:	7868      	ldrb	r0, [r5, #1]
1a001b1e:	f7ff fca3 	bl	1a001468 <rkh_bittbl_getLeastBitSetPos>
    prio = (rui8_t)((prio << 3) +
1a001b22:	4420      	add	r0, r4
    return prio;
}
1a001b24:	b2c0      	uxtb	r0, r0
1a001b26:	bd38      	pop	{r3, r4, r5, pc}
1a001b28:	100000b0 	.word	0x100000b0

1a001b2c <rkh_sma_block>:
/* ----------------------- Local function prototypes ----------------------- */
/* ---------------------------- Local functions ---------------------------- */
/* ---------------------------- Global functions --------------------------- */
void 
rkh_sma_block(RKH_SMA_T *const me)
{
1a001b2c:	b508      	push	{r3, lr}
    RKH_ASSERT(me->equeue.qty != 0);
1a001b2e:	7a43      	ldrb	r3, [r0, #9]
1a001b30:	b103      	cbz	r3, 1a001b34 <rkh_sma_block+0x8>
1a001b32:	bd08      	pop	{r3, pc}
1a001b34:	2148      	movs	r1, #72	; 0x48
1a001b36:	4802      	ldr	r0, [pc, #8]	; (1a001b40 <rkh_sma_block+0x14>)
1a001b38:	f7fe fc5e 	bl	1a0003f8 <rkh_assert>
}
1a001b3c:	e7f9      	b.n	1a001b32 <rkh_sma_block+0x6>
1a001b3e:	bf00      	nop
1a001b40:	1a002914 	.word	0x1a002914

1a001b44 <rkh_sma_setReady>:

void 
rkh_sma_setReady(RKH_SMA_T *const me)
{
1a001b44:	b508      	push	{r3, lr}
    rkh_smaPrio_setReady(RKH_SMA_ACCESS_CONST(me, prio));
1a001b46:	6803      	ldr	r3, [r0, #0]
1a001b48:	7818      	ldrb	r0, [r3, #0]
1a001b4a:	f7ff ff9f 	bl	1a001a8c <rkh_smaPrio_setReady>
1a001b4e:	bd08      	pop	{r3, pc}

1a001b50 <rkh_sma_setUnready>:
}

void 
rkh_sma_setUnready(RKH_SMA_T *const me)
{
1a001b50:	b508      	push	{r3, lr}
    rkh_smaPrio_setUnready(RKH_SMA_ACCESS_CONST(me, prio));
1a001b52:	6803      	ldr	r3, [r0, #0]
1a001b54:	7818      	ldrb	r0, [r3, #0]
1a001b56:	f7ff ffb7 	bl	1a001ac8 <rkh_smaPrio_setUnready>
1a001b5a:	bd08      	pop	{r3, pc}

1a001b5c <rem_from_list>:

/* ----------------------- Local function prototypes ----------------------- */
/* ---------------------------- Local functions ---------------------------- */
static void
rem_from_list(RKH_TMR_T *t, RKH_TMR_T *tprev)
{
1a001b5c:	b510      	push	{r4, lr}
1a001b5e:	4604      	mov	r4, r0
    if (thead == t)             /* is first timer in the list? */
1a001b60:	4b0c      	ldr	r3, [pc, #48]	; (1a001b94 <rem_from_list+0x38>)
1a001b62:	681b      	ldr	r3, [r3, #0]
1a001b64:	4283      	cmp	r3, r0
1a001b66:	d008      	beq.n	1a001b7a <rem_from_list+0x1e>
    {
        thead = t->tnext;
    }
    else
    {
        tprev->tnext = t->tnext;
1a001b68:	6843      	ldr	r3, [r0, #4]
1a001b6a:	604b      	str	r3, [r1, #4]
    }
    t->used = 0;
1a001b6c:	2300      	movs	r3, #0
1a001b6e:	7423      	strb	r3, [r4, #16]
    RKH_TR_TMR_REM(t);
1a001b70:	2084      	movs	r0, #132	; 0x84
1a001b72:	f000 f969 	bl	1a001e48 <rkh_trc_isoff_>
1a001b76:	b920      	cbnz	r0, 1a001b82 <rem_from_list+0x26>
1a001b78:	bd10      	pop	{r4, pc}
        thead = t->tnext;
1a001b7a:	6842      	ldr	r2, [r0, #4]
1a001b7c:	4b05      	ldr	r3, [pc, #20]	; (1a001b94 <rem_from_list+0x38>)
1a001b7e:	601a      	str	r2, [r3, #0]
1a001b80:	e7f4      	b.n	1a001b6c <rem_from_list+0x10>
    RKH_TR_TMR_REM(t);
1a001b82:	2084      	movs	r0, #132	; 0x84
1a001b84:	f000 fa0e 	bl	1a001fa4 <rkh_trc_begin>
1a001b88:	4620      	mov	r0, r4
1a001b8a:	f000 f9fa 	bl	1a001f82 <rkh_trc_u32>
1a001b8e:	f000 f9e1 	bl	1a001f54 <rkh_trc_end>
}
1a001b92:	e7f1      	b.n	1a001b78 <rem_from_list+0x1c>
1a001b94:	100000b4 	.word	0x100000b4

1a001b98 <rkh_tmr_tick>:
#if defined(RKH_USE_TRC_SENDER)
rkh_tmr_tick(const void *const sender)
#else
rkh_tmr_tick(void)
#endif
{
1a001b98:	b538      	push	{r3, r4, r5, lr}
    RKH_TMR_T *t, *tprev;
    RKH_SR_ALLOC();

    RKH_HOOK_TIMETICK();            /* call user definable hook */
1a001b9a:	f7fe fc03 	bl	1a0003a4 <rkh_hook_timetick>

    RKH_ENTER_CRITICAL_();
1a001b9e:	f7ff fca3 	bl	1a0014e8 <rkhport_enter_critical>
    if (thead == CPTIM(0))      /* is empty list? */
1a001ba2:	4b27      	ldr	r3, [pc, #156]	; (1a001c40 <rkh_tmr_tick+0xa8>)
1a001ba4:	681c      	ldr	r4, [r3, #0]
1a001ba6:	b10c      	cbz	r4, 1a001bac <rkh_tmr_tick+0x14>
1a001ba8:	2500      	movs	r5, #0
1a001baa:	e007      	b.n	1a001bbc <rkh_tmr_tick+0x24>
    {
        RKH_EXIT_CRITICAL_();
1a001bac:	f7ff fca8 	bl	1a001500 <rkhport_exit_critical>
        return;
1a001bb0:	bd38      	pop	{r3, r4, r5, pc}
    }

    for (tprev = CPTIM(0), t = thead; t != CPTIM(0); t = t->tnext)
        if (t->ntick == 0)
        {
            rem_from_list(t, tprev);
1a001bb2:	4629      	mov	r1, r5
1a001bb4:	4620      	mov	r0, r4
1a001bb6:	f7ff ffd1 	bl	1a001b5c <rem_from_list>
    for (tprev = CPTIM(0), t = thead; t != CPTIM(0); t = t->tnext)
1a001bba:	6864      	ldr	r4, [r4, #4]
1a001bbc:	2c00      	cmp	r4, #0
1a001bbe:	d03b      	beq.n	1a001c38 <rkh_tmr_tick+0xa0>
        if (t->ntick == 0)
1a001bc0:	89a3      	ldrh	r3, [r4, #12]
1a001bc2:	2b00      	cmp	r3, #0
1a001bc4:	d0f5      	beq.n	1a001bb2 <rkh_tmr_tick+0x1a>
        }
        else
        {
            if (!--t->ntick)
1a001bc6:	3b01      	subs	r3, #1
1a001bc8:	b29b      	uxth	r3, r3
1a001bca:	81a3      	strh	r3, [r4, #12]
1a001bcc:	b10b      	cbz	r3, 1a001bd2 <rkh_tmr_tick+0x3a>
                RKH_EXEC_THOOK();
                RKH_TICK_POST(t, sender);
            }
            else
            {
                tprev = t;
1a001bce:	4625      	mov	r5, r4
1a001bd0:	e7f3      	b.n	1a001bba <rkh_tmr_tick+0x22>
                RKH_TR_TMR_TOUT(t, t->evt->e, t->sma);
1a001bd2:	2083      	movs	r0, #131	; 0x83
1a001bd4:	f000 f938 	bl	1a001e48 <rkh_trc_isoff_>
1a001bd8:	b940      	cbnz	r0, 1a001bec <rkh_tmr_tick+0x54>
                if (t->period == 0)
1a001bda:	89e3      	ldrh	r3, [r4, #14]
1a001bdc:	b33b      	cbz	r3, 1a001c2e <rkh_tmr_tick+0x96>
                    t->ntick = t->period;
1a001bde:	81a3      	strh	r3, [r4, #12]
                    tprev = t;
1a001be0:	4625      	mov	r5, r4
                RKH_TICK_POST(t, sender);
1a001be2:	6821      	ldr	r1, [r4, #0]
1a001be4:	68a0      	ldr	r0, [r4, #8]
1a001be6:	f7ff fed7 	bl	1a001998 <rkh_sma_post_fifo>
1a001bea:	e7e6      	b.n	1a001bba <rkh_tmr_tick+0x22>
                RKH_TR_TMR_TOUT(t, t->evt->e, t->sma);
1a001bec:	68a3      	ldr	r3, [r4, #8]
1a001bee:	681b      	ldr	r3, [r3, #0]
1a001bf0:	7819      	ldrb	r1, [r3, #0]
1a001bf2:	2002      	movs	r0, #2
1a001bf4:	f000 f96c 	bl	1a001ed0 <rkh_trc_symFil_isoff>
1a001bf8:	2800      	cmp	r0, #0
1a001bfa:	d0ee      	beq.n	1a001bda <rkh_tmr_tick+0x42>
1a001bfc:	6823      	ldr	r3, [r4, #0]
1a001bfe:	7819      	ldrb	r1, [r3, #0]
1a001c00:	29fe      	cmp	r1, #254	; 0xfe
1a001c02:	d004      	beq.n	1a001c0e <rkh_tmr_tick+0x76>
1a001c04:	2001      	movs	r0, #1
1a001c06:	f000 f963 	bl	1a001ed0 <rkh_trc_symFil_isoff>
1a001c0a:	2800      	cmp	r0, #0
1a001c0c:	d0e5      	beq.n	1a001bda <rkh_tmr_tick+0x42>
1a001c0e:	2083      	movs	r0, #131	; 0x83
1a001c10:	f000 f9c8 	bl	1a001fa4 <rkh_trc_begin>
1a001c14:	4620      	mov	r0, r4
1a001c16:	f000 f9b4 	bl	1a001f82 <rkh_trc_u32>
1a001c1a:	6823      	ldr	r3, [r4, #0]
1a001c1c:	7818      	ldrb	r0, [r3, #0]
1a001c1e:	f000 f981 	bl	1a001f24 <rkh_trc_u8>
1a001c22:	68a0      	ldr	r0, [r4, #8]
1a001c24:	f000 f9ad 	bl	1a001f82 <rkh_trc_u32>
1a001c28:	f000 f994 	bl	1a001f54 <rkh_trc_end>
1a001c2c:	e7d5      	b.n	1a001bda <rkh_tmr_tick+0x42>
                    rem_from_list(t, tprev);
1a001c2e:	4629      	mov	r1, r5
1a001c30:	4620      	mov	r0, r4
1a001c32:	f7ff ff93 	bl	1a001b5c <rem_from_list>
1a001c36:	e7d4      	b.n	1a001be2 <rkh_tmr_tick+0x4a>
            }
        }
    RKH_EXIT_CRITICAL_();
1a001c38:	f7ff fc62 	bl	1a001500 <rkhport_exit_critical>
1a001c3c:	bd38      	pop	{r3, r4, r5, pc}
1a001c3e:	bf00      	nop
1a001c40:	100000b4 	.word	0x100000b4

1a001c44 <rkh_tmr_init_>:
#if RKH_CFG_TMR_HOOK_EN == RKH_DISABLED
rkh_tmr_init_(RKH_TMR_T *t, const RKH_EVT_T *e)
#else
rkh_tmr_init_(RKH_TMR_T * t, const RKH_EVT_T * e, RKH_THK_T thk)
#endif
{
1a001c44:	b538      	push	{r3, r4, r5, lr}
1a001c46:	460d      	mov	r5, r1
    RKH_SR_ALLOC();
    RKH_REQUIRE(t != CPTIM(0) && e != CCE(0));
1a001c48:	4604      	mov	r4, r0
1a001c4a:	b168      	cbz	r0, 1a001c68 <rkh_tmr_init_+0x24>
1a001c4c:	b161      	cbz	r1, 1a001c68 <rkh_tmr_init_+0x24>

    RKH_ENTER_CRITICAL_();
1a001c4e:	f7ff fc4b 	bl	1a0014e8 <rkhport_enter_critical>
    t->ntick = 0;
1a001c52:	2300      	movs	r3, #0
1a001c54:	81a3      	strh	r3, [r4, #12]
    t->used = 0;
1a001c56:	7423      	strb	r3, [r4, #16]
    t->evt = CE(e);
1a001c58:	6025      	str	r5, [r4, #0]
    RKH_TR_TMR_INIT(t, t->evt->e);
1a001c5a:	2080      	movs	r0, #128	; 0x80
1a001c5c:	f000 f8f4 	bl	1a001e48 <rkh_trc_isoff_>
1a001c60:	b938      	cbnz	r0, 1a001c72 <rkh_tmr_init_+0x2e>
    RKH_EXIT_CRITICAL_();
1a001c62:	f7ff fc4d 	bl	1a001500 <rkhport_exit_critical>
1a001c66:	bd38      	pop	{r3, r4, r5, pc}
    RKH_REQUIRE(t != CPTIM(0) && e != CCE(0));
1a001c68:	21ac      	movs	r1, #172	; 0xac
1a001c6a:	4808      	ldr	r0, [pc, #32]	; (1a001c8c <rkh_tmr_init_+0x48>)
1a001c6c:	f7fe fbc4 	bl	1a0003f8 <rkh_assert>
1a001c70:	e7ed      	b.n	1a001c4e <rkh_tmr_init_+0xa>
    RKH_TR_TMR_INIT(t, t->evt->e);
1a001c72:	2080      	movs	r0, #128	; 0x80
1a001c74:	f000 f996 	bl	1a001fa4 <rkh_trc_begin>
1a001c78:	4620      	mov	r0, r4
1a001c7a:	f000 f982 	bl	1a001f82 <rkh_trc_u32>
1a001c7e:	6823      	ldr	r3, [r4, #0]
1a001c80:	7818      	ldrb	r0, [r3, #0]
1a001c82:	f000 f94f 	bl	1a001f24 <rkh_trc_u8>
1a001c86:	f000 f965 	bl	1a001f54 <rkh_trc_end>
1a001c8a:	e7ea      	b.n	1a001c62 <rkh_tmr_init_+0x1e>
1a001c8c:	1a002920 	.word	0x1a002920

1a001c90 <rkh_tmr_start>:
    RKH_SET_THOOK(t, thk);
}

void
rkh_tmr_start(RKH_TMR_T *t, const struct RKH_SMA_T *sma, RKH_TNT_T itick)
{
1a001c90:	b570      	push	{r4, r5, r6, lr}
1a001c92:	460d      	mov	r5, r1
1a001c94:	4616      	mov	r6, r2
    RKH_SR_ALLOC();

    RKH_REQUIRE(t != CPTIM(
1a001c96:	4604      	mov	r4, r0
1a001c98:	b108      	cbz	r0, 1a001c9e <rkh_tmr_start+0xe>
1a001c9a:	b101      	cbz	r1, 1a001c9e <rkh_tmr_start+0xe>
1a001c9c:	b91a      	cbnz	r2, 1a001ca6 <rkh_tmr_start+0x16>
1a001c9e:	21be      	movs	r1, #190	; 0xbe
1a001ca0:	4813      	ldr	r0, [pc, #76]	; (1a001cf0 <rkh_tmr_start+0x60>)
1a001ca2:	f7fe fba9 	bl	1a0003f8 <rkh_assert>
                    0) && sma != (const struct RKH_SMA_T *)0 && itick != 0);
    RKH_ENTER_CRITICAL_();
1a001ca6:	f7ff fc1f 	bl	1a0014e8 <rkhport_enter_critical>

    t->sma = sma;
1a001caa:	60a5      	str	r5, [r4, #8]
    t->ntick = itick;
1a001cac:	81a6      	strh	r6, [r4, #12]
    if (t->used == 0)
1a001cae:	7c23      	ldrb	r3, [r4, #16]
1a001cb0:	b92b      	cbnz	r3, 1a001cbe <rkh_tmr_start+0x2e>
    {
        add_to_list(t);
1a001cb2:	4b10      	ldr	r3, [pc, #64]	; (1a001cf4 <rkh_tmr_start+0x64>)
1a001cb4:	681a      	ldr	r2, [r3, #0]
1a001cb6:	6062      	str	r2, [r4, #4]
1a001cb8:	601c      	str	r4, [r3, #0]
1a001cba:	2301      	movs	r3, #1
1a001cbc:	7423      	strb	r3, [r4, #16]
    }

    RKH_TR_TMR_START(t, sma, itick, t->period);
1a001cbe:	2081      	movs	r0, #129	; 0x81
1a001cc0:	f000 f8c2 	bl	1a001e48 <rkh_trc_isoff_>
1a001cc4:	b910      	cbnz	r0, 1a001ccc <rkh_tmr_start+0x3c>
    RKH_EXIT_CRITICAL_();
1a001cc6:	f7ff fc1b 	bl	1a001500 <rkhport_exit_critical>
1a001cca:	bd70      	pop	{r4, r5, r6, pc}
    RKH_TR_TMR_START(t, sma, itick, t->period);
1a001ccc:	2081      	movs	r0, #129	; 0x81
1a001cce:	f000 f969 	bl	1a001fa4 <rkh_trc_begin>
1a001cd2:	4620      	mov	r0, r4
1a001cd4:	f000 f955 	bl	1a001f82 <rkh_trc_u32>
1a001cd8:	4628      	mov	r0, r5
1a001cda:	f000 f952 	bl	1a001f82 <rkh_trc_u32>
1a001cde:	4630      	mov	r0, r6
1a001ce0:	f000 f946 	bl	1a001f70 <rkh_trc_u16>
1a001ce4:	89e0      	ldrh	r0, [r4, #14]
1a001ce6:	f000 f943 	bl	1a001f70 <rkh_trc_u16>
1a001cea:	f000 f933 	bl	1a001f54 <rkh_trc_end>
1a001cee:	e7ea      	b.n	1a001cc6 <rkh_tmr_start+0x36>
1a001cf0:	1a002920 	.word	0x1a002920
1a001cf4:	100000b4 	.word	0x100000b4

1a001cf8 <setAllFilters>:
setAllFilters(rui8_t *filterTbl, rui8_t value, ruint size)
{
    rui8_t *ft, ix, c;

    for (ft = filterTbl, ix = 0,
         c = (rui8_t)((value == FILTER_OFF) ? 0xFF : 0);
1a001cf8:	2901      	cmp	r1, #1
1a001cfa:	d002      	beq.n	1a001d02 <setAllFilters+0xa>
1a001cfc:	2100      	movs	r1, #0
    for (ft = filterTbl, ix = 0,
1a001cfe:	2300      	movs	r3, #0
1a001d00:	e005      	b.n	1a001d0e <setAllFilters+0x16>
         c = (rui8_t)((value == FILTER_OFF) ? 0xFF : 0);
1a001d02:	21ff      	movs	r1, #255	; 0xff
1a001d04:	e7fb      	b.n	1a001cfe <setAllFilters+0x6>
         ix < size; ++ix, ++ft)
    {
        *ft = c;
1a001d06:	f800 1b01 	strb.w	r1, [r0], #1
         ix < size; ++ix, ++ft)
1a001d0a:	3301      	adds	r3, #1
1a001d0c:	b2db      	uxtb	r3, r3
    for (ft = filterTbl, ix = 0,
1a001d0e:	4293      	cmp	r3, r2
1a001d10:	d3f9      	bcc.n	1a001d06 <setAllFilters+0xe>
    }
}
1a001d12:	4770      	bx	lr

1a001d14 <setOneFilter>:

static void
setOneFilter(rui8_t *filterByte, rui8_t value, rui8_t bitPos)
{
1a001d14:	b510      	push	{r4, lr}
1a001d16:	4604      	mov	r4, r0
    if (value == FILTER_OFF)
1a001d18:	2901      	cmp	r1, #1
1a001d1a:	d007      	beq.n	1a001d2c <setOneFilter+0x18>
    {
        *filterByte |= rkh_bittbl_getBitMask(bitPos);
    }
    else
    {
        *filterByte &= ~rkh_bittbl_getBitMask(bitPos);
1a001d1c:	4610      	mov	r0, r2
1a001d1e:	f7ff fb99 	bl	1a001454 <rkh_bittbl_getBitMask>
1a001d22:	7823      	ldrb	r3, [r4, #0]
1a001d24:	ea23 0000 	bic.w	r0, r3, r0
1a001d28:	7020      	strb	r0, [r4, #0]
1a001d2a:	bd10      	pop	{r4, pc}
        *filterByte |= rkh_bittbl_getBitMask(bitPos);
1a001d2c:	4610      	mov	r0, r2
1a001d2e:	f7ff fb91 	bl	1a001454 <rkh_bittbl_getBitMask>
1a001d32:	7823      	ldrb	r3, [r4, #0]
1a001d34:	4318      	orrs	r0, r3
1a001d36:	7020      	strb	r0, [r4, #0]
1a001d38:	bd10      	pop	{r4, pc}

1a001d3a <isOffFilter>:
    }
}

static rbool_t
isOffFilter(rui8_t *filterTbl, RKH_TE_ID_T filter)
{
1a001d3a:	b510      	push	{r4, lr}
    rui8_t x;
    RKH_TE_ID_T y;

    y = filter >> 3;
1a001d3c:	08cb      	lsrs	r3, r1, #3
    x = (rui8_t)(filter & 7);
    return (*(filterTbl + y) & rkh_bittbl_getBitMask(x)) != 0;
1a001d3e:	5cc4      	ldrb	r4, [r0, r3]
1a001d40:	f001 0007 	and.w	r0, r1, #7
1a001d44:	f7ff fb86 	bl	1a001454 <rkh_bittbl_getBitMask>
1a001d48:	4204      	tst	r4, r0
}
1a001d4a:	bf14      	ite	ne
1a001d4c:	2001      	movne	r0, #1
1a001d4e:	2000      	moveq	r0, #0
1a001d50:	bd10      	pop	{r4, pc}
1a001d52:	Address 0x1a001d52 is out of bounds.


1a001d54 <getFilterTable>:

static const RKH_TRC_FIL_T *
getFilterTable(RKHFilter fd)
{
1a001d54:	b510      	push	{r4, lr}
1a001d56:	4604      	mov	r4, r0
    RKH_REQUIRE(fd < RKHFilterNums);
1a001d58:	2802      	cmp	r0, #2
1a001d5a:	d803      	bhi.n	1a001d64 <getFilterTable+0x10>
    return (fd == RKHFilterSignal) ? &fsig : &fsma;
1a001d5c:	2c01      	cmp	r4, #1
1a001d5e:	d006      	beq.n	1a001d6e <getFilterTable+0x1a>
1a001d60:	4804      	ldr	r0, [pc, #16]	; (1a001d74 <getFilterTable+0x20>)
}
1a001d62:	bd10      	pop	{r4, pc}
    RKH_REQUIRE(fd < RKHFilterNums);
1a001d64:	21cf      	movs	r1, #207	; 0xcf
1a001d66:	4804      	ldr	r0, [pc, #16]	; (1a001d78 <getFilterTable+0x24>)
1a001d68:	f7fe fb46 	bl	1a0003f8 <rkh_assert>
1a001d6c:	e7f6      	b.n	1a001d5c <getFilterTable+0x8>
    return (fd == RKHFilterSignal) ? &fsig : &fsma;
1a001d6e:	4803      	ldr	r0, [pc, #12]	; (1a001d7c <getFilterTable+0x28>)
1a001d70:	bd10      	pop	{r4, pc}
1a001d72:	bf00      	nop
1a001d74:	1a002930 	.word	0x1a002930
1a001d78:	1a002938 	.word	0x1a002938
1a001d7c:	1a002928 	.word	0x1a002928

1a001d80 <rkh_trc_filter_group_>:
rkh_trc_filter_group_(rui8_t ctrl, RKH_TG_T grp, rui8_t mode)
{
    RKH_GM_OFFSET_T offset;
    RKH_GM_RANGE_T range;

    if (grp == RKH_TRC_ALL_GROUPS)
1a001d80:	2908      	cmp	r1, #8
1a001d82:	d00a      	beq.n	1a001d9a <rkh_trc_filter_group_+0x1a>
{
1a001d84:	b570      	push	{r4, r5, r6, lr}
1a001d86:	4616      	mov	r6, r2
1a001d88:	460c      	mov	r4, r1
1a001d8a:	4605      	mov	r5, r0
    {
        trcgfilter = (rui8_t)((ctrl == FILTER_OFF) ? 0xFF : 0);
        return;
    }

    setOneFilter(&trcgfilter, ctrl, grp);
1a001d8c:	460a      	mov	r2, r1
1a001d8e:	4601      	mov	r1, r0
1a001d90:	480c      	ldr	r0, [pc, #48]	; (1a001dc4 <rkh_trc_filter_group_+0x44>)
1a001d92:	f7ff ffbf 	bl	1a001d14 <setOneFilter>

    if (mode == ECHANGE)
1a001d96:	b146      	cbz	r6, 1a001daa <rkh_trc_filter_group_+0x2a>
1a001d98:	bd70      	pop	{r4, r5, r6, pc}
        trcgfilter = (rui8_t)((ctrl == FILTER_OFF) ? 0xFF : 0);
1a001d9a:	2801      	cmp	r0, #1
1a001d9c:	d003      	beq.n	1a001da6 <rkh_trc_filter_group_+0x26>
1a001d9e:	2200      	movs	r2, #0
1a001da0:	4b08      	ldr	r3, [pc, #32]	; (1a001dc4 <rkh_trc_filter_group_+0x44>)
1a001da2:	701a      	strb	r2, [r3, #0]
        return;
1a001da4:	4770      	bx	lr
        trcgfilter = (rui8_t)((ctrl == FILTER_OFF) ? 0xFF : 0);
1a001da6:	22ff      	movs	r2, #255	; 0xff
1a001da8:	e7fa      	b.n	1a001da0 <rkh_trc_filter_group_+0x20>
    {
        offset = trcgmtbl[grp].offset;
1a001daa:	4907      	ldr	r1, [pc, #28]	; (1a001dc8 <rkh_trc_filter_group_+0x48>)
1a001dac:	f811 3014 	ldrb.w	r3, [r1, r4, lsl #1]
        range = trcgmtbl[grp].range;
1a001db0:	eb01 0144 	add.w	r1, r1, r4, lsl #1
        setAllFilters(&trceftbl[offset], ctrl, range);
1a001db4:	784a      	ldrb	r2, [r1, #1]
1a001db6:	4629      	mov	r1, r5
1a001db8:	4804      	ldr	r0, [pc, #16]	; (1a001dcc <rkh_trc_filter_group_+0x4c>)
1a001dba:	4418      	add	r0, r3
1a001dbc:	f7ff ff9c 	bl	1a001cf8 <setAllFilters>
1a001dc0:	e7ea      	b.n	1a001d98 <rkh_trc_filter_group_+0x18>
1a001dc2:	bf00      	nop
1a001dc4:	100000c9 	.word	0x100000c9
1a001dc8:	1a002948 	.word	0x1a002948
1a001dcc:	100000b8 	.word	0x100000b8

1a001dd0 <rkh_trc_filter_event_>:
    }
}

void 
rkh_trc_filter_event_(rui8_t ctrl, RKH_TE_ID_T evt)
{
1a001dd0:	b570      	push	{r4, r5, r6, lr}
1a001dd2:	4605      	mov	r5, r0
1a001dd4:	460c      	mov	r4, r1
    RKH_TG_T grp;
    RKH_TE_ID_T e;
    RKH_GM_OFFSET_T offset;

    RKH_ASSERT(evt <= RKH_TRC_ALL_EVENTS);
1a001dd6:	29e8      	cmp	r1, #232	; 0xe8
1a001dd8:	d813      	bhi.n	1a001e02 <rkh_trc_filter_event_+0x32>

    if (evt == RKH_TRC_ALL_EVENTS)
1a001dda:	2ce8      	cmp	r4, #232	; 0xe8
1a001ddc:	d016      	beq.n	1a001e0c <rkh_trc_filter_event_+0x3c>
        trcgfilter = (rui8_t)((ctrl == FILTER_OFF) ? 0xFF : 0);
    }
    else
    {
        e = GETEVT(evt);
        grp = GETGRP(evt);
1a001dde:	0966      	lsrs	r6, r4, #5
        offset = (RKH_GM_OFFSET_T)(trcgmtbl[grp].offset + (e >> 3));
1a001de0:	4b15      	ldr	r3, [pc, #84]	; (1a001e38 <rkh_trc_filter_event_+0x68>)
1a001de2:	f813 3016 	ldrb.w	r3, [r3, r6, lsl #1]
1a001de6:	f3c4 00c1 	ubfx	r0, r4, #3, #2
1a001dea:	4403      	add	r3, r0

        setOneFilter(&trceftbl[offset], ctrl, e & 7);
1a001dec:	f004 0207 	and.w	r2, r4, #7
1a001df0:	4629      	mov	r1, r5
1a001df2:	4812      	ldr	r0, [pc, #72]	; (1a001e3c <rkh_trc_filter_event_+0x6c>)
1a001df4:	fa50 f083 	uxtab	r0, r0, r3
1a001df8:	f7ff ff8c 	bl	1a001d14 <setOneFilter>
        if (ctrl == FILTER_OFF)
1a001dfc:	2d01      	cmp	r5, #1
1a001dfe:	d012      	beq.n	1a001e26 <rkh_trc_filter_event_+0x56>
1a001e00:	bd70      	pop	{r4, r5, r6, pc}
    RKH_ASSERT(evt <= RKH_TRC_ALL_EVENTS);
1a001e02:	21f1      	movs	r1, #241	; 0xf1
1a001e04:	480e      	ldr	r0, [pc, #56]	; (1a001e40 <rkh_trc_filter_event_+0x70>)
1a001e06:	f7fe faf7 	bl	1a0003f8 <rkh_assert>
1a001e0a:	e7e6      	b.n	1a001dda <rkh_trc_filter_event_+0xa>
        setAllFilters(trceftbl, ctrl, RKH_TRC_MAX_EVENTS_IN_BYTES);
1a001e0c:	2211      	movs	r2, #17
1a001e0e:	4629      	mov	r1, r5
1a001e10:	480a      	ldr	r0, [pc, #40]	; (1a001e3c <rkh_trc_filter_event_+0x6c>)
1a001e12:	f7ff ff71 	bl	1a001cf8 <setAllFilters>
        trcgfilter = (rui8_t)((ctrl == FILTER_OFF) ? 0xFF : 0);
1a001e16:	2d01      	cmp	r5, #1
1a001e18:	d003      	beq.n	1a001e22 <rkh_trc_filter_event_+0x52>
1a001e1a:	2200      	movs	r2, #0
1a001e1c:	4b09      	ldr	r3, [pc, #36]	; (1a001e44 <rkh_trc_filter_event_+0x74>)
1a001e1e:	701a      	strb	r2, [r3, #0]
1a001e20:	bd70      	pop	{r4, r5, r6, pc}
1a001e22:	22ff      	movs	r2, #255	; 0xff
1a001e24:	e7fa      	b.n	1a001e1c <rkh_trc_filter_event_+0x4c>
        {
            trcgfilter |= rkh_bittbl_getBitMask(grp);
1a001e26:	4630      	mov	r0, r6
1a001e28:	f7ff fb14 	bl	1a001454 <rkh_bittbl_getBitMask>
1a001e2c:	4a05      	ldr	r2, [pc, #20]	; (1a001e44 <rkh_trc_filter_event_+0x74>)
1a001e2e:	7813      	ldrb	r3, [r2, #0]
1a001e30:	4318      	orrs	r0, r3
1a001e32:	7010      	strb	r0, [r2, #0]
        }
    }
}
1a001e34:	e7e4      	b.n	1a001e00 <rkh_trc_filter_event_+0x30>
1a001e36:	bf00      	nop
1a001e38:	1a002948 	.word	0x1a002948
1a001e3c:	100000b8 	.word	0x100000b8
1a001e40:	1a002938 	.word	0x1a002938
1a001e44:	100000c9 	.word	0x100000c9

1a001e48 <rkh_trc_isoff_>:

rbool_t 
rkh_trc_isoff_(RKH_TE_ID_T e)
{
1a001e48:	b538      	push	{r3, r4, r5, lr}
    RKH_TE_ID_T evt;
    RKH_TG_T grp;
    RKH_GM_OFFSET_T offset;

    evt = GETEVT(e);
1a001e4a:	f000 051f 	and.w	r5, r0, #31
    grp = GETGRP(e);
1a001e4e:	0940      	lsrs	r0, r0, #5
    offset = trcgmtbl[grp].offset;
1a001e50:	4b0a      	ldr	r3, [pc, #40]	; (1a001e7c <rkh_trc_isoff_+0x34>)
1a001e52:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]

    return (((trcgfilter & rkh_bittbl_getBitMask(grp)) != 0) && 
1a001e56:	f7ff fafd 	bl	1a001454 <rkh_bittbl_getBitMask>
1a001e5a:	4b09      	ldr	r3, [pc, #36]	; (1a001e80 <rkh_trc_isoff_+0x38>)
1a001e5c:	781b      	ldrb	r3, [r3, #0]
1a001e5e:	4218      	tst	r0, r3
1a001e60:	d101      	bne.n	1a001e66 <rkh_trc_isoff_+0x1e>
1a001e62:	2000      	movs	r0, #0
1a001e64:	bd38      	pop	{r3, r4, r5, pc}
              isOffFilter(&trceftbl[offset], evt));
1a001e66:	4629      	mov	r1, r5
1a001e68:	4806      	ldr	r0, [pc, #24]	; (1a001e84 <rkh_trc_isoff_+0x3c>)
1a001e6a:	4420      	add	r0, r4
1a001e6c:	f7ff ff65 	bl	1a001d3a <isOffFilter>
    return (((trcgfilter & rkh_bittbl_getBitMask(grp)) != 0) && 
1a001e70:	b908      	cbnz	r0, 1a001e76 <rkh_trc_isoff_+0x2e>
1a001e72:	2000      	movs	r0, #0
}
1a001e74:	bd38      	pop	{r3, r4, r5, pc}
    return (((trcgfilter & rkh_bittbl_getBitMask(grp)) != 0) && 
1a001e76:	2001      	movs	r0, #1
1a001e78:	bd38      	pop	{r3, r4, r5, pc}
1a001e7a:	bf00      	nop
1a001e7c:	1a002948 	.word	0x1a002948
1a001e80:	100000c9 	.word	0x100000c9
1a001e84:	100000b8 	.word	0x100000b8

1a001e88 <rkh_trc_symFil>:

void 
rkh_trc_symFil(RKHFilter fd, RKH_TRC_FSLOT slot, rui8_t mode)
{
1a001e88:	b570      	push	{r4, r5, r6, lr}
1a001e8a:	460c      	mov	r4, r1
1a001e8c:	4616      	mov	r6, r2
    rui8_t x, onoff;
    RKH_TRC_FSLOT y;
    const RKH_TRC_FIL_T *filter;

    filter = getFilterTable(fd);
1a001e8e:	f7ff ff61 	bl	1a001d54 <getFilterTable>
1a001e92:	4605      	mov	r5, r0
    RKH_REQUIRE(slot <= (filter->size << 3));
1a001e94:	7803      	ldrb	r3, [r0, #0]
1a001e96:	ebb4 0fc3 	cmp.w	r4, r3, lsl #3
1a001e9a:	dc0c      	bgt.n	1a001eb6 <rkh_trc_symFil+0x2e>
    onoff = (rui8_t)(mode & RKH_FILTER_MODE_MASK);
1a001e9c:	f006 017f 	and.w	r1, r6, #127	; 0x7f

    if (mode & RKH_TRC_ALL_FILTERS)
1a001ea0:	f016 0f80 	tst.w	r6, #128	; 0x80
1a001ea4:	d10d      	bne.n	1a001ec2 <rkh_trc_symFil+0x3a>
    }
    else
    {
        y = (RKH_TRC_FSLOT)(slot >> 3);
        x = (rui8_t)(slot & 7);
        setOneFilter(filter->tbl + y, onoff, x);
1a001ea6:	6868      	ldr	r0, [r5, #4]
1a001ea8:	f004 0207 	and.w	r2, r4, #7
1a001eac:	eb00 00d4 	add.w	r0, r0, r4, lsr #3
1a001eb0:	f7ff ff30 	bl	1a001d14 <setOneFilter>
1a001eb4:	bd70      	pop	{r4, r5, r6, pc}
    RKH_REQUIRE(slot <= (filter->size << 3));
1a001eb6:	f240 111d 	movw	r1, #285	; 0x11d
1a001eba:	4804      	ldr	r0, [pc, #16]	; (1a001ecc <rkh_trc_symFil+0x44>)
1a001ebc:	f7fe fa9c 	bl	1a0003f8 <rkh_assert>
1a001ec0:	e7ec      	b.n	1a001e9c <rkh_trc_symFil+0x14>
        setAllFilters(filter->tbl, onoff, filter->size);
1a001ec2:	782a      	ldrb	r2, [r5, #0]
1a001ec4:	6868      	ldr	r0, [r5, #4]
1a001ec6:	f7ff ff17 	bl	1a001cf8 <setAllFilters>
1a001eca:	bd70      	pop	{r4, r5, r6, pc}
1a001ecc:	1a002938 	.word	0x1a002938

1a001ed0 <rkh_trc_symFil_isoff>:
    }
}

rbool_t 
rkh_trc_symFil_isoff(RKHFilter fd, RKH_TRC_FSLOT slot)
{
1a001ed0:	b538      	push	{r3, r4, r5, lr}
1a001ed2:	460d      	mov	r5, r1
    const RKH_TRC_FIL_T *filter;

    filter = getFilterTable(fd);
1a001ed4:	f7ff ff3e 	bl	1a001d54 <getFilterTable>
1a001ed8:	4604      	mov	r4, r0
    RKH_REQUIRE(slot <= (filter->size << 3));
1a001eda:	7803      	ldrb	r3, [r0, #0]
1a001edc:	ebb5 0fc3 	cmp.w	r5, r3, lsl #3
1a001ee0:	dc04      	bgt.n	1a001eec <rkh_trc_symFil_isoff+0x1c>
    return isOffFilter(filter->tbl, (RKH_TE_ID_T)slot);
1a001ee2:	4629      	mov	r1, r5
1a001ee4:	6860      	ldr	r0, [r4, #4]
1a001ee6:	f7ff ff28 	bl	1a001d3a <isOffFilter>
}
1a001eea:	bd38      	pop	{r3, r4, r5, pc}
    RKH_REQUIRE(slot <= (filter->size << 3));
1a001eec:	f44f 7199 	mov.w	r1, #306	; 0x132
1a001ef0:	4801      	ldr	r0, [pc, #4]	; (1a001ef8 <rkh_trc_symFil_isoff+0x28>)
1a001ef2:	f7fe fa81 	bl	1a0003f8 <rkh_assert>
1a001ef6:	e7f4      	b.n	1a001ee2 <rkh_trc_symFil_isoff+0x12>
1a001ef8:	1a002938 	.word	0x1a002938

1a001efc <rkh_trc_init>:
/* ----------------------- Local function prototypes ----------------------- */
/* ---------------------------- Local functions ---------------------------- */
/* ---------------------------- Global functions --------------------------- */
void
rkh_trc_init(void)
{
1a001efc:	b508      	push	{r3, lr}
    rkh_trcStream_init();
1a001efe:	f000 f923 	bl	1a002148 <rkh_trcStream_init>
    nseq = 0;
1a001f02:	2300      	movs	r3, #0
1a001f04:	4a02      	ldr	r2, [pc, #8]	; (1a001f10 <rkh_trc_init+0x14>)
1a001f06:	7013      	strb	r3, [r2, #0]
    chk = 0;
1a001f08:	4a02      	ldr	r2, [pc, #8]	; (1a001f14 <rkh_trc_init+0x18>)
1a001f0a:	7013      	strb	r3, [r2, #0]
1a001f0c:	bd08      	pop	{r3, pc}
1a001f0e:	bf00      	nop
1a001f10:	100000d2 	.word	0x100000d2
1a001f14:	100000d1 	.word	0x100000d1

1a001f18 <rkh_trc_clear_chk>:
}

void
rkh_trc_clear_chk(void)
{
    chk = 0;
1a001f18:	2200      	movs	r2, #0
1a001f1a:	4b01      	ldr	r3, [pc, #4]	; (1a001f20 <rkh_trc_clear_chk+0x8>)
1a001f1c:	701a      	strb	r2, [r3, #0]
1a001f1e:	4770      	bx	lr
1a001f20:	100000d1 	.word	0x100000d1

1a001f24 <rkh_trc_u8>:
}

void
rkh_trc_u8(rui8_t d)
{
1a001f24:	b510      	push	{r4, lr}
1a001f26:	4604      	mov	r4, r0
    chk = (rui8_t)(chk + d);
1a001f28:	4a09      	ldr	r2, [pc, #36]	; (1a001f50 <rkh_trc_u8+0x2c>)
1a001f2a:	7813      	ldrb	r3, [r2, #0]
1a001f2c:	4403      	add	r3, r0
1a001f2e:	7013      	strb	r3, [r2, #0]
    if ((d == RKH_FLG) || (d == RKH_ESC))
1a001f30:	f1a0 037d 	sub.w	r3, r0, #125	; 0x7d
1a001f34:	b2db      	uxtb	r3, r3
1a001f36:	2b01      	cmp	r3, #1
1a001f38:	d902      	bls.n	1a001f40 <rkh_trc_u8+0x1c>
        rkh_trc_put(RKH_ESC);
        rkh_trc_put((rui8_t)(d ^ RKH_XOR));
    }
    else
    {
        rkh_trc_put(d);
1a001f3a:	f000 f8dd 	bl	1a0020f8 <rkh_trc_put>
1a001f3e:	bd10      	pop	{r4, pc}
        rkh_trc_put(RKH_ESC);
1a001f40:	207d      	movs	r0, #125	; 0x7d
1a001f42:	f000 f8d9 	bl	1a0020f8 <rkh_trc_put>
        rkh_trc_put((rui8_t)(d ^ RKH_XOR));
1a001f46:	f084 0020 	eor.w	r0, r4, #32
1a001f4a:	f000 f8d5 	bl	1a0020f8 <rkh_trc_put>
1a001f4e:	bd10      	pop	{r4, pc}
1a001f50:	100000d1 	.word	0x100000d1

1a001f54 <rkh_trc_end>:
{
1a001f54:	b508      	push	{r3, lr}
    chk = (rui8_t)(~chk + 1);   /* Inserts the previously calculated */
1a001f56:	4b05      	ldr	r3, [pc, #20]	; (1a001f6c <rkh_trc_end+0x18>)
1a001f58:	7818      	ldrb	r0, [r3, #0]
1a001f5a:	4240      	negs	r0, r0
1a001f5c:	b2c0      	uxtb	r0, r0
1a001f5e:	7018      	strb	r0, [r3, #0]
    rkh_trc_u8(chk);            /* checksum as: */
1a001f60:	f7ff ffe0 	bl	1a001f24 <rkh_trc_u8>
    rkh_trc_put(RKH_FLG);   /* Inserts directly into the trace stream the */
1a001f64:	207e      	movs	r0, #126	; 0x7e
1a001f66:	f000 f8c7 	bl	1a0020f8 <rkh_trc_put>
1a001f6a:	bd08      	pop	{r3, pc}
1a001f6c:	100000d1 	.word	0x100000d1

1a001f70 <rkh_trc_u16>:
    }
}

void
rkh_trc_u16(rui16_t d)
{
1a001f70:	b510      	push	{r4, lr}
1a001f72:	4604      	mov	r4, r0
    rkh_trc_u8((rui8_t)d);
1a001f74:	b2c0      	uxtb	r0, r0
1a001f76:	f7ff ffd5 	bl	1a001f24 <rkh_trc_u8>
    d >>= 8;
    rkh_trc_u8((rui8_t)d);
1a001f7a:	0a20      	lsrs	r0, r4, #8
1a001f7c:	f7ff ffd2 	bl	1a001f24 <rkh_trc_u8>
1a001f80:	bd10      	pop	{r4, pc}

1a001f82 <rkh_trc_u32>:
}

void
rkh_trc_u32(rui32_t d)
{
1a001f82:	b510      	push	{r4, lr}
1a001f84:	4604      	mov	r4, r0
    rkh_trc_u8((rui8_t)d);
1a001f86:	b2c0      	uxtb	r0, r0
1a001f88:	f7ff ffcc 	bl	1a001f24 <rkh_trc_u8>
    d >>= 8;
    rkh_trc_u8((rui8_t)d);
1a001f8c:	f3c4 2007 	ubfx	r0, r4, #8, #8
1a001f90:	f7ff ffc8 	bl	1a001f24 <rkh_trc_u8>
    d >>= 8;
    rkh_trc_u8((rui8_t)d);
1a001f94:	f3c4 4007 	ubfx	r0, r4, #16, #8
1a001f98:	f7ff ffc4 	bl	1a001f24 <rkh_trc_u8>
    d >>= 8;
    rkh_trc_u8((rui8_t)d);
1a001f9c:	0e20      	lsrs	r0, r4, #24
1a001f9e:	f7ff ffc1 	bl	1a001f24 <rkh_trc_u8>
1a001fa2:	bd10      	pop	{r4, pc}

1a001fa4 <rkh_trc_begin>:
{
1a001fa4:	b510      	push	{r4, lr}
    chk = 0;            /* Initialize the trace record checksum */
1a001fa6:	2200      	movs	r2, #0
1a001fa8:	4b07      	ldr	r3, [pc, #28]	; (1a001fc8 <rkh_trc_begin+0x24>)
1a001faa:	701a      	strb	r2, [r3, #0]
    RKH_TRC_TE_ID(eid); /* Insert the event ID */
1a001fac:	f7ff ffba 	bl	1a001f24 <rkh_trc_u8>
    rkh_trc_u8((rui8_t)(nseq)); /* Insert the sequence number */
1a001fb0:	4c06      	ldr	r4, [pc, #24]	; (1a001fcc <rkh_trc_begin+0x28>)
1a001fb2:	7820      	ldrb	r0, [r4, #0]
1a001fb4:	f7ff ffb6 	bl	1a001f24 <rkh_trc_u8>
    ++nseq;
1a001fb8:	7823      	ldrb	r3, [r4, #0]
1a001fba:	3301      	adds	r3, #1
1a001fbc:	7023      	strb	r3, [r4, #0]
    RKH_TRC_TSTAMP();   /* Insert the timestamp */
1a001fbe:	f7fe f9f4 	bl	1a0003aa <rkh_trc_getts>
1a001fc2:	f7ff ffde 	bl	1a001f82 <rkh_trc_u32>
1a001fc6:	bd10      	pop	{r4, pc}
1a001fc8:	100000d1 	.word	0x100000d1
1a001fcc:	100000d2 	.word	0x100000d2

1a001fd0 <rkh_trc_str>:
}

void
rkh_trc_str(const char *s)
{
1a001fd0:	b510      	push	{r4, lr}
1a001fd2:	4604      	mov	r4, r0
    while (*s != '\0')
1a001fd4:	e002      	b.n	1a001fdc <rkh_trc_str+0xc>
        rkh_trc_u8((rui8_t)*s++);
1a001fd6:	3401      	adds	r4, #1
1a001fd8:	f7ff ffa4 	bl	1a001f24 <rkh_trc_u8>
    while (*s != '\0')
1a001fdc:	7820      	ldrb	r0, [r4, #0]
1a001fde:	2800      	cmp	r0, #0
1a001fe0:	d1f9      	bne.n	1a001fd6 <rkh_trc_str+0x6>
    rkh_trc_u8('\0');
1a001fe2:	f7ff ff9f 	bl	1a001f24 <rkh_trc_u8>
1a001fe6:	bd10      	pop	{r4, pc}

1a001fe8 <rkh_trc_obj>:
}

void
rkh_trc_obj(RKH_TE_ID_T tre, rui8_t *obj, const char *obj_name)
{
1a001fe8:	b570      	push	{r4, r5, r6, lr}
1a001fea:	4606      	mov	r6, r0
1a001fec:	460d      	mov	r5, r1
1a001fee:	4614      	mov	r4, r2
    RKH_TRC_BEGIN_WOFIL(tre)
1a001ff0:	f7ff fa7a 	bl	1a0014e8 <rkhport_enter_critical>
1a001ff4:	4630      	mov	r0, r6
1a001ff6:	f7ff ffd5 	bl	1a001fa4 <rkh_trc_begin>
        RKH_TRC_SYM(obj);
1a001ffa:	4628      	mov	r0, r5
1a001ffc:	f7ff ffc1 	bl	1a001f82 <rkh_trc_u32>
        RKH_TRC_STR(obj_name);
1a002000:	4620      	mov	r0, r4
1a002002:	f7ff ffe5 	bl	1a001fd0 <rkh_trc_str>
    RKH_TRC_END_WOFIL()
1a002006:	f7ff ffa5 	bl	1a001f54 <rkh_trc_end>
1a00200a:	f7ff fa79 	bl	1a001500 <rkhport_exit_critical>
    RKH_TRC_FLUSH();
1a00200e:	f7fe f9ce 	bl	1a0003ae <rkh_trc_flush>
1a002012:	bd70      	pop	{r4, r5, r6, pc}

1a002014 <rkh_trc_sig>:
}

void
rkh_trc_sig(RKH_SIG_T sig, const char *sig_name)
{
1a002014:	b538      	push	{r3, r4, r5, lr}
1a002016:	4605      	mov	r5, r0
1a002018:	460c      	mov	r4, r1
    RKH_TRC_BEGIN_WOFIL(RKH_TE_FWK_SIG)
1a00201a:	f7ff fa65 	bl	1a0014e8 <rkhport_enter_critical>
1a00201e:	20a7      	movs	r0, #167	; 0xa7
1a002020:	f7ff ffc0 	bl	1a001fa4 <rkh_trc_begin>
        RKH_TRC_SIG(sig);
1a002024:	4628      	mov	r0, r5
1a002026:	f7ff ff7d 	bl	1a001f24 <rkh_trc_u8>
        RKH_TRC_STR(sig_name);
1a00202a:	4620      	mov	r0, r4
1a00202c:	f7ff ffd0 	bl	1a001fd0 <rkh_trc_str>
    RKH_TRC_END_WOFIL()
1a002030:	f7ff ff90 	bl	1a001f54 <rkh_trc_end>
1a002034:	f7ff fa64 	bl	1a001500 <rkhport_exit_critical>
    RKH_TRC_FLUSH();
1a002038:	f7fe f9b9 	bl	1a0003ae <rkh_trc_flush>
1a00203c:	bd38      	pop	{r3, r4, r5, pc}

1a00203e <rkh_trc_ao>:
}

void
rkh_trc_ao(void *ao)
{
1a00203e:	b510      	push	{r4, lr}
1a002040:	4604      	mov	r4, r0
    RKH_TRC_BEGIN_WOFIL(RKH_TE_FWK_AO)
1a002042:	f7ff fa51 	bl	1a0014e8 <rkhport_enter_critical>
1a002046:	20ae      	movs	r0, #174	; 0xae
1a002048:	f7ff ffac 	bl	1a001fa4 <rkh_trc_begin>
        RKH_TRC_SYM(ao);
1a00204c:	4620      	mov	r0, r4
1a00204e:	f7ff ff98 	bl	1a001f82 <rkh_trc_u32>
        RKH_TRC_STR(RKH_GET_AO_NAME((RKH_SMA_T *)ao));
1a002052:	6823      	ldr	r3, [r4, #0]
1a002054:	6858      	ldr	r0, [r3, #4]
1a002056:	f7ff ffbb 	bl	1a001fd0 <rkh_trc_str>
    RKH_TRC_END_WOFIL()
1a00205a:	f7ff ff7b 	bl	1a001f54 <rkh_trc_end>
1a00205e:	f7ff fa4f 	bl	1a001500 <rkhport_exit_critical>
    RKH_TRC_FLUSH();
1a002062:	f7fe f9a4 	bl	1a0003ae <rkh_trc_flush>
1a002066:	bd10      	pop	{r4, pc}

1a002068 <rkh_trc_state>:
}

void
rkh_trc_state(void *ao, rui8_t *state)
{
1a002068:	b538      	push	{r3, r4, r5, lr}
1a00206a:	4605      	mov	r5, r0
1a00206c:	460c      	mov	r4, r1
    
    RKH_TRC_BEGIN_WOFIL((CB((state))->type & RKH_REGULAR) == 0 ? 
1a00206e:	f7ff fa3b 	bl	1a0014e8 <rkhport_enter_critical>
1a002072:	6823      	ldr	r3, [r4, #0]
1a002074:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002078:	d012      	beq.n	1a0020a0 <rkh_trc_state+0x38>
1a00207a:	20af      	movs	r0, #175	; 0xaf
1a00207c:	f7ff ff92 	bl	1a001fa4 <rkh_trc_begin>
                                                        RKH_TE_FWK_PSTATE:
                                                        RKH_TE_FWK_STATE)
        RKH_TRC_SYM(ao);
1a002080:	4628      	mov	r0, r5
1a002082:	f7ff ff7e 	bl	1a001f82 <rkh_trc_u32>
        RKH_TRC_SYM(state);
1a002086:	4620      	mov	r0, r4
1a002088:	f7ff ff7b 	bl	1a001f82 <rkh_trc_u32>
        RKH_TRC_STR(RKH_GET_VERTEX_NAME(state));
1a00208c:	6860      	ldr	r0, [r4, #4]
1a00208e:	f7ff ff9f 	bl	1a001fd0 <rkh_trc_str>
    RKH_TRC_END_WOFIL()
1a002092:	f7ff ff5f 	bl	1a001f54 <rkh_trc_end>
1a002096:	f7ff fa33 	bl	1a001500 <rkhport_exit_critical>
    RKH_TRC_FLUSH();
1a00209a:	f7fe f988 	bl	1a0003ae <rkh_trc_flush>
1a00209e:	bd38      	pop	{r3, r4, r5, pc}
    RKH_TRC_BEGIN_WOFIL((CB((state))->type & RKH_REGULAR) == 0 ? 
1a0020a0:	20b0      	movs	r0, #176	; 0xb0
1a0020a2:	e7eb      	b.n	1a00207c <rkh_trc_state+0x14>

1a0020a4 <rkh_trc_get_block>:
    return trByte;
}

rui8_t *
rkh_trc_get_block(TRCQTY_T *nget)
{
1a0020a4:	b430      	push	{r4, r5}
1a0020a6:	4604      	mov	r4, r0
    rui8_t *trByte = (rui8_t *)0;
    TRCQTY_T n;

    if (trcqty == (TRCQTY_T)0)
1a0020a8:	4b0f      	ldr	r3, [pc, #60]	; (1a0020e8 <rkh_trc_get_block+0x44>)
1a0020aa:	781b      	ldrb	r3, [r3, #0]
1a0020ac:	b1cb      	cbz	r3, 1a0020e2 <rkh_trc_get_block+0x3e>
    {
        *nget = (TRCQTY_T)0;
        return trByte;
    }

    trByte = trcout;
1a0020ae:	4a0f      	ldr	r2, [pc, #60]	; (1a0020ec <rkh_trc_get_block+0x48>)
1a0020b0:	6810      	ldr	r0, [r2, #0]

    /* Calculates the number of bytes to be retrieved */
    n = (TRCQTY_T)(trcend - trcout);    /* bytes until the end */
1a0020b2:	4a0f      	ldr	r2, [pc, #60]	; (1a0020f0 <rkh_trc_get_block+0x4c>)
1a0020b4:	6815      	ldr	r5, [r2, #0]
1a0020b6:	1a2a      	subs	r2, r5, r0
1a0020b8:	b2d2      	uxtb	r2, r2
    if (n > trcqty)
1a0020ba:	4293      	cmp	r3, r2
1a0020bc:	d200      	bcs.n	1a0020c0 <rkh_trc_get_block+0x1c>
    {
        n = trcqty;
1a0020be:	461a      	mov	r2, r3
    }
    if (n > *nget)
1a0020c0:	7821      	ldrb	r1, [r4, #0]
1a0020c2:	428a      	cmp	r2, r1
1a0020c4:	d800      	bhi.n	1a0020c8 <rkh_trc_get_block+0x24>
1a0020c6:	4611      	mov	r1, r2
    {
        n = *nget;
    }

    *nget = n;
1a0020c8:	7021      	strb	r1, [r4, #0]
    trcout += n;
1a0020ca:	1842      	adds	r2, r0, r1
1a0020cc:	4c07      	ldr	r4, [pc, #28]	; (1a0020ec <rkh_trc_get_block+0x48>)
1a0020ce:	6022      	str	r2, [r4, #0]
    trcqty -= n;
1a0020d0:	1a5b      	subs	r3, r3, r1
1a0020d2:	4905      	ldr	r1, [pc, #20]	; (1a0020e8 <rkh_trc_get_block+0x44>)
1a0020d4:	700b      	strb	r3, [r1, #0]

    if (trcout >= trcend)
1a0020d6:	4295      	cmp	r5, r2
1a0020d8:	d801      	bhi.n	1a0020de <rkh_trc_get_block+0x3a>
    {
        trcout = trcstm;
1a0020da:	4a06      	ldr	r2, [pc, #24]	; (1a0020f4 <rkh_trc_get_block+0x50>)
1a0020dc:	6022      	str	r2, [r4, #0]
    }

    return trByte;
}
1a0020de:	bc30      	pop	{r4, r5}
1a0020e0:	4770      	bx	lr
        *nget = (TRCQTY_T)0;
1a0020e2:	7003      	strb	r3, [r0, #0]
        return trByte;
1a0020e4:	4618      	mov	r0, r3
1a0020e6:	e7fa      	b.n	1a0020de <rkh_trc_get_block+0x3a>
1a0020e8:	100000e0 	.word	0x100000e0
1a0020ec:	100000dc 	.word	0x100000dc
1a0020f0:	100000d4 	.word	0x100000d4
1a0020f4:	100000e4 	.word	0x100000e4

1a0020f8 <rkh_trc_put>:

void 
rkh_trc_put(rui8_t b)
{
    *trcin++ = b;
1a0020f8:	490e      	ldr	r1, [pc, #56]	; (1a002134 <rkh_trc_put+0x3c>)
1a0020fa:	680b      	ldr	r3, [r1, #0]
1a0020fc:	1c5a      	adds	r2, r3, #1
1a0020fe:	600a      	str	r2, [r1, #0]
1a002100:	7018      	strb	r0, [r3, #0]
    ++trcqty;
1a002102:	490d      	ldr	r1, [pc, #52]	; (1a002138 <rkh_trc_put+0x40>)
1a002104:	780b      	ldrb	r3, [r1, #0]
1a002106:	3301      	adds	r3, #1
1a002108:	b2db      	uxtb	r3, r3
1a00210a:	700b      	strb	r3, [r1, #0]

    if (trcin == trcend)
1a00210c:	490b      	ldr	r1, [pc, #44]	; (1a00213c <rkh_trc_put+0x44>)
1a00210e:	6809      	ldr	r1, [r1, #0]
1a002110:	428a      	cmp	r2, r1
1a002112:	d003      	beq.n	1a00211c <rkh_trc_put+0x24>
    {
        trcin = trcstm;
    }

    if (trcqty >= RKH_CFG_TRC_SIZEOF_STREAM)
1a002114:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002118:	d104      	bne.n	1a002124 <rkh_trc_put+0x2c>
1a00211a:	4770      	bx	lr
        trcin = trcstm;
1a00211c:	4908      	ldr	r1, [pc, #32]	; (1a002140 <rkh_trc_put+0x48>)
1a00211e:	4a05      	ldr	r2, [pc, #20]	; (1a002134 <rkh_trc_put+0x3c>)
1a002120:	6011      	str	r1, [r2, #0]
1a002122:	e7f7      	b.n	1a002114 <rkh_trc_put+0x1c>
    {
        trcqty = RKH_CFG_TRC_SIZEOF_STREAM;
1a002124:	2280      	movs	r2, #128	; 0x80
1a002126:	4b04      	ldr	r3, [pc, #16]	; (1a002138 <rkh_trc_put+0x40>)
1a002128:	701a      	strb	r2, [r3, #0]
        trcout = trcin;
1a00212a:	4b02      	ldr	r3, [pc, #8]	; (1a002134 <rkh_trc_put+0x3c>)
1a00212c:	681a      	ldr	r2, [r3, #0]
1a00212e:	4b05      	ldr	r3, [pc, #20]	; (1a002144 <rkh_trc_put+0x4c>)
1a002130:	601a      	str	r2, [r3, #0]
    }
}
1a002132:	e7f2      	b.n	1a00211a <rkh_trc_put+0x22>
1a002134:	100000d8 	.word	0x100000d8
1a002138:	100000e0 	.word	0x100000e0
1a00213c:	100000d4 	.word	0x100000d4
1a002140:	100000e4 	.word	0x100000e4
1a002144:	100000dc 	.word	0x100000dc

1a002148 <rkh_trcStream_init>:
{
1a002148:	b508      	push	{r3, lr}
    trcin = trcout = trcstm;
1a00214a:	4b07      	ldr	r3, [pc, #28]	; (1a002168 <rkh_trcStream_init+0x20>)
1a00214c:	4a07      	ldr	r2, [pc, #28]	; (1a00216c <rkh_trcStream_init+0x24>)
1a00214e:	6013      	str	r3, [r2, #0]
1a002150:	4a07      	ldr	r2, [pc, #28]	; (1a002170 <rkh_trcStream_init+0x28>)
1a002152:	6013      	str	r3, [r2, #0]
    trcqty = 0;
1a002154:	2100      	movs	r1, #0
1a002156:	4a07      	ldr	r2, [pc, #28]	; (1a002174 <rkh_trcStream_init+0x2c>)
1a002158:	7011      	strb	r1, [r2, #0]
    trcend = &trcstm[RKH_CFG_TRC_SIZEOF_STREAM];
1a00215a:	3380      	adds	r3, #128	; 0x80
1a00215c:	4a06      	ldr	r2, [pc, #24]	; (1a002178 <rkh_trcStream_init+0x30>)
1a00215e:	6013      	str	r3, [r2, #0]
    RKH_TRC_U8_RAW(RKH_FLG);
1a002160:	207e      	movs	r0, #126	; 0x7e
1a002162:	f7ff ffc9 	bl	1a0020f8 <rkh_trc_put>
1a002166:	bd08      	pop	{r3, pc}
1a002168:	100000e4 	.word	0x100000e4
1a00216c:	100000dc 	.word	0x100000dc
1a002170:	100000d8 	.word	0x100000d8
1a002174:	100000e0 	.word	0x100000e0
1a002178:	100000d4 	.word	0x100000d4

1a00217c <__aeabi_uldivmod>:
1a00217c:	b953      	cbnz	r3, 1a002194 <__aeabi_uldivmod+0x18>
1a00217e:	b94a      	cbnz	r2, 1a002194 <__aeabi_uldivmod+0x18>
1a002180:	2900      	cmp	r1, #0
1a002182:	bf08      	it	eq
1a002184:	2800      	cmpeq	r0, #0
1a002186:	bf1c      	itt	ne
1a002188:	f04f 31ff 	movne.w	r1, #4294967295
1a00218c:	f04f 30ff 	movne.w	r0, #4294967295
1a002190:	f000 b97a 	b.w	1a002488 <__aeabi_idiv0>
1a002194:	f1ad 0c08 	sub.w	ip, sp, #8
1a002198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00219c:	f000 f806 	bl	1a0021ac <__udivmoddi4>
1a0021a0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0021a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0021a8:	b004      	add	sp, #16
1a0021aa:	4770      	bx	lr

1a0021ac <__udivmoddi4>:
1a0021ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0021b0:	468c      	mov	ip, r1
1a0021b2:	460d      	mov	r5, r1
1a0021b4:	4604      	mov	r4, r0
1a0021b6:	9e08      	ldr	r6, [sp, #32]
1a0021b8:	2b00      	cmp	r3, #0
1a0021ba:	d151      	bne.n	1a002260 <__udivmoddi4+0xb4>
1a0021bc:	428a      	cmp	r2, r1
1a0021be:	4617      	mov	r7, r2
1a0021c0:	d96d      	bls.n	1a00229e <__udivmoddi4+0xf2>
1a0021c2:	fab2 fe82 	clz	lr, r2
1a0021c6:	f1be 0f00 	cmp.w	lr, #0
1a0021ca:	d00b      	beq.n	1a0021e4 <__udivmoddi4+0x38>
1a0021cc:	f1ce 0c20 	rsb	ip, lr, #32
1a0021d0:	fa01 f50e 	lsl.w	r5, r1, lr
1a0021d4:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0021d8:	fa02 f70e 	lsl.w	r7, r2, lr
1a0021dc:	ea4c 0c05 	orr.w	ip, ip, r5
1a0021e0:	fa00 f40e 	lsl.w	r4, r0, lr
1a0021e4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a0021e8:	0c25      	lsrs	r5, r4, #16
1a0021ea:	fbbc f8fa 	udiv	r8, ip, sl
1a0021ee:	fa1f f987 	uxth.w	r9, r7
1a0021f2:	fb0a cc18 	mls	ip, sl, r8, ip
1a0021f6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a0021fa:	fb08 f309 	mul.w	r3, r8, r9
1a0021fe:	42ab      	cmp	r3, r5
1a002200:	d90a      	bls.n	1a002218 <__udivmoddi4+0x6c>
1a002202:	19ed      	adds	r5, r5, r7
1a002204:	f108 32ff 	add.w	r2, r8, #4294967295
1a002208:	f080 8123 	bcs.w	1a002452 <__udivmoddi4+0x2a6>
1a00220c:	42ab      	cmp	r3, r5
1a00220e:	f240 8120 	bls.w	1a002452 <__udivmoddi4+0x2a6>
1a002212:	f1a8 0802 	sub.w	r8, r8, #2
1a002216:	443d      	add	r5, r7
1a002218:	1aed      	subs	r5, r5, r3
1a00221a:	b2a4      	uxth	r4, r4
1a00221c:	fbb5 f0fa 	udiv	r0, r5, sl
1a002220:	fb0a 5510 	mls	r5, sl, r0, r5
1a002224:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a002228:	fb00 f909 	mul.w	r9, r0, r9
1a00222c:	45a1      	cmp	r9, r4
1a00222e:	d909      	bls.n	1a002244 <__udivmoddi4+0x98>
1a002230:	19e4      	adds	r4, r4, r7
1a002232:	f100 33ff 	add.w	r3, r0, #4294967295
1a002236:	f080 810a 	bcs.w	1a00244e <__udivmoddi4+0x2a2>
1a00223a:	45a1      	cmp	r9, r4
1a00223c:	f240 8107 	bls.w	1a00244e <__udivmoddi4+0x2a2>
1a002240:	3802      	subs	r0, #2
1a002242:	443c      	add	r4, r7
1a002244:	eba4 0409 	sub.w	r4, r4, r9
1a002248:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a00224c:	2100      	movs	r1, #0
1a00224e:	2e00      	cmp	r6, #0
1a002250:	d061      	beq.n	1a002316 <__udivmoddi4+0x16a>
1a002252:	fa24 f40e 	lsr.w	r4, r4, lr
1a002256:	2300      	movs	r3, #0
1a002258:	6034      	str	r4, [r6, #0]
1a00225a:	6073      	str	r3, [r6, #4]
1a00225c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002260:	428b      	cmp	r3, r1
1a002262:	d907      	bls.n	1a002274 <__udivmoddi4+0xc8>
1a002264:	2e00      	cmp	r6, #0
1a002266:	d054      	beq.n	1a002312 <__udivmoddi4+0x166>
1a002268:	2100      	movs	r1, #0
1a00226a:	e886 0021 	stmia.w	r6, {r0, r5}
1a00226e:	4608      	mov	r0, r1
1a002270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002274:	fab3 f183 	clz	r1, r3
1a002278:	2900      	cmp	r1, #0
1a00227a:	f040 808e 	bne.w	1a00239a <__udivmoddi4+0x1ee>
1a00227e:	42ab      	cmp	r3, r5
1a002280:	d302      	bcc.n	1a002288 <__udivmoddi4+0xdc>
1a002282:	4282      	cmp	r2, r0
1a002284:	f200 80fa 	bhi.w	1a00247c <__udivmoddi4+0x2d0>
1a002288:	1a84      	subs	r4, r0, r2
1a00228a:	eb65 0503 	sbc.w	r5, r5, r3
1a00228e:	2001      	movs	r0, #1
1a002290:	46ac      	mov	ip, r5
1a002292:	2e00      	cmp	r6, #0
1a002294:	d03f      	beq.n	1a002316 <__udivmoddi4+0x16a>
1a002296:	e886 1010 	stmia.w	r6, {r4, ip}
1a00229a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00229e:	b912      	cbnz	r2, 1a0022a6 <__udivmoddi4+0xfa>
1a0022a0:	2701      	movs	r7, #1
1a0022a2:	fbb7 f7f2 	udiv	r7, r7, r2
1a0022a6:	fab7 fe87 	clz	lr, r7
1a0022aa:	f1be 0f00 	cmp.w	lr, #0
1a0022ae:	d134      	bne.n	1a00231a <__udivmoddi4+0x16e>
1a0022b0:	1beb      	subs	r3, r5, r7
1a0022b2:	0c3a      	lsrs	r2, r7, #16
1a0022b4:	fa1f fc87 	uxth.w	ip, r7
1a0022b8:	2101      	movs	r1, #1
1a0022ba:	fbb3 f8f2 	udiv	r8, r3, r2
1a0022be:	0c25      	lsrs	r5, r4, #16
1a0022c0:	fb02 3318 	mls	r3, r2, r8, r3
1a0022c4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a0022c8:	fb0c f308 	mul.w	r3, ip, r8
1a0022cc:	42ab      	cmp	r3, r5
1a0022ce:	d907      	bls.n	1a0022e0 <__udivmoddi4+0x134>
1a0022d0:	19ed      	adds	r5, r5, r7
1a0022d2:	f108 30ff 	add.w	r0, r8, #4294967295
1a0022d6:	d202      	bcs.n	1a0022de <__udivmoddi4+0x132>
1a0022d8:	42ab      	cmp	r3, r5
1a0022da:	f200 80d1 	bhi.w	1a002480 <__udivmoddi4+0x2d4>
1a0022de:	4680      	mov	r8, r0
1a0022e0:	1aed      	subs	r5, r5, r3
1a0022e2:	b2a3      	uxth	r3, r4
1a0022e4:	fbb5 f0f2 	udiv	r0, r5, r2
1a0022e8:	fb02 5510 	mls	r5, r2, r0, r5
1a0022ec:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a0022f0:	fb0c fc00 	mul.w	ip, ip, r0
1a0022f4:	45a4      	cmp	ip, r4
1a0022f6:	d907      	bls.n	1a002308 <__udivmoddi4+0x15c>
1a0022f8:	19e4      	adds	r4, r4, r7
1a0022fa:	f100 33ff 	add.w	r3, r0, #4294967295
1a0022fe:	d202      	bcs.n	1a002306 <__udivmoddi4+0x15a>
1a002300:	45a4      	cmp	ip, r4
1a002302:	f200 80b8 	bhi.w	1a002476 <__udivmoddi4+0x2ca>
1a002306:	4618      	mov	r0, r3
1a002308:	eba4 040c 	sub.w	r4, r4, ip
1a00230c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a002310:	e79d      	b.n	1a00224e <__udivmoddi4+0xa2>
1a002312:	4631      	mov	r1, r6
1a002314:	4630      	mov	r0, r6
1a002316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00231a:	f1ce 0420 	rsb	r4, lr, #32
1a00231e:	fa05 f30e 	lsl.w	r3, r5, lr
1a002322:	fa07 f70e 	lsl.w	r7, r7, lr
1a002326:	fa20 f804 	lsr.w	r8, r0, r4
1a00232a:	0c3a      	lsrs	r2, r7, #16
1a00232c:	fa25 f404 	lsr.w	r4, r5, r4
1a002330:	ea48 0803 	orr.w	r8, r8, r3
1a002334:	fbb4 f1f2 	udiv	r1, r4, r2
1a002338:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a00233c:	fb02 4411 	mls	r4, r2, r1, r4
1a002340:	fa1f fc87 	uxth.w	ip, r7
1a002344:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a002348:	fb01 f30c 	mul.w	r3, r1, ip
1a00234c:	42ab      	cmp	r3, r5
1a00234e:	fa00 f40e 	lsl.w	r4, r0, lr
1a002352:	d909      	bls.n	1a002368 <__udivmoddi4+0x1bc>
1a002354:	19ed      	adds	r5, r5, r7
1a002356:	f101 30ff 	add.w	r0, r1, #4294967295
1a00235a:	f080 808a 	bcs.w	1a002472 <__udivmoddi4+0x2c6>
1a00235e:	42ab      	cmp	r3, r5
1a002360:	f240 8087 	bls.w	1a002472 <__udivmoddi4+0x2c6>
1a002364:	3902      	subs	r1, #2
1a002366:	443d      	add	r5, r7
1a002368:	1aeb      	subs	r3, r5, r3
1a00236a:	fa1f f588 	uxth.w	r5, r8
1a00236e:	fbb3 f0f2 	udiv	r0, r3, r2
1a002372:	fb02 3310 	mls	r3, r2, r0, r3
1a002376:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a00237a:	fb00 f30c 	mul.w	r3, r0, ip
1a00237e:	42ab      	cmp	r3, r5
1a002380:	d907      	bls.n	1a002392 <__udivmoddi4+0x1e6>
1a002382:	19ed      	adds	r5, r5, r7
1a002384:	f100 38ff 	add.w	r8, r0, #4294967295
1a002388:	d26f      	bcs.n	1a00246a <__udivmoddi4+0x2be>
1a00238a:	42ab      	cmp	r3, r5
1a00238c:	d96d      	bls.n	1a00246a <__udivmoddi4+0x2be>
1a00238e:	3802      	subs	r0, #2
1a002390:	443d      	add	r5, r7
1a002392:	1aeb      	subs	r3, r5, r3
1a002394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a002398:	e78f      	b.n	1a0022ba <__udivmoddi4+0x10e>
1a00239a:	f1c1 0720 	rsb	r7, r1, #32
1a00239e:	fa22 f807 	lsr.w	r8, r2, r7
1a0023a2:	408b      	lsls	r3, r1
1a0023a4:	fa05 f401 	lsl.w	r4, r5, r1
1a0023a8:	ea48 0303 	orr.w	r3, r8, r3
1a0023ac:	fa20 fe07 	lsr.w	lr, r0, r7
1a0023b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a0023b4:	40fd      	lsrs	r5, r7
1a0023b6:	ea4e 0e04 	orr.w	lr, lr, r4
1a0023ba:	fbb5 f9fc 	udiv	r9, r5, ip
1a0023be:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a0023c2:	fb0c 5519 	mls	r5, ip, r9, r5
1a0023c6:	fa1f f883 	uxth.w	r8, r3
1a0023ca:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a0023ce:	fb09 f408 	mul.w	r4, r9, r8
1a0023d2:	42ac      	cmp	r4, r5
1a0023d4:	fa02 f201 	lsl.w	r2, r2, r1
1a0023d8:	fa00 fa01 	lsl.w	sl, r0, r1
1a0023dc:	d908      	bls.n	1a0023f0 <__udivmoddi4+0x244>
1a0023de:	18ed      	adds	r5, r5, r3
1a0023e0:	f109 30ff 	add.w	r0, r9, #4294967295
1a0023e4:	d243      	bcs.n	1a00246e <__udivmoddi4+0x2c2>
1a0023e6:	42ac      	cmp	r4, r5
1a0023e8:	d941      	bls.n	1a00246e <__udivmoddi4+0x2c2>
1a0023ea:	f1a9 0902 	sub.w	r9, r9, #2
1a0023ee:	441d      	add	r5, r3
1a0023f0:	1b2d      	subs	r5, r5, r4
1a0023f2:	fa1f fe8e 	uxth.w	lr, lr
1a0023f6:	fbb5 f0fc 	udiv	r0, r5, ip
1a0023fa:	fb0c 5510 	mls	r5, ip, r0, r5
1a0023fe:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a002402:	fb00 f808 	mul.w	r8, r0, r8
1a002406:	45a0      	cmp	r8, r4
1a002408:	d907      	bls.n	1a00241a <__udivmoddi4+0x26e>
1a00240a:	18e4      	adds	r4, r4, r3
1a00240c:	f100 35ff 	add.w	r5, r0, #4294967295
1a002410:	d229      	bcs.n	1a002466 <__udivmoddi4+0x2ba>
1a002412:	45a0      	cmp	r8, r4
1a002414:	d927      	bls.n	1a002466 <__udivmoddi4+0x2ba>
1a002416:	3802      	subs	r0, #2
1a002418:	441c      	add	r4, r3
1a00241a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00241e:	eba4 0408 	sub.w	r4, r4, r8
1a002422:	fba0 8902 	umull	r8, r9, r0, r2
1a002426:	454c      	cmp	r4, r9
1a002428:	46c6      	mov	lr, r8
1a00242a:	464d      	mov	r5, r9
1a00242c:	d315      	bcc.n	1a00245a <__udivmoddi4+0x2ae>
1a00242e:	d012      	beq.n	1a002456 <__udivmoddi4+0x2aa>
1a002430:	b156      	cbz	r6, 1a002448 <__udivmoddi4+0x29c>
1a002432:	ebba 030e 	subs.w	r3, sl, lr
1a002436:	eb64 0405 	sbc.w	r4, r4, r5
1a00243a:	fa04 f707 	lsl.w	r7, r4, r7
1a00243e:	40cb      	lsrs	r3, r1
1a002440:	431f      	orrs	r7, r3
1a002442:	40cc      	lsrs	r4, r1
1a002444:	6037      	str	r7, [r6, #0]
1a002446:	6074      	str	r4, [r6, #4]
1a002448:	2100      	movs	r1, #0
1a00244a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00244e:	4618      	mov	r0, r3
1a002450:	e6f8      	b.n	1a002244 <__udivmoddi4+0x98>
1a002452:	4690      	mov	r8, r2
1a002454:	e6e0      	b.n	1a002218 <__udivmoddi4+0x6c>
1a002456:	45c2      	cmp	sl, r8
1a002458:	d2ea      	bcs.n	1a002430 <__udivmoddi4+0x284>
1a00245a:	ebb8 0e02 	subs.w	lr, r8, r2
1a00245e:	eb69 0503 	sbc.w	r5, r9, r3
1a002462:	3801      	subs	r0, #1
1a002464:	e7e4      	b.n	1a002430 <__udivmoddi4+0x284>
1a002466:	4628      	mov	r0, r5
1a002468:	e7d7      	b.n	1a00241a <__udivmoddi4+0x26e>
1a00246a:	4640      	mov	r0, r8
1a00246c:	e791      	b.n	1a002392 <__udivmoddi4+0x1e6>
1a00246e:	4681      	mov	r9, r0
1a002470:	e7be      	b.n	1a0023f0 <__udivmoddi4+0x244>
1a002472:	4601      	mov	r1, r0
1a002474:	e778      	b.n	1a002368 <__udivmoddi4+0x1bc>
1a002476:	3802      	subs	r0, #2
1a002478:	443c      	add	r4, r7
1a00247a:	e745      	b.n	1a002308 <__udivmoddi4+0x15c>
1a00247c:	4608      	mov	r0, r1
1a00247e:	e708      	b.n	1a002292 <__udivmoddi4+0xe6>
1a002480:	f1a8 0802 	sub.w	r8, r8, #2
1a002484:	443d      	add	r5, r7
1a002486:	e72b      	b.n	1a0022e0 <__udivmoddi4+0x134>

1a002488 <__aeabi_idiv0>:
1a002488:	4770      	bx	lr
1a00248a:	bf00      	nop

1a00248c <memset>:
1a00248c:	4402      	add	r2, r0
1a00248e:	4603      	mov	r3, r0
1a002490:	4293      	cmp	r3, r2
1a002492:	d100      	bne.n	1a002496 <memset+0xa>
1a002494:	4770      	bx	lr
1a002496:	f803 1b01 	strb.w	r1, [r3], #1
1a00249a:	e7f9      	b.n	1a002490 <memset+0x4>

1a00249c <__qo_n.5797>:
1a00249c:	5226 484b 555f 4350 5341 2854 4b52 5f48     &RKH_UPCAST(RKH_
1a0024ac:	4d53 5f41 2c54 6d20 2965 3e2d 7165 6575     SMA_T, me)->eque
1a0024bc:	6575 ff00                                   ue..

1a0024c0 <__s_n.5799>:
1a0024c0:	4954 454d 554f 0054                         TIMEOUT.

1a0024c8 <__to_n.5798>:
1a0024c8:	6d26 2d65 743e 6d69 7265 ff00               &me->timer..

1a0024d4 <blinky>:
1a0024d4:	0000 1000                                   ....

1a0024d8 <e_tout>:
1a0024d8:	0000 ff00                                   ....

1a0024dc <ledOff>:
1a0024dc:	0080 0000 254c 1a00 24e8 1a00               ....L%...$..

1a0024e8 <ledOff_trtbl>:
	...
1a0024f0:	0317 1a00 2508 1a00 00ff 0000 0000 0000     .....%..........
	...

1a002508 <ledOn>:
1a002508:	0080 0000 2554 1a00 2514 1a00               ....T%...%..

1a002514 <ledOn_trtbl>:
	...
1a00251c:	0301 1a00 24dc 1a00 00ff 0000 0000 0000     .....$..........
	...

1a002534 <rs_blinky>:
1a002534:	0000 0000 2544 1a00 2508 1a00 0339 1a00     ....D%...%..9...
1a002544:	6c62 6e69 796b 0000 656c 4f64 6666 0000     blinky..ledOff..
1a002554:	656c 4f64 006e ffff 0201 0804 0f03 0f0f     ledOn...........
1a002564:	00ff ffff                                   ....

1a002568 <periph_to_base>:
1a002568:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a002578:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a002588:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a002598:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a0025a8:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a0025b8:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a0025c8:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a0025d4 <InitClkStates>:
1a0025d4:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a0025e4:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a0025f4:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a002604:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a002614:	111a 0001 111b 0001                         ........

1a00261c <UART_BClock>:
1a00261c:	01c2 01a2 0182 0162                         ......b.

1a002624 <UART_PClock>:
1a002624:	0081 0082 00a1 00a2                         ........

1a00262c <ExtRateIn>:
1a00262c:	0000 0000                                   ....

1a002630 <OscRateIn>:
1a002630:	1b00 00b7                                   ....

1a002634 <gpioLEDBits>:
1a002634:	0e00 0b01 0c01 0005 0105 0205               ............

1a002640 <InitClkStates>:
1a002640:	0308 0001 0307 0001 0f01 0101               ............

1a00264c <pinmuxing>:
1a00264c:	0a02 0040 0b02 0040 0c02 0040 0002 0044     ..@...@...@...D.
1a00265c:	0102 0044 0202 0044 0302 0052 0402 0052     ..D...D...R...R.
1a00266c:	0509 0052 0609 0057 0206 0057 0001 0050     ..R...W...W...P.
1a00267c:	0101 0050 0201 0050 0601 0050 0f01 00f3     ..P...P...P.....
1a00268c:	1001 00f7 1101 00f3 1201 00b3 1301 00f0     ................
1a00269c:	1401 00b3 0707 00b6 0000 00f2 0100 00b6     ................

1a0026ac <gpioPinsConfig>:
1a0026ac:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a0026bc:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a0026cc:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a0026dc:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a0026ec:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a0026fc:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a00270c:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a00271c:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a00272c:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a00273c:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a00274c:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a00275c:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a00276c:	0000 0109 0006 0901 0a02 0000 020e 000b     ................
1a00277c:	0b01 0c02 0100 020c 0400 0005 0102 0504     ................
1a00278c:	0201 0402 0205 0004 0200 0400 0001 0102     ................
1a00279c:	0204 0200 0402 0003 0302 0307 0300 070b     ................
1a0027ac:	0004 0c03 0507 0300 070d 0006 0e03 0102     ................
1a0027bc:	0504 0401 0006 0602 0504 0200 0405 0004     ................
1a0027cc:	0402 0804 0504 040c 0409 0d05 0a04 0504     ................
1a0027dc:	010e 0005 0801 ffff                         ........

1a0027e4 <bitMaskTbl>:
1a0027e4:	0201 0804 2010 8040                         ..... @.

1a0027ec <leastBitSetTbl>:
1a0027ec:	0000 0001 0002 0001 0003 0001 0002 0001     ................
1a0027fc:	0004 0001 0002 0001 0003 0001 0002 0001     ................
1a00280c:	0005 0001 0002 0001 0003 0001 0002 0001     ................
1a00281c:	0004 0001 0002 0001 0003 0001 0002 0001     ................
1a00282c:	0006 0001 0002 0001 0003 0001 0002 0001     ................
1a00283c:	0004 0001 0002 0001 0003 0001 0002 0001     ................
1a00284c:	0005 0001 0002 0001 0003 0001 0002 0001     ................
1a00285c:	0004 0001 0002 0001 0003 0001 0002 0001     ................
1a00286c:	0007 0001 0002 0001 0003 0001 0002 0001     ................
1a00287c:	0004 0001 0002 0001 0003 0001 0002 0001     ................
1a00288c:	0005 0001 0002 0001 0003 0001 0002 0001     ................
1a00289c:	0004 0001 0002 0001 0003 0001 0002 0001     ................
1a0028ac:	0006 0001 0002 0001 0003 0001 0002 0001     ................
1a0028bc:	0004 0001 0002 0001 0003 0001 0002 0001     ................
1a0028cc:	0005 0001 0002 0001 0003 0001 0002 0001     ................
1a0028dc:	0004 0001 0002 0001 0003 0001 0002 0001     ................
1a0028ec:	6b72 7168 6575 6575 ff00 ffff 6b72 7368     rkhqueue....rkhs
1a0028fc:	006d ffff 6b72 7368 616d ff00 6b72 7368     m...rkhsma..rkhs
1a00290c:	616d 705f 6972 006f 6b72 7368 616d 735f     ma_prio.rkhsma_s
1a00291c:	6e79 0063 6b72 7468 726d ff00               ync.rkhtmr..

1a002928 <fsig>:
1a002928:	0002 0000 00cc 1000                         ........

1a002930 <fsma>:
1a002930:	0001 0000 00d0 1000 6b72 7468 6372 665f     ........rkhtrc_f
1a002940:	6c69 6574 0072 0000                         ilter...

1a002948 <trcgmtbl>:
1a002948:	0100 0101 0202 0304 0107 0308 040b 020f     ................
